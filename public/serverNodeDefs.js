export const serverNodeDefs = {
  KSampler: {
    input: {
      required: {
        model: ["MODEL"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        latent_image: ["LATENT"],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "KSampler",
    display_name: "KSampler",
    description: "",
    category: "sampling",
    output_node: false,
  },
  CheckpointLoaderSimple: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "VAE"],
    name: "CheckpointLoaderSimple",
    display_name: "Load Checkpoint",
    description: "",
    category: "loaders",
    output_node: false,
  },
  CLIPTextEncode: {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
        clip: ["CLIP"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "CLIPTextEncode",
    display_name: "CLIP Text Encode (Prompt)",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  CLIPSetLastLayer: {
    input: {
      required: {
        clip: ["CLIP"],
        stop_at_clip_layer: [
          "INT",
          {
            default: -1,
            min: -24,
            max: -1,
            step: 1,
          },
        ],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "CLIPSetLastLayer",
    display_name: "CLIP Set Last Layer",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  VAEDecode: {
    input: {
      required: {
        samples: ["LATENT"],
        vae: ["VAE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "VAEDecode",
    display_name: "VAE Decode",
    description: "",
    category: "latent",
    output_node: false,
  },
  VAEEncode: {
    input: {
      required: {
        pixels: ["IMAGE"],
        vae: ["VAE"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "VAEEncode",
    display_name: "VAE Encode",
    description: "",
    category: "latent",
    output_node: false,
  },
  VAEEncodeForInpaint: {
    input: {
      required: {
        pixels: ["IMAGE"],
        vae: ["VAE"],
        mask: ["MASK"],
        grow_mask_by: [
          "INT",
          {
            default: 6,
            min: 0,
            max: 64,
            step: 1,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "VAEEncodeForInpaint",
    display_name: "VAE Encode (for Inpainting)",
    description: "",
    category: "latent/inpaint",
    output_node: false,
  },
  VAELoader: {
    input: {
      required: {
        vae_name: [
          [
            "sha256_63aeecb90ff7bc1c115395962d3e803571385b61938377bc7089b36e81e92e2e.safetensors",
            "sha256_735e4c3a447a3255760d7f86845f09f937809baa529c17370d83e4c3758f3c75.safetensors",
            "vae.safetensors",
          ],
        ],
      },
    },
    output: ["VAE"],
    output_is_list: [false],
    output_name: ["VAE"],
    name: "VAELoader",
    display_name: "Load VAE",
    description: "",
    category: "loaders",
    output_node: false,
  },
  EmptyLatentImage: {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "EmptyLatentImage",
    display_name: "Empty Latent Image",
    description: "",
    category: "latent",
    output_node: false,
  },
  LatentUpscale: {
    input: {
      required: {
        samples: ["LATENT"],
        upscale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "bislerp"],
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        crop: [["disabled", "center"]],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentUpscale",
    display_name: "Upscale Latent",
    description: "",
    category: "latent",
    output_node: false,
  },
  LatentUpscaleBy: {
    input: {
      required: {
        samples: ["LATENT"],
        upscale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "bislerp"],
        ],
        scale_by: [
          "FLOAT",
          {
            default: 1.5,
            min: 0.01,
            max: 8,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentUpscaleBy",
    display_name: "Upscale Latent By",
    description: "",
    category: "latent",
    output_node: false,
  },
  LatentFromBatch: {
    input: {
      required: {
        samples: ["LATENT"],
        batch_index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 63,
          },
        ],
        length: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentFromBatch",
    display_name: "Latent From Batch",
    description: "",
    category: "latent/batch",
    output_node: false,
  },
  RepeatLatentBatch: {
    input: {
      required: {
        samples: ["LATENT"],
        amount: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "RepeatLatentBatch",
    display_name: "Repeat Latent Batch",
    description: "",
    category: "latent/batch",
    output_node: false,
  },
  SaveImage: {
    input: {
      required: {
        images: ["IMAGE"],
        filename_prefix: [
          "STRING",
          {
            default: "ComfyUI",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "SaveImage",
    display_name: "Save Image",
    description: "",
    category: "image",
    output_node: true,
  },
  PreviewImage: {
    input: {
      required: {
        images: ["IMAGE"],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "PreviewImage",
    display_name: "Preview Image",
    description: "",
    category: "image",
    output_node: true,
  },
  LoadImage: {
    input: {
      required: {
        image: [
          ["example.png"],
          {
            image_upload: true,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "LoadImage",
    display_name: "Load Image",
    description: "",
    category: "image",
    output_node: false,
  },
  LoadImageMask: {
    input: {
      required: {
        image: [
          ["example.png"],
          {
            image_upload: true,
          },
        ],
        channel: [["alpha", "red", "green", "blue"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "LoadImageMask",
    display_name: "Load Image (as Mask)",
    description: "",
    category: "mask",
    output_node: false,
  },
  ImageScale: {
    input: {
      required: {
        image: ["IMAGE"],
        upscale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "lanczos"],
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        crop: [["disabled", "center"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageScale",
    display_name: "Upscale Image",
    description: "",
    category: "image/upscaling",
    output_node: false,
  },
  ImageScaleBy: {
    input: {
      required: {
        image: ["IMAGE"],
        upscale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "lanczos"],
        ],
        scale_by: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 8,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageScaleBy",
    display_name: "Upscale Image By",
    description: "",
    category: "image/upscaling",
    output_node: false,
  },
  ImageInvert: {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageInvert",
    display_name: "Invert Image",
    description: "",
    category: "image",
    output_node: false,
  },
  ImageBatch: {
    input: {
      required: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageBatch",
    display_name: "Batch Images",
    description: "",
    category: "image",
    output_node: false,
  },
  ImagePadForOutpaint: {
    input: {
      required: {
        image: ["IMAGE"],
        left: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        top: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        right: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        bottom: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        feathering: [
          "INT",
          {
            default: 40,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "ImagePadForOutpaint",
    display_name: "Pad Image for Outpainting",
    description: "",
    category: "image",
    output_node: false,
  },
  EmptyImage: {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
        color: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16777215,
            step: 1,
            display: "color",
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "EmptyImage",
    display_name: "EmptyImage",
    description: "",
    category: "image",
    output_node: false,
  },
  ConditioningAverage: {
    input: {
      required: {
        conditioning_to: ["CONDITIONING"],
        conditioning_from: ["CONDITIONING"],
        conditioning_to_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningAverage",
    display_name: "ConditioningAverage",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ConditioningCombine: {
    input: {
      required: {
        conditioning_1: ["CONDITIONING"],
        conditioning_2: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningCombine",
    display_name: "Conditioning (Combine)",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ConditioningConcat: {
    input: {
      required: {
        conditioning_to: ["CONDITIONING"],
        conditioning_from: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningConcat",
    display_name: "Conditioning (Concat)",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ConditioningSetArea: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        width: [
          "INT",
          {
            default: 64,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 64,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningSetArea",
    display_name: "Conditioning (Set Area)",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ConditioningSetAreaPercentage: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        width: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        height: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        x: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        y: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningSetAreaPercentage",
    display_name: "Conditioning (Set Area with Percentage)",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ConditioningSetAreaStrength: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningSetAreaStrength",
    display_name: "ConditioningSetAreaStrength",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ConditioningSetMask: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        mask: ["MASK"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningSetMask",
    display_name: "Conditioning (Set Mask)",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  KSamplerAdvanced: {
    input: {
      required: {
        model: ["MODEL"],
        add_noise: [["enable", "disable"]],
        noise_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        latent_image: ["LATENT"],
        start_at_step: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10000,
          },
        ],
        end_at_step: [
          "INT",
          {
            default: 10000,
            min: 0,
            max: 10000,
          },
        ],
        return_with_leftover_noise: [["disable", "enable"]],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "KSamplerAdvanced",
    display_name: "KSampler (Advanced)",
    description: "",
    category: "sampling",
    output_node: false,
  },
  SetLatentNoiseMask: {
    input: {
      required: {
        samples: ["LATENT"],
        mask: ["MASK"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "SetLatentNoiseMask",
    display_name: "Set Latent Noise Mask",
    description: "",
    category: "latent/inpaint",
    output_node: false,
  },
  LatentComposite: {
    input: {
      required: {
        samples_to: ["LATENT"],
        samples_from: ["LATENT"],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        feather: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentComposite",
    display_name: "Latent Composite",
    description: "",
    category: "latent",
    output_node: false,
  },
  LatentBlend: {
    input: {
      required: {
        samples1: ["LATENT"],
        samples2: ["LATENT"],
        blend_factor: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentBlend",
    display_name: "Latent Blend",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  LatentRotate: {
    input: {
      required: {
        samples: ["LATENT"],
        rotation: [["none", "90 degrees", "180 degrees", "270 degrees"]],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentRotate",
    display_name: "Rotate Latent",
    description: "",
    category: "latent/transform",
    output_node: false,
  },
  LatentFlip: {
    input: {
      required: {
        samples: ["LATENT"],
        flip_method: [["x-axis: vertically", "y-axis: horizontally"]],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentFlip",
    display_name: "Flip Latent",
    description: "",
    category: "latent/transform",
    output_node: false,
  },
  LatentCrop: {
    input: {
      required: {
        samples: ["LATENT"],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentCrop",
    display_name: "Crop Latent",
    description: "",
    category: "latent/transform",
    output_node: false,
  },
  LoraLoader: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_name: [
          [
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP"],
    output_is_list: [false, false],
    output_name: ["MODEL", "CLIP"],
    name: "LoraLoader",
    display_name: "Load LoRA",
    description: "",
    category: "loaders",
    output_node: false,
  },
  CLIPLoader: {
    input: {
      required: {
        clip_name: [["clip.safetensors"]],
        type: [["stable_diffusion", "stable_cascade", "sd3", "stable_audio"]],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "CLIPLoader",
    display_name: "Load CLIP",
    description: "",
    category: "advanced/loaders",
    output_node: false,
  },
  UNETLoader: {
    input: {
      required: {
        unet_name: [["unet.safetensors"]],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "UNETLoader",
    display_name: "UNETLoader",
    description: "",
    category: "advanced/loaders",
    output_node: false,
  },
  DualCLIPLoader: {
    input: {
      required: {
        clip_name1: [["clip.safetensors"]],
        clip_name2: [["clip.safetensors"]],
        type: [["sdxl", "sd3"]],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "DualCLIPLoader",
    display_name: "DualCLIPLoader",
    description: "",
    category: "advanced/loaders",
    output_node: false,
  },
  CLIPVisionEncode: {
    input: {
      required: {
        clip_vision: ["CLIP_VISION"],
        image: ["IMAGE"],
      },
    },
    output: ["CLIP_VISION_OUTPUT"],
    output_is_list: [false],
    output_name: ["CLIP_VISION_OUTPUT"],
    name: "CLIPVisionEncode",
    display_name: "CLIP Vision Encode",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  StyleModelApply: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        style_model: ["STYLE_MODEL"],
        clip_vision_output: ["CLIP_VISION_OUTPUT"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "StyleModelApply",
    display_name: "Apply Style Model",
    description: "",
    category: "conditioning/style_model",
    output_node: false,
  },
  unCLIPConditioning: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        clip_vision_output: ["CLIP_VISION_OUTPUT"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        noise_augmentation: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "unCLIPConditioning",
    display_name: "unCLIPConditioning",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ControlNetApply: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        control_net: ["CONTROL_NET"],
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ControlNetApply",
    display_name: "Apply ControlNet",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ControlNetApplyAdvanced: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        control_net: ["CONTROL_NET"],
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["positive", "negative"],
    name: "ControlNetApplyAdvanced",
    display_name: "Apply ControlNet (Advanced)",
    description: "",
    category: "conditioning",
    output_node: false,
  },
  ControlNetLoader: {
    input: {
      required: {
        control_net_name: [
          [
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "ControlNetLoader",
    display_name: "Load ControlNet Model",
    description: "",
    category: "loaders",
    output_node: false,
  },
  DiffControlNetLoader: {
    input: {
      required: {
        model: ["MODEL"],
        control_net_name: [
          [
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "DiffControlNetLoader",
    display_name: "Load ControlNet Model (diff)",
    description: "",
    category: "loaders",
    output_node: false,
  },
  StyleModelLoader: {
    input: {
      required: {
        style_model_name: [["style_models.safetensors"]],
      },
    },
    output: ["STYLE_MODEL"],
    output_is_list: [false],
    output_name: ["STYLE_MODEL"],
    name: "StyleModelLoader",
    display_name: "Load Style Model",
    description: "",
    category: "loaders",
    output_node: false,
  },
  CLIPVisionLoader: {
    input: {
      required: {
        clip_name: [
          [
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "CLIP-ViT-bigG-14-laion2B-39B-b160k.safetensors",
            "clip_vision.safetensors",
            "sha256_036e6e2bd49697511f4f8b8cb5ee465f93025f7a69a145eadeb9a881ace9b18d.safetensors",
            "sha256_3d3ec1e66737f77a4f3bc2df3c52eacefc69ce7825e2784183b1d4e9877d9193.bin",
          ],
        ],
      },
    },
    output: ["CLIP_VISION"],
    output_is_list: [false],
    output_name: ["CLIP_VISION"],
    name: "CLIPVisionLoader",
    display_name: "Load CLIP Vision",
    description: "",
    category: "loaders",
    output_node: false,
  },
  VAEDecodeTiled: {
    input: {
      required: {
        samples: ["LATENT"],
        vae: ["VAE"],
        tile_size: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 4096,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "VAEDecodeTiled",
    display_name: "VAE Decode (Tiled)",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  VAEEncodeTiled: {
    input: {
      required: {
        pixels: ["IMAGE"],
        vae: ["VAE"],
        tile_size: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 4096,
            step: 64,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "VAEEncodeTiled",
    display_name: "VAE Encode (Tiled)",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  unCLIPCheckpointLoader: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "CLIP_VISION"],
    output_is_list: [false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "CLIP_VISION"],
    name: "unCLIPCheckpointLoader",
    display_name: "unCLIPCheckpointLoader",
    description: "",
    category: "loaders",
    output_node: false,
  },
  GLIGENLoader: {
    input: {
      required: {
        gligen_name: [["gligen.safetensors"]],
      },
    },
    output: ["GLIGEN"],
    output_is_list: [false],
    output_name: ["GLIGEN"],
    name: "GLIGENLoader",
    display_name: "GLIGENLoader",
    description: "",
    category: "loaders",
    output_node: false,
  },
  GLIGENTextBoxApply: {
    input: {
      required: {
        conditioning_to: ["CONDITIONING"],
        clip: ["CLIP"],
        gligen_textbox_model: ["GLIGEN"],
        text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
        width: [
          "INT",
          {
            default: 64,
            min: 8,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 64,
            min: 8,
            max: 16384,
            step: 8,
          },
        ],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "GLIGENTextBoxApply",
    display_name: "GLIGENTextBoxApply",
    description: "",
    category: "conditioning/gligen",
    output_node: false,
  },
  InpaintModelConditioning: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        vae: ["VAE"],
        pixels: ["IMAGE"],
        mask: ["MASK"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "InpaintModelConditioning",
    display_name: "InpaintModelConditioning",
    description: "",
    category: "conditioning/inpaint",
    output_node: false,
  },
  CheckpointLoader: {
    input: {
      required: {
        config_name: [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml",
          ],
        ],
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "VAE"],
    name: "CheckpointLoader",
    display_name: "Load Checkpoint With Config (DEPRECATED)",
    description: "",
    category: "advanced/loaders",
    output_node: false,
  },
  DiffusersLoader: {
    input: {
      required: {
        model_path: [[]],
      },
    },
    output: ["MODEL", "CLIP", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "VAE"],
    name: "DiffusersLoader",
    display_name: "DiffusersLoader",
    description: "",
    category: "advanced/loaders/deprecated",
    output_node: false,
  },
  LoadLatent: {
    input: {
      required: {
        latent: [[]],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LoadLatent",
    display_name: "LoadLatent",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  SaveLatent: {
    input: {
      required: {
        samples: ["LATENT"],
        filename_prefix: [
          "STRING",
          {
            default: "latents/ComfyUI",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "SaveLatent",
    display_name: "SaveLatent",
    description: "",
    category: "_for_testing",
    output_node: true,
  },
  ConditioningZeroOut: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningZeroOut",
    display_name: "ConditioningZeroOut",
    description: "",
    category: "advanced/conditioning",
    output_node: false,
  },
  ConditioningSetTimestepRange: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        start: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningSetTimestepRange",
    display_name: "ConditioningSetTimestepRange",
    description: "",
    category: "advanced/conditioning",
    output_node: false,
  },
  LoraLoaderModelOnly: {
    input: {
      required: {
        model: ["MODEL"],
        lora_name: [
          [
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "LoraLoaderModelOnly",
    display_name: "LoraLoaderModelOnly",
    description: "",
    category: "loaders",
    output_node: false,
  },
  LatentAdd: {
    input: {
      required: {
        samples1: ["LATENT"],
        samples2: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentAdd",
    display_name: "LatentAdd",
    description: "",
    category: "latent/advanced",
    output_node: false,
  },
  LatentSubtract: {
    input: {
      required: {
        samples1: ["LATENT"],
        samples2: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentSubtract",
    display_name: "LatentSubtract",
    description: "",
    category: "latent/advanced",
    output_node: false,
  },
  LatentMultiply: {
    input: {
      required: {
        samples: ["LATENT"],
        multiplier: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentMultiply",
    display_name: "LatentMultiply",
    description: "",
    category: "latent/advanced",
    output_node: false,
  },
  LatentInterpolate: {
    input: {
      required: {
        samples1: ["LATENT"],
        samples2: ["LATENT"],
        ratio: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentInterpolate",
    display_name: "LatentInterpolate",
    description: "",
    category: "latent/advanced",
    output_node: false,
  },
  LatentBatch: {
    input: {
      required: {
        samples1: ["LATENT"],
        samples2: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentBatch",
    display_name: "LatentBatch",
    description: "",
    category: "latent/batch",
    output_node: false,
  },
  LatentBatchSeedBehavior: {
    input: {
      required: {
        samples: ["LATENT"],
        seed_behavior: [
          ["random", "fixed"],
          {
            default: "fixed",
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentBatchSeedBehavior",
    display_name: "LatentBatchSeedBehavior",
    description: "",
    category: "latent/advanced",
    output_node: false,
  },
  HypernetworkLoader: {
    input: {
      required: {
        model: ["MODEL"],
        hypernetwork_name: [["hypernetworks.safetensors"]],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "HypernetworkLoader",
    display_name: "HypernetworkLoader",
    description: "",
    category: "loaders",
    output_node: false,
  },
  UpscaleModelLoader: {
    input: {
      required: {
        model_name: [
          [
            "sha256_e1a73bd89c2da1ae494774746398689048b5a892bd9653e146713f9df8bca86a.pth",
            "upscale_models.safetensors",
          ],
        ],
      },
    },
    output: ["UPSCALE_MODEL"],
    output_is_list: [false],
    output_name: ["UPSCALE_MODEL"],
    name: "UpscaleModelLoader",
    display_name: "Load Upscale Model",
    description: "",
    category: "loaders",
    output_node: false,
  },
  ImageUpscaleWithModel: {
    input: {
      required: {
        upscale_model: ["UPSCALE_MODEL"],
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageUpscaleWithModel",
    display_name: "Upscale Image (using Model)",
    description: "",
    category: "image/upscaling",
    output_node: false,
  },
  ImageBlend: {
    input: {
      required: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
        blend_factor: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        blend_mode: [
          [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "difference",
          ],
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageBlend",
    display_name: "ImageBlend",
    description: "",
    category: "image/postprocessing",
    output_node: false,
  },
  ImageBlur: {
    input: {
      required: {
        image: ["IMAGE"],
        blur_radius: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 31,
            step: 1,
          },
        ],
        sigma: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 10,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageBlur",
    display_name: "ImageBlur",
    description: "",
    category: "image/postprocessing",
    output_node: false,
  },
  ImageQuantize: {
    input: {
      required: {
        image: ["IMAGE"],
        colors: [
          "INT",
          {
            default: 256,
            min: 1,
            max: 256,
            step: 1,
          },
        ],
        dither: [
          [
            "none",
            "floyd-steinberg",
            "bayer-2",
            "bayer-4",
            "bayer-8",
            "bayer-16",
          ],
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageQuantize",
    display_name: "ImageQuantize",
    description: "",
    category: "image/postprocessing",
    output_node: false,
  },
  ImageSharpen: {
    input: {
      required: {
        image: ["IMAGE"],
        sharpen_radius: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 31,
            step: 1,
          },
        ],
        sigma: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 10,
            step: 0.01,
          },
        ],
        alpha: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 5,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageSharpen",
    display_name: "ImageSharpen",
    description: "",
    category: "image/postprocessing",
    output_node: false,
  },
  ImageScaleToTotalPixels: {
    input: {
      required: {
        image: ["IMAGE"],
        upscale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "lanczos"],
        ],
        megapixels: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 16,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageScaleToTotalPixels",
    display_name: "ImageScaleToTotalPixels",
    description: "",
    category: "image/upscaling",
    output_node: false,
  },
  LatentCompositeMasked: {
    input: {
      required: {
        destination: ["LATENT"],
        source: ["LATENT"],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        resize_source: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentCompositeMasked",
    display_name: "LatentCompositeMasked",
    description: "",
    category: "latent",
    output_node: false,
  },
  ImageCompositeMasked: {
    input: {
      required: {
        destination: ["IMAGE"],
        source: ["IMAGE"],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        resize_source: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageCompositeMasked",
    display_name: "ImageCompositeMasked",
    description: "",
    category: "image",
    output_node: false,
  },
  MaskToImage: {
    input: {
      required: {
        mask: ["MASK"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "MaskToImage",
    display_name: "Convert Mask to Image",
    description: "",
    category: "mask",
    output_node: false,
  },
  ImageToMask: {
    input: {
      required: {
        image: ["IMAGE"],
        channel: [["red", "green", "blue", "alpha"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ImageToMask",
    display_name: "Convert Image to Mask",
    description: "",
    category: "mask",
    output_node: false,
  },
  ImageColorToMask: {
    input: {
      required: {
        image: ["IMAGE"],
        color: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16777215,
            step: 1,
            display: "color",
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ImageColorToMask",
    display_name: "ImageColorToMask",
    description: "",
    category: "mask",
    output_node: false,
  },
  SolidMask: {
    input: {
      required: {
        value: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "SolidMask",
    display_name: "SolidMask",
    description: "",
    category: "mask",
    output_node: false,
  },
  InvertMask: {
    input: {
      required: {
        mask: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "InvertMask",
    display_name: "InvertMask",
    description: "",
    category: "mask",
    output_node: false,
  },
  CropMask: {
    input: {
      required: {
        mask: ["MASK"],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "CropMask",
    display_name: "CropMask",
    description: "",
    category: "mask",
    output_node: false,
  },
  MaskComposite: {
    input: {
      required: {
        destination: ["MASK"],
        source: ["MASK"],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        operation: [["multiply", "add", "subtract", "and", "or", "xor"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskComposite",
    display_name: "MaskComposite",
    description: "",
    category: "mask",
    output_node: false,
  },
  FeatherMask: {
    input: {
      required: {
        mask: ["MASK"],
        left: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        top: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        right: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        bottom: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "FeatherMask",
    display_name: "FeatherMask",
    description: "",
    category: "mask",
    output_node: false,
  },
  GrowMask: {
    input: {
      required: {
        mask: ["MASK"],
        expand: [
          "INT",
          {
            default: 0,
            min: -16384,
            max: 16384,
            step: 1,
          },
        ],
        tapered_corners: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "GrowMask",
    display_name: "GrowMask",
    description: "",
    category: "mask",
    output_node: false,
  },
  ThresholdMask: {
    input: {
      required: {
        mask: ["MASK"],
        value: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ThresholdMask",
    display_name: "ThresholdMask",
    description: "",
    category: "mask",
    output_node: false,
  },
  PorterDuffImageComposite: {
    input: {
      required: {
        source: ["IMAGE"],
        source_alpha: ["MASK"],
        destination: ["IMAGE"],
        destination_alpha: ["MASK"],
        mode: [
          [
            "ADD",
            "CLEAR",
            "DARKEN",
            "DST",
            "DST_ATOP",
            "DST_IN",
            "DST_OUT",
            "DST_OVER",
            "LIGHTEN",
            "MULTIPLY",
            "OVERLAY",
            "SCREEN",
            "SRC",
            "SRC_ATOP",
            "SRC_IN",
            "SRC_OUT",
            "SRC_OVER",
            "XOR",
          ],
          {
            default: "DST",
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "PorterDuffImageComposite",
    display_name: "Porter-Duff Image Composite",
    description: "",
    category: "mask/compositing",
    output_node: false,
  },
  SplitImageWithAlpha: {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "SplitImageWithAlpha",
    display_name: "Split Image with Alpha",
    description: "",
    category: "mask/compositing",
    output_node: false,
  },
  JoinImageWithAlpha: {
    input: {
      required: {
        image: ["IMAGE"],
        alpha: ["MASK"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "JoinImageWithAlpha",
    display_name: "Join Image with Alpha",
    description: "",
    category: "mask/compositing",
    output_node: false,
  },
  RebatchLatents: {
    input: {
      required: {
        latents: ["LATENT"],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [true],
    output_name: ["LATENT"],
    name: "RebatchLatents",
    display_name: "Rebatch Latents",
    description: "",
    category: "latent/batch",
    output_node: false,
  },
  RebatchImages: {
    input: {
      required: {
        images: ["IMAGE"],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [true],
    output_name: ["IMAGE"],
    name: "RebatchImages",
    display_name: "Rebatch Images",
    description: "",
    category: "image/batch",
    output_node: false,
  },
  ModelMergeSimple: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        ratio: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelMergeSimple",
    display_name: "ModelMergeSimple",
    description: "",
    category: "advanced/model_merging",
    output_node: false,
  },
  ModelMergeBlocks: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        input: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        middle: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        out: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelMergeBlocks",
    display_name: "ModelMergeBlocks",
    description: "",
    category: "advanced/model_merging",
    output_node: false,
  },
  ModelMergeSubtract: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        multiplier: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelMergeSubtract",
    display_name: "ModelMergeSubtract",
    description: "",
    category: "advanced/model_merging",
    output_node: false,
  },
  ModelMergeAdd: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelMergeAdd",
    display_name: "ModelMergeAdd",
    description: "",
    category: "advanced/model_merging",
    output_node: false,
  },
  CheckpointSave: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        filename_prefix: [
          "STRING",
          {
            default: "checkpoints/ComfyUI",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "CheckpointSave",
    display_name: "CheckpointSave",
    description: "",
    category: "advanced/model_merging",
    output_node: true,
  },
  CLIPMergeSimple: {
    input: {
      required: {
        clip1: ["CLIP"],
        clip2: ["CLIP"],
        ratio: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "CLIPMergeSimple",
    display_name: "CLIPMergeSimple",
    description: "",
    category: "advanced/model_merging",
    output_node: false,
  },
  CLIPMergeSubtract: {
    input: {
      required: {
        clip1: ["CLIP"],
        clip2: ["CLIP"],
        multiplier: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "CLIPMergeSubtract",
    display_name: "CLIPMergeSubtract",
    description: "",
    category: "advanced/model_merging",
    output_node: false,
  },
  CLIPMergeAdd: {
    input: {
      required: {
        clip1: ["CLIP"],
        clip2: ["CLIP"],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "CLIPMergeAdd",
    display_name: "CLIPMergeAdd",
    description: "",
    category: "advanced/model_merging",
    output_node: false,
  },
  CLIPSave: {
    input: {
      required: {
        clip: ["CLIP"],
        filename_prefix: [
          "STRING",
          {
            default: "clip/ComfyUI",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "CLIPSave",
    display_name: "CLIPSave",
    description: "",
    category: "advanced/model_merging",
    output_node: true,
  },
  VAESave: {
    input: {
      required: {
        vae: ["VAE"],
        filename_prefix: [
          "STRING",
          {
            default: "vae/ComfyUI_vae",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "VAESave",
    display_name: "VAESave",
    description: "",
    category: "advanced/model_merging",
    output_node: true,
  },
  TomePatchModel: {
    input: {
      required: {
        model: ["MODEL"],
        ratio: [
          "FLOAT",
          {
            default: 0.3,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "TomePatchModel",
    display_name: "TomePatchModel",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  CLIPTextEncodeSDXLRefiner: {
    input: {
      required: {
        ascore: [
          "FLOAT",
          {
            default: 6,
            min: 0,
            max: 1000,
            step: 0.01,
          },
        ],
        width: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
        clip: ["CLIP"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "CLIPTextEncodeSDXLRefiner",
    display_name: "CLIPTextEncodeSDXLRefiner",
    description: "",
    category: "advanced/conditioning",
    output_node: false,
  },
  CLIPTextEncodeSDXL: {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        crop_w: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
          },
        ],
        crop_h: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
          },
        ],
        target_width: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        target_height: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        text_g: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
        clip: ["CLIP"],
        text_l: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "CLIPTextEncodeSDXL",
    display_name: "CLIPTextEncodeSDXL",
    description: "",
    category: "advanced/conditioning",
    output_node: false,
  },
  Canny: {
    input: {
      required: {
        image: ["IMAGE"],
        low_threshold: [
          "FLOAT",
          {
            default: 0.4,
            min: 0.01,
            max: 0.99,
            step: 0.01,
          },
        ],
        high_threshold: [
          "FLOAT",
          {
            default: 0.8,
            min: 0.01,
            max: 0.99,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Canny",
    display_name: "Canny",
    description: "",
    category: "image/preprocessors",
    output_node: false,
  },
  FreeU: {
    input: {
      required: {
        model: ["MODEL"],
        b1: [
          "FLOAT",
          {
            default: 1.1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        b2: [
          "FLOAT",
          {
            default: 1.2,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        s1: [
          "FLOAT",
          {
            default: 0.9,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        s2: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "FreeU",
    display_name: "FreeU",
    description: "",
    category: "model_patches",
    output_node: false,
  },
  FreeU_V2: {
    input: {
      required: {
        model: ["MODEL"],
        b1: [
          "FLOAT",
          {
            default: 1.3,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        b2: [
          "FLOAT",
          {
            default: 1.4,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        s1: [
          "FLOAT",
          {
            default: 0.9,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        s2: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "FreeU_V2",
    display_name: "FreeU_V2",
    description: "",
    category: "model_patches",
    output_node: false,
  },
  SamplerCustom: {
    input: {
      required: {
        model: ["MODEL"],
        add_noise: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        noise_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        sampler: ["SAMPLER"],
        sigmas: ["SIGMAS"],
        latent_image: ["LATENT"],
      },
    },
    output: ["LATENT", "LATENT"],
    output_is_list: [false, false],
    output_name: ["output", "denoised_output"],
    name: "SamplerCustom",
    display_name: "SamplerCustom",
    description: "",
    category: "sampling/custom_sampling",
    output_node: false,
  },
  BasicScheduler: {
    input: {
      required: {
        model: ["MODEL"],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "BasicScheduler",
    display_name: "BasicScheduler",
    description: "",
    category: "sampling/custom_sampling/schedulers",
    output_node: false,
  },
  KarrasScheduler: {
    input: {
      required: {
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        sigma_max: [
          "FLOAT",
          {
            default: 14.614642,
            min: 0,
            max: 5000,
            step: 0.01,
            round: false,
          },
        ],
        sigma_min: [
          "FLOAT",
          {
            default: 0.0291675,
            min: 0,
            max: 5000,
            step: 0.01,
            round: false,
          },
        ],
        rho: [
          "FLOAT",
          {
            default: 7,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "KarrasScheduler",
    display_name: "KarrasScheduler",
    description: "",
    category: "sampling/custom_sampling/schedulers",
    output_node: false,
  },
  ExponentialScheduler: {
    input: {
      required: {
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        sigma_max: [
          "FLOAT",
          {
            default: 14.614642,
            min: 0,
            max: 5000,
            step: 0.01,
            round: false,
          },
        ],
        sigma_min: [
          "FLOAT",
          {
            default: 0.0291675,
            min: 0,
            max: 5000,
            step: 0.01,
            round: false,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "ExponentialScheduler",
    display_name: "ExponentialScheduler",
    description: "",
    category: "sampling/custom_sampling/schedulers",
    output_node: false,
  },
  PolyexponentialScheduler: {
    input: {
      required: {
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        sigma_max: [
          "FLOAT",
          {
            default: 14.614642,
            min: 0,
            max: 5000,
            step: 0.01,
            round: false,
          },
        ],
        sigma_min: [
          "FLOAT",
          {
            default: 0.0291675,
            min: 0,
            max: 5000,
            step: 0.01,
            round: false,
          },
        ],
        rho: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "PolyexponentialScheduler",
    display_name: "PolyexponentialScheduler",
    description: "",
    category: "sampling/custom_sampling/schedulers",
    output_node: false,
  },
  VPScheduler: {
    input: {
      required: {
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        beta_d: [
          "FLOAT",
          {
            default: 19.9,
            min: 0,
            max: 5000,
            step: 0.01,
            round: false,
          },
        ],
        beta_min: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 5000,
            step: 0.01,
            round: false,
          },
        ],
        eps_s: [
          "FLOAT",
          {
            default: 0.001,
            min: 0,
            max: 1,
            step: 0.0001,
            round: false,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "VPScheduler",
    display_name: "VPScheduler",
    description: "",
    category: "sampling/custom_sampling/schedulers",
    output_node: false,
  },
  SDTurboScheduler: {
    input: {
      required: {
        model: ["MODEL"],
        steps: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
          },
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "SDTurboScheduler",
    display_name: "SDTurboScheduler",
    description: "",
    category: "sampling/custom_sampling/schedulers",
    output_node: false,
  },
  KSamplerSelect: {
    input: {
      required: {
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "KSamplerSelect",
    display_name: "KSamplerSelect",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SamplerEulerAncestral: {
    input: {
      required: {
        eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        s_noise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerEulerAncestral",
    display_name: "SamplerEulerAncestral",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SamplerEulerAncestralCFGPP: {
    input: {
      required: {
        eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
            round: false,
          },
        ],
        s_noise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
            round: false,
          },
        ],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerEulerAncestralCFGPP",
    display_name: "SamplerEulerAncestralCFG++",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SamplerLMS: {
    input: {
      required: {
        order: [
          "INT",
          {
            default: 4,
            min: 1,
            max: 100,
          },
        ],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerLMS",
    display_name: "SamplerLMS",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SamplerDPMPP_3M_SDE: {
    input: {
      required: {
        eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        s_noise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        noise_device: [["gpu", "cpu"]],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerDPMPP_3M_SDE",
    display_name: "SamplerDPMPP_3M_SDE",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SamplerDPMPP_2M_SDE: {
    input: {
      required: {
        solver_type: [["midpoint", "heun"]],
        eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        s_noise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        noise_device: [["gpu", "cpu"]],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerDPMPP_2M_SDE",
    display_name: "SamplerDPMPP_2M_SDE",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SamplerDPMPP_SDE: {
    input: {
      required: {
        eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        s_noise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        r: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        noise_device: [["gpu", "cpu"]],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerDPMPP_SDE",
    display_name: "SamplerDPMPP_SDE",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SamplerDPMAdaptative: {
    input: {
      required: {
        order: [
          "INT",
          {
            default: 3,
            min: 2,
            max: 3,
          },
        ],
        rtol: [
          "FLOAT",
          {
            default: 0.05,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        atol: [
          "FLOAT",
          {
            default: 0.0078,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        h_init: [
          "FLOAT",
          {
            default: 0.05,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        pcoeff: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        icoeff: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        dcoeff: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        accept_safety: [
          "FLOAT",
          {
            default: 0.81,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        eta: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
        s_noise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
            round: false,
          },
        ],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerDPMAdaptative",
    display_name: "SamplerDPMAdaptative",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SplitSigmas: {
    input: {
      required: {
        sigmas: ["SIGMAS"],
        step: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10000,
          },
        ],
      },
    },
    output: ["SIGMAS", "SIGMAS"],
    output_is_list: [false, false],
    output_name: ["high_sigmas", "low_sigmas"],
    name: "SplitSigmas",
    display_name: "SplitSigmas",
    description: "",
    category: "sampling/custom_sampling/sigmas",
    output_node: false,
  },
  SplitSigmasDenoise: {
    input: {
      required: {
        sigmas: ["SIGMAS"],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["SIGMAS", "SIGMAS"],
    output_is_list: [false, false],
    output_name: ["high_sigmas", "low_sigmas"],
    name: "SplitSigmasDenoise",
    display_name: "SplitSigmasDenoise",
    description: "",
    category: "sampling/custom_sampling/sigmas",
    output_node: false,
  },
  FlipSigmas: {
    input: {
      required: {
        sigmas: ["SIGMAS"],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "FlipSigmas",
    display_name: "FlipSigmas",
    description: "",
    category: "sampling/custom_sampling/sigmas",
    output_node: false,
  },
  CFGGuider: {
    input: {
      required: {
        model: ["MODEL"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
      },
    },
    output: ["GUIDER"],
    output_is_list: [false],
    output_name: ["GUIDER"],
    name: "CFGGuider",
    display_name: "CFGGuider",
    description: "",
    category: "sampling/custom_sampling/guiders",
    output_node: false,
  },
  DualCFGGuider: {
    input: {
      required: {
        model: ["MODEL"],
        cond1: ["CONDITIONING"],
        cond2: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        cfg_conds: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        cfg_cond2_negative: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
      },
    },
    output: ["GUIDER"],
    output_is_list: [false],
    output_name: ["GUIDER"],
    name: "DualCFGGuider",
    display_name: "DualCFGGuider",
    description: "",
    category: "sampling/custom_sampling/guiders",
    output_node: false,
  },
  BasicGuider: {
    input: {
      required: {
        model: ["MODEL"],
        conditioning: ["CONDITIONING"],
      },
    },
    output: ["GUIDER"],
    output_is_list: [false],
    output_name: ["GUIDER"],
    name: "BasicGuider",
    display_name: "BasicGuider",
    description: "",
    category: "sampling/custom_sampling/guiders",
    output_node: false,
  },
  RandomNoise: {
    input: {
      required: {
        noise_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["NOISE"],
    output_is_list: [false],
    output_name: ["NOISE"],
    name: "RandomNoise",
    display_name: "RandomNoise",
    description: "",
    category: "sampling/custom_sampling/noise",
    output_node: false,
  },
  DisableNoise: {
    input: {
      required: {},
    },
    output: ["NOISE"],
    output_is_list: [false],
    output_name: ["NOISE"],
    name: "DisableNoise",
    display_name: "DisableNoise",
    description: "",
    category: "sampling/custom_sampling/noise",
    output_node: false,
  },
  AddNoise: {
    input: {
      required: {
        model: ["MODEL"],
        noise: ["NOISE"],
        sigmas: ["SIGMAS"],
        latent_image: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "AddNoise",
    display_name: "AddNoise",
    description: "",
    category: "_for_testing/custom_sampling/noise",
    output_node: false,
  },
  SamplerCustomAdvanced: {
    input: {
      required: {
        noise: ["NOISE"],
        guider: ["GUIDER"],
        sampler: ["SAMPLER"],
        sigmas: ["SIGMAS"],
        latent_image: ["LATENT"],
      },
    },
    output: ["LATENT", "LATENT"],
    output_is_list: [false, false],
    output_name: ["output", "denoised_output"],
    name: "SamplerCustomAdvanced",
    display_name: "SamplerCustomAdvanced",
    description: "",
    category: "sampling/custom_sampling",
    output_node: false,
  },
  HyperTile: {
    input: {
      required: {
        model: ["MODEL"],
        tile_size: [
          "INT",
          {
            default: 256,
            min: 1,
            max: 2048,
          },
        ],
        swap_size: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 128,
          },
        ],
        max_depth: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10,
          },
        ],
        scale_depth: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "HyperTile",
    display_name: "HyperTile",
    description: "",
    category: "model_patches",
    output_node: false,
  },
  ModelSamplingDiscrete: {
    input: {
      required: {
        model: ["MODEL"],
        sampling: [["eps", "v_prediction", "lcm", "x0"]],
        zsnr: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelSamplingDiscrete",
    display_name: "ModelSamplingDiscrete",
    description: "",
    category: "advanced/model",
    output_node: false,
  },
  ModelSamplingContinuousEDM: {
    input: {
      required: {
        model: ["MODEL"],
        sampling: [["v_prediction", "edm_playground_v2.5", "eps"]],
        sigma_max: [
          "FLOAT",
          {
            default: 120,
            min: 0,
            max: 1000,
            step: 0.001,
            round: false,
          },
        ],
        sigma_min: [
          "FLOAT",
          {
            default: 0.002,
            min: 0,
            max: 1000,
            step: 0.001,
            round: false,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelSamplingContinuousEDM",
    display_name: "ModelSamplingContinuousEDM",
    description: "",
    category: "advanced/model",
    output_node: false,
  },
  ModelSamplingContinuousV: {
    input: {
      required: {
        model: ["MODEL"],
        sampling: [["v_prediction"]],
        sigma_max: [
          "FLOAT",
          {
            default: 500,
            min: 0,
            max: 1000,
            step: 0.001,
            round: false,
          },
        ],
        sigma_min: [
          "FLOAT",
          {
            default: 0.03,
            min: 0,
            max: 1000,
            step: 0.001,
            round: false,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelSamplingContinuousV",
    display_name: "ModelSamplingContinuousV",
    description: "",
    category: "advanced/model",
    output_node: false,
  },
  ModelSamplingStableCascade: {
    input: {
      required: {
        model: ["MODEL"],
        shift: [
          "FLOAT",
          {
            default: 2,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelSamplingStableCascade",
    display_name: "ModelSamplingStableCascade",
    description: "",
    category: "advanced/model",
    output_node: false,
  },
  ModelSamplingSD3: {
    input: {
      required: {
        model: ["MODEL"],
        shift: [
          "FLOAT",
          {
            default: 3,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelSamplingSD3",
    display_name: "ModelSamplingSD3",
    description: "",
    category: "advanced/model",
    output_node: false,
  },
  RescaleCFG: {
    input: {
      required: {
        model: ["MODEL"],
        multiplier: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "RescaleCFG",
    display_name: "RescaleCFG",
    description: "",
    category: "advanced/model",
    output_node: false,
  },
  PatchModelAddDownscale: {
    input: {
      required: {
        model: ["MODEL"],
        block_number: [
          "INT",
          {
            default: 3,
            min: 1,
            max: 32,
            step: 1,
          },
        ],
        downscale_factor: [
          "FLOAT",
          {
            default: 2,
            min: 0.1,
            max: 9,
            step: 0.001,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 0.35,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        downscale_after_skip: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        downscale_method: [
          ["bicubic", "nearest-exact", "bilinear", "area", "bislerp"],
        ],
        upscale_method: [
          ["bicubic", "nearest-exact", "bilinear", "area", "bislerp"],
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "PatchModelAddDownscale",
    display_name: "PatchModelAddDownscale (Kohya Deep Shrink)",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  ImageCrop: {
    input: {
      required: {
        image: ["IMAGE"],
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageCrop",
    display_name: "ImageCrop",
    description: "",
    category: "image/transform",
    output_node: false,
  },
  RepeatImageBatch: {
    input: {
      required: {
        image: ["IMAGE"],
        amount: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "RepeatImageBatch",
    display_name: "RepeatImageBatch",
    description: "",
    category: "image/batch",
    output_node: false,
  },
  ImageFromBatch: {
    input: {
      required: {
        image: ["IMAGE"],
        batch_index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4095,
          },
        ],
        length: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageFromBatch",
    display_name: "ImageFromBatch",
    description: "",
    category: "image/batch",
    output_node: false,
  },
  SaveAnimatedWEBP: {
    input: {
      required: {
        images: ["IMAGE"],
        filename_prefix: [
          "STRING",
          {
            default: "ComfyUI",
          },
        ],
        fps: [
          "FLOAT",
          {
            default: 6,
            min: 0.01,
            max: 1000,
            step: 0.01,
          },
        ],
        lossless: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        quality: [
          "INT",
          {
            default: 80,
            min: 0,
            max: 100,
          },
        ],
        method: [["default", "fastest", "slowest"]],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "SaveAnimatedWEBP",
    display_name: "SaveAnimatedWEBP",
    description: "",
    category: "image/animation",
    output_node: true,
  },
  SaveAnimatedPNG: {
    input: {
      required: {
        images: ["IMAGE"],
        filename_prefix: [
          "STRING",
          {
            default: "ComfyUI",
          },
        ],
        fps: [
          "FLOAT",
          {
            default: 6,
            min: 0.01,
            max: 1000,
            step: 0.01,
          },
        ],
        compress_level: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 9,
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "SaveAnimatedPNG",
    display_name: "SaveAnimatedPNG",
    description: "",
    category: "image/animation",
    output_node: true,
  },
  ImageOnlyCheckpointLoader: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL", "CLIP_VISION", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP_VISION", "VAE"],
    name: "ImageOnlyCheckpointLoader",
    display_name: "Image Only Checkpoint Loader (img2vid model)",
    description: "",
    category: "loaders/video_models",
    output_node: false,
  },
  SVD_img2vid_Conditioning: {
    input: {
      required: {
        clip_vision: ["CLIP_VISION"],
        init_image: ["IMAGE"],
        vae: ["VAE"],
        width: [
          "INT",
          {
            default: 1024,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 576,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        video_frames: [
          "INT",
          {
            default: 14,
            min: 1,
            max: 4096,
          },
        ],
        motion_bucket_id: [
          "INT",
          {
            default: 127,
            min: 1,
            max: 1023,
          },
        ],
        fps: [
          "INT",
          {
            default: 6,
            min: 1,
            max: 1024,
          },
        ],
        augmentation_level: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "SVD_img2vid_Conditioning",
    display_name: "SVD_img2vid_Conditioning",
    description: "",
    category: "conditioning/video_models",
    output_node: false,
  },
  VideoLinearCFGGuidance: {
    input: {
      required: {
        model: ["MODEL"],
        min_cfg: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.5,
            round: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "VideoLinearCFGGuidance",
    display_name: "VideoLinearCFGGuidance",
    description: "",
    category: "sampling/video_models",
    output_node: false,
  },
  VideoTriangleCFGGuidance: {
    input: {
      required: {
        model: ["MODEL"],
        min_cfg: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.5,
            round: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "VideoTriangleCFGGuidance",
    display_name: "VideoTriangleCFGGuidance",
    description: "",
    category: "sampling/video_models",
    output_node: false,
  },
  ImageOnlyCheckpointSave: {
    input: {
      required: {
        model: ["MODEL"],
        clip_vision: ["CLIP_VISION"],
        vae: ["VAE"],
        filename_prefix: [
          "STRING",
          {
            default: "checkpoints/ComfyUI",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "ImageOnlyCheckpointSave",
    display_name: "ImageOnlyCheckpointSave",
    description: "",
    category: "_for_testing",
    output_node: true,
  },
  SelfAttentionGuidance: {
    input: {
      required: {
        model: ["MODEL"],
        scale: [
          "FLOAT",
          {
            default: 0.5,
            min: -2,
            max: 5,
            step: 0.1,
          },
        ],
        blur_sigma: [
          "FLOAT",
          {
            default: 2,
            min: 0,
            max: 10,
            step: 0.1,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "SelfAttentionGuidance",
    display_name: "Self-Attention Guidance",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  PerpNeg: {
    input: {
      required: {
        model: ["MODEL"],
        empty_conditioning: ["CONDITIONING"],
        neg_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "PerpNeg",
    display_name: "Perp-Neg (DEPRECATED by PerpNegGuider)",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  PerpNegGuider: {
    input: {
      required: {
        model: ["MODEL"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        empty_conditioning: ["CONDITIONING"],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        neg_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["GUIDER"],
    output_is_list: [false],
    output_name: ["GUIDER"],
    name: "PerpNegGuider",
    display_name: "PerpNegGuider",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  StableZero123_Conditioning: {
    input: {
      required: {
        clip_vision: ["CLIP_VISION"],
        init_image: ["IMAGE"],
        vae: ["VAE"],
        width: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
        elevation: [
          "FLOAT",
          {
            default: 0,
            min: -180,
            max: 180,
            step: 0.1,
            round: false,
          },
        ],
        azimuth: [
          "FLOAT",
          {
            default: 0,
            min: -180,
            max: 180,
            step: 0.1,
            round: false,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "StableZero123_Conditioning",
    display_name: "StableZero123_Conditioning",
    description: "",
    category: "conditioning/3d_models",
    output_node: false,
  },
  StableZero123_Conditioning_Batched: {
    input: {
      required: {
        clip_vision: ["CLIP_VISION"],
        init_image: ["IMAGE"],
        vae: ["VAE"],
        width: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
        elevation: [
          "FLOAT",
          {
            default: 0,
            min: -180,
            max: 180,
            step: 0.1,
            round: false,
          },
        ],
        azimuth: [
          "FLOAT",
          {
            default: 0,
            min: -180,
            max: 180,
            step: 0.1,
            round: false,
          },
        ],
        elevation_batch_increment: [
          "FLOAT",
          {
            default: 0,
            min: -180,
            max: 180,
            step: 0.1,
            round: false,
          },
        ],
        azimuth_batch_increment: [
          "FLOAT",
          {
            default: 0,
            min: -180,
            max: 180,
            step: 0.1,
            round: false,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "StableZero123_Conditioning_Batched",
    display_name: "StableZero123_Conditioning_Batched",
    description: "",
    category: "conditioning/3d_models",
    output_node: false,
  },
  SV3D_Conditioning: {
    input: {
      required: {
        clip_vision: ["CLIP_VISION"],
        init_image: ["IMAGE"],
        vae: ["VAE"],
        width: [
          "INT",
          {
            default: 576,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 576,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        video_frames: [
          "INT",
          {
            default: 21,
            min: 1,
            max: 4096,
          },
        ],
        elevation: [
          "FLOAT",
          {
            default: 0,
            min: -90,
            max: 90,
            step: 0.1,
            round: false,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "SV3D_Conditioning",
    display_name: "SV3D_Conditioning",
    description: "",
    category: "conditioning/3d_models",
    output_node: false,
  },
  SD_4XUpscale_Conditioning: {
    input: {
      required: {
        images: ["IMAGE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        scale_ratio: [
          "FLOAT",
          {
            default: 4,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        noise_augmentation: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "SD_4XUpscale_Conditioning",
    display_name: "SD_4XUpscale_Conditioning",
    description: "",
    category: "conditioning/upscale_diffusion",
    output_node: false,
  },
  PhotoMakerLoader: {
    input: {
      required: {
        photomaker_model_name: [["photomaker.safetensors"]],
      },
    },
    output: ["PHOTOMAKER"],
    output_is_list: [false],
    output_name: ["PHOTOMAKER"],
    name: "PhotoMakerLoader",
    display_name: "PhotoMakerLoader",
    description: "",
    category: "_for_testing/photomaker",
    output_node: false,
  },
  PhotoMakerEncode: {
    input: {
      required: {
        photomaker: ["PHOTOMAKER"],
        image: ["IMAGE"],
        clip: ["CLIP"],
        text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
            default: "photograph of photomaker",
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "PhotoMakerEncode",
    display_name: "PhotoMakerEncode",
    description: "",
    category: "_for_testing/photomaker",
    output_node: false,
  },
  CLIPTextEncodeControlnet: {
    input: {
      required: {
        clip: ["CLIP"],
        conditioning: ["CONDITIONING"],
        text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "CLIPTextEncodeControlnet",
    display_name: "CLIPTextEncodeControlnet",
    description: "",
    category: "_for_testing/conditioning",
    output_node: false,
  },
  Morphology: {
    input: {
      required: {
        image: ["IMAGE"],
        operation: [
          [
            "erode",
            "dilate",
            "open",
            "close",
            "gradient",
            "bottom_hat",
            "top_hat",
          ],
        ],
        kernel_size: [
          "INT",
          {
            default: 3,
            min: 3,
            max: 999,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Morphology",
    display_name: "ImageMorphology",
    description: "",
    category: "image/postprocessing",
    output_node: false,
  },
  StableCascade_EmptyLatentImage: {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 256,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 256,
            max: 16384,
            step: 8,
          },
        ],
        compression: [
          "INT",
          {
            default: 42,
            min: 4,
            max: 128,
            step: 1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["LATENT", "LATENT"],
    output_is_list: [false, false],
    output_name: ["stage_c", "stage_b"],
    name: "StableCascade_EmptyLatentImage",
    display_name: "StableCascade_EmptyLatentImage",
    description: "",
    category: "latent/stable_cascade",
    output_node: false,
  },
  StableCascade_StageB_Conditioning: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        stage_c: ["LATENT"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "StableCascade_StageB_Conditioning",
    display_name: "StableCascade_StageB_Conditioning",
    description: "",
    category: "conditioning/stable_cascade",
    output_node: false,
  },
  StableCascade_StageC_VAEEncode: {
    input: {
      required: {
        image: ["IMAGE"],
        vae: ["VAE"],
        compression: [
          "INT",
          {
            default: 42,
            min: 4,
            max: 128,
            step: 1,
          },
        ],
      },
    },
    output: ["LATENT", "LATENT"],
    output_is_list: [false, false],
    output_name: ["stage_c", "stage_b"],
    name: "StableCascade_StageC_VAEEncode",
    display_name: "StableCascade_StageC_VAEEncode",
    description: "",
    category: "latent/stable_cascade",
    output_node: false,
  },
  StableCascade_SuperResolutionControlnet: {
    input: {
      required: {
        image: ["IMAGE"],
        vae: ["VAE"],
      },
    },
    output: ["IMAGE", "LATENT", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["controlnet_input", "stage_c", "stage_b"],
    name: "StableCascade_SuperResolutionControlnet",
    display_name: "StableCascade_SuperResolutionControlnet",
    description: "",
    category: "_for_testing/stable_cascade",
    output_node: false,
  },
  DifferentialDiffusion: {
    input: {
      required: {
        model: ["MODEL"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "DifferentialDiffusion",
    display_name: "Differential Diffusion",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  InstructPixToPixConditioning: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        vae: ["VAE"],
        pixels: ["IMAGE"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "InstructPixToPixConditioning",
    display_name: "InstructPixToPixConditioning",
    description: "",
    category: "conditioning/instructpix2pix",
    output_node: false,
  },
  ModelMergeSD1: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        "time_embed.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "label_emb.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "out.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelMergeSD1",
    display_name: "ModelMergeSD1",
    description: "",
    category: "advanced/model_merging/model_specific",
    output_node: false,
  },
  ModelMergeSD2: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        "time_embed.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "label_emb.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "out.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelMergeSD2",
    display_name: "ModelMergeSD2",
    description: "",
    category: "advanced/model_merging/model_specific",
    output_node: false,
  },
  ModelMergeSDXL: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        "time_embed.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "label_emb.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.0": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.1": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.2": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.3": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.4": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.5": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.6": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.7": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "input_blocks.8": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.0": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.1": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "middle_block.2": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.0": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.1": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.2": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.3": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.4": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.5": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.6": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.7": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "output_blocks.8": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "out.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelMergeSDXL",
    display_name: "ModelMergeSDXL",
    description: "",
    category: "advanced/model_merging/model_specific",
    output_node: false,
  },
  ModelMergeSD3_2B: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        "pos_embed.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "x_embedder.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "context_embedder.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "y_embedder.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "t_embedder.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        "final_layer.": [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelMergeSD3_2B",
    display_name: "ModelMergeSD3_2B",
    description: "",
    category: "advanced/model_merging/model_specific",
    output_node: false,
  },
  PerturbedAttentionGuidance: {
    input: {
      required: {
        model: ["MODEL"],
        scale: [
          "FLOAT",
          {
            default: 3,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "PerturbedAttentionGuidance",
    display_name: "PerturbedAttentionGuidance",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  AlignYourStepsScheduler: {
    input: {
      required: {
        model_type: [["SD1", "SDXL", "SVD"]],
        steps: [
          "INT",
          {
            default: 10,
            min: 10,
            max: 10000,
          },
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "AlignYourStepsScheduler",
    display_name: "AlignYourStepsScheduler",
    description: "",
    category: "sampling/custom_sampling/schedulers",
    output_node: false,
  },
  UNetSelfAttentionMultiply: {
    input: {
      required: {
        model: ["MODEL"],
        q: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        k: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        v: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        out: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "UNetSelfAttentionMultiply",
    display_name: "UNetSelfAttentionMultiply",
    description: "",
    category: "_for_testing/attention_experiments",
    output_node: false,
  },
  UNetCrossAttentionMultiply: {
    input: {
      required: {
        model: ["MODEL"],
        q: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        k: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        v: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        out: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "UNetCrossAttentionMultiply",
    display_name: "UNetCrossAttentionMultiply",
    description: "",
    category: "_for_testing/attention_experiments",
    output_node: false,
  },
  CLIPAttentionMultiply: {
    input: {
      required: {
        clip: ["CLIP"],
        q: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        k: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        v: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        out: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "CLIPAttentionMultiply",
    display_name: "CLIPAttentionMultiply",
    description: "",
    category: "_for_testing/attention_experiments",
    output_node: false,
  },
  UNetTemporalAttentionMultiply: {
    input: {
      required: {
        model: ["MODEL"],
        self_structural: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        self_temporal: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        cross_structural: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        cross_temporal: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "UNetTemporalAttentionMultiply",
    display_name: "UNetTemporalAttentionMultiply",
    description: "",
    category: "_for_testing/attention_experiments",
    output_node: false,
  },
  SamplerLCMUpscale: {
    input: {
      required: {
        scale_ratio: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 20,
            step: 0.01,
          },
        ],
        scale_steps: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 1000,
            step: 1,
          },
        ],
        upscale_method: [
          ["bislerp", "nearest-exact", "bilinear", "area", "bicubic"],
        ],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerLCMUpscale",
    display_name: "SamplerLCMUpscale",
    description: "",
    category: "sampling/custom_sampling/samplers",
    output_node: false,
  },
  SamplerEulerCFGpp: {
    input: {
      required: {
        version: [["regular", "alternative"]],
      },
    },
    output: ["SAMPLER"],
    output_is_list: [false],
    output_name: ["SAMPLER"],
    name: "SamplerEulerCFGpp",
    display_name: "SamplerEulerCFG++",
    description: "",
    category: "_for_testing",
    output_node: false,
  },
  WebcamCapture: {
    input: {
      required: {
        image: ["WEBCAM", {}],
        width: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        capture_on_queue: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "WebcamCapture",
    display_name: "Webcam Capture",
    description: "",
    category: "image",
    output_node: false,
  },
  EmptyLatentAudio: {
    input: {
      required: {
        seconds: [
          "FLOAT",
          {
            default: 47.6,
            min: 1,
            max: 1000,
            step: 0.1,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "EmptyLatentAudio",
    display_name: "EmptyLatentAudio",
    description: "",
    category: "_for_testing/audio",
    output_node: false,
  },
  VAEEncodeAudio: {
    input: {
      required: {
        audio: ["AUDIO"],
        vae: ["VAE"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "VAEEncodeAudio",
    display_name: "VAEEncodeAudio",
    description: "",
    category: "_for_testing/audio",
    output_node: false,
  },
  VAEDecodeAudio: {
    input: {
      required: {
        samples: ["LATENT"],
        vae: ["VAE"],
      },
    },
    output: ["AUDIO"],
    output_is_list: [false],
    output_name: ["AUDIO"],
    name: "VAEDecodeAudio",
    display_name: "VAEDecodeAudio",
    description: "",
    category: "_for_testing/audio",
    output_node: false,
  },
  SaveAudio: {
    input: {
      required: {
        audio: ["AUDIO"],
        filename_prefix: [
          "STRING",
          {
            default: "audio/ComfyUI",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "SaveAudio",
    display_name: "SaveAudio",
    description: "",
    category: "_for_testing/audio",
    output_node: true,
  },
  LoadAudio: {
    input: {
      required: {
        audio: [
          [],
          {
            audio_upload: true,
          },
        ],
      },
    },
    output: ["AUDIO"],
    output_is_list: [false],
    output_name: ["AUDIO"],
    name: "LoadAudio",
    display_name: "LoadAudio",
    description: "",
    category: "_for_testing/audio",
    output_node: false,
  },
  PreviewAudio: {
    input: {
      required: {
        audio: ["AUDIO"],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "PreviewAudio",
    display_name: "PreviewAudio",
    description: "",
    category: "_for_testing/audio",
    output_node: true,
  },
  TripleCLIPLoader: {
    input: {
      required: {
        clip_name1: [["clip.safetensors"]],
        clip_name2: [["clip.safetensors"]],
        clip_name3: [["clip.safetensors"]],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "TripleCLIPLoader",
    display_name: "TripleCLIPLoader",
    description: "",
    category: "advanced/loaders",
    output_node: false,
  },
  EmptySD3LatentImage: {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "EmptySD3LatentImage",
    display_name: "EmptySD3LatentImage",
    description: "",
    category: "latent/sd3",
    output_node: false,
  },
  CLIPTextEncodeSD3: {
    input: {
      required: {
        clip: ["CLIP"],
        clip_l: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
        clip_g: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
        t5xxl: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
          },
        ],
        empty_padding: [["none", "empty_prompt"]],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "CLIPTextEncodeSD3",
    display_name: "CLIPTextEncodeSD3",
    description: "",
    category: "advanced/conditioning",
    output_node: false,
  },
  ControlNetApplySD3: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        control_net: ["CONTROL_NET"],
        vae: ["VAE"],
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["positive", "negative"],
    name: "ControlNetApplySD3",
    display_name: "ControlNetApplySD3",
    description: "",
    category: "_for_testing/sd3",
    output_node: false,
  },
  GITSScheduler: {
    input: {
      required: {
        coeff: [
          "FLOAT",
          {
            default: 1.2,
            min: 0.8,
            max: 1.5,
            step: 0.05,
          },
        ],
        steps: [
          "INT",
          {
            default: 10,
            min: 2,
            max: 1000,
          },
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "GITSScheduler",
    display_name: "GITSScheduler",
    description: "",
    category: "sampling/custom_sampling/schedulers",
    output_node: false,
  },
  SaveImageWebsocket: {
    input: {
      required: {
        images: ["IMAGE"],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "SaveImageWebsocket",
    display_name: "SaveImageWebsocket",
    description: "",
    category: "api/image",
    output_node: true,
  },
  "Context Big (rgthree)": {
    input: {
      required: {},
      optional: {
        base_ctx: ["RGTHREE_CONTEXT"],
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        latent: ["LATENT"],
        images: ["IMAGE"],
        seed: [
          "INT",
          {
            forceInput: true,
          },
        ],
        steps: [
          "INT",
          {
            forceInput: true,
          },
        ],
        step_refiner: [
          "INT",
          {
            forceInput: true,
          },
        ],
        cfg: [
          "FLOAT",
          {
            forceInput: true,
          },
        ],
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
          {
            forceInput: true,
          },
        ],
        sampler: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
          {
            forceInput: true,
          },
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
          {
            forceInput: true,
          },
        ],
        clip_width: [
          "INT",
          {
            forceInput: true,
          },
        ],
        clip_height: [
          "INT",
          {
            forceInput: true,
          },
        ],
        text_pos_g: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_pos_l: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_neg_g: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_neg_l: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        mask: ["MASK"],
        control_net: ["CONTROL_NET"],
      },
      hidden: {},
    },
    output: [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "checkpoints.safetensors",
        "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
        "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
        "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
        "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
        "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
        "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
        "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
        "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
        "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
        "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
        "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
        "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
        "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
        "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
        "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
        "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
        "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2",
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET",
    ],
    name: "Context Big (rgthree)",
    display_name: "Context Big (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Context (rgthree)": {
    input: {
      required: {},
      optional: {
        base_ctx: ["RGTHREE_CONTEXT"],
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        latent: ["LATENT"],
        images: ["IMAGE"],
        seed: [
          "INT",
          {
            forceInput: true,
          },
        ],
      },
      hidden: {
        version: "FLOAT",
      },
    },
    output: [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
    ],
    name: "Context (rgthree)",
    display_name: "Context (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Context Switch (rgthree)": {
    input: {
      required: {},
      optional: {},
    },
    output: [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
    ],
    name: "Context Switch (rgthree)",
    display_name: "Context Switch (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Context Switch Big (rgthree)": {
    input: {
      required: {},
      optional: {},
    },
    output: [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "checkpoints.safetensors",
        "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
        "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
        "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
        "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
        "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
        "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
        "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
        "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
        "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
        "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
        "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
        "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
        "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
        "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
        "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
        "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
        "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2",
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET",
    ],
    name: "Context Switch Big (rgthree)",
    display_name: "Context Switch Big (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Context Merge (rgthree)": {
    input: {
      required: {},
      optional: {},
    },
    output: [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
    ],
    name: "Context Merge (rgthree)",
    display_name: "Context Merge (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Context Merge Big (rgthree)": {
    input: {
      required: {},
      optional: {},
    },
    output: [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "checkpoints.safetensors",
        "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
        "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
        "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
        "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
        "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
        "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
        "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
        "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
        "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
        "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
        "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
        "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
        "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
        "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
        "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
        "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
        "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2",
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET",
    ],
    name: "Context Merge Big (rgthree)",
    display_name: "Context Merge Big (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Display Int (rgthree)": {
    input: {
      required: {
        input: [
          "INT",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "Display Int (rgthree)",
    display_name: "Display Int (rgthree)",
    description: "",
    category: "rgthree",
    output_node: true,
  },
  "Display Any (rgthree)": {
    input: {
      required: {
        source: ["*", {}],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "Display Any (rgthree)",
    display_name: "Display Any (rgthree)",
    description: "",
    category: "rgthree",
    output_node: true,
  },
  "Lora Loader Stack (rgthree)": {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_01: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_01: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        lora_02: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_02: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        lora_03: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_03: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        lora_04: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_04: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP"],
    output_is_list: [false, false],
    output_name: ["MODEL", "CLIP"],
    name: "Lora Loader Stack (rgthree)",
    display_name: "Lora Loader Stack (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Seed (rgthree)": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: -1125899906842624,
            max: 1125899906842624,
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["SEED"],
    name: "Seed (rgthree)",
    display_name: "Seed (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Image Inset Crop (rgthree)": {
    input: {
      required: {
        image: ["IMAGE"],
        measurement: [["Pixels", "Percentage"]],
        left: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        right: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        top: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        bottom: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Inset Crop (rgthree)",
    display_name: "Image Inset Crop (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Power Prompt (rgthree)": {
    input: {
      required: {
        prompt: [
          "STRING",
          {
            multiline: true,
          },
        ],
      },
      optional: {
        opt_model: ["MODEL"],
        opt_clip: ["CLIP"],
        insert_lora: [
          [
            "CHOOSE",
            "DISABLE LORAS",
            "loras",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284",
          ],
        ],
        insert_embedding: [["CHOOSE", "embeddings"]],
        insert_saved: [["CHOOSE"]],
      },
      hidden: {
        values_insert_saved: [["CHOOSE"]],
      },
    },
    output: ["CONDITIONING", "MODEL", "CLIP", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["CONDITIONING", "MODEL", "CLIP", "TEXT"],
    name: "Power Prompt (rgthree)",
    display_name: "Power Prompt (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Power Prompt - Simple (rgthree)": {
    input: {
      required: {
        prompt: [
          "STRING",
          {
            multiline: true,
          },
        ],
      },
      optional: {
        opt_clip: ["CLIP"],
        insert_embedding: [["CHOOSE", "embeddings"]],
        insert_saved: [["CHOOSE"]],
      },
      hidden: {
        values_insert_saved: [["CHOOSE"]],
      },
    },
    output: ["CONDITIONING", "STRING"],
    output_is_list: [false, false],
    output_name: ["CONDITIONING", "TEXT"],
    name: "Power Prompt - Simple (rgthree)",
    display_name: "Power Prompt - Simple (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "KSampler Config (rgthree)": {
    input: {
      required: {
        steps_total: [
          "INT",
          {
            default: 30,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        refiner_step: [
          "INT",
          {
            default: 24,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.5,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
      },
    },
    output: [
      "INT",
      "INT",
      "FLOAT",
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2",
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
      ],
    ],
    output_is_list: [false, false, false, false, false],
    output_name: ["STEPS", "REFINER_STEP", "CFG", "SAMPLER", "SCHEDULER"],
    name: "KSampler Config (rgthree)",
    display_name: "KSampler Config (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "SDXL Empty Latent Image (rgthree)": {
    input: {
      required: {
        dimensions: [
          [
            "1536 x 640   (landscape)",
            "1344 x 768   (landscape)",
            "1216 x 832   (landscape)",
            "1152 x 896   (landscape)",
            "1024 x 1024  (square)",
            " 896 x 1152  (portrait)",
            " 832 x 1216  (portrait)",
            " 768 x 1344  (portrait)",
            " 640 x 1536  (portrait)",
          ],
          {
            default: "1024 x 1024  (square)",
          },
        ],
        clip_scale: [
          "FLOAT",
          {
            default: 2,
            min: 1,
            max: 10,
            step: 0.5,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["LATENT", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["LATENT", "CLIP_WIDTH", "CLIP_HEIGHT"],
    name: "SDXL Empty Latent Image (rgthree)",
    display_name: "SDXL Empty Latent Image (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "SDXL Power Prompt - Positive (rgthree)": {
    input: {
      required: {
        prompt_g: [
          "STRING",
          {
            multiline: true,
          },
        ],
        prompt_l: [
          "STRING",
          {
            multiline: true,
          },
        ],
      },
      optional: {
        opt_model: ["MODEL"],
        opt_clip: ["CLIP"],
        opt_clip_width: [
          "INT",
          {
            forceInput: true,
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        opt_clip_height: [
          "INT",
          {
            forceInput: true,
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        insert_lora: [
          [
            "CHOOSE",
            "DISABLE LORAS",
            "loras",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284",
          ],
        ],
        insert_embedding: [["CHOOSE", "embeddings"]],
        insert_saved: [["CHOOSE"]],
        target_width: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 16384,
          },
        ],
        target_height: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 16384,
          },
        ],
        crop_width: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 16384,
          },
        ],
        crop_height: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 16384,
          },
        ],
      },
      hidden: {
        values_insert_saved: [["CHOOSE"]],
      },
    },
    output: ["CONDITIONING", "MODEL", "CLIP", "STRING", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["CONDITIONING", "MODEL", "CLIP", "TEXT_G", "TEXT_L"],
    name: "SDXL Power Prompt - Positive (rgthree)",
    display_name: "SDXL Power Prompt - Positive (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "SDXL Power Prompt - Simple / Negative (rgthree)": {
    input: {
      required: {
        prompt_g: [
          "STRING",
          {
            multiline: true,
          },
        ],
        prompt_l: [
          "STRING",
          {
            multiline: true,
          },
        ],
      },
      optional: {
        opt_clip: ["CLIP"],
        opt_clip_width: [
          "INT",
          {
            forceInput: true,
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        opt_clip_height: [
          "INT",
          {
            forceInput: true,
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        insert_embedding: [["CHOOSE", "embeddings"]],
        insert_saved: [["CHOOSE"]],
        target_width: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 16384,
          },
        ],
        target_height: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 16384,
          },
        ],
        crop_width: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 16384,
          },
        ],
        crop_height: [
          "INT",
          {
            default: -1,
            min: -1,
            max: 16384,
          },
        ],
      },
      hidden: {
        values_insert_saved: [["CHOOSE"]],
      },
    },
    output: ["CONDITIONING", "STRING", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["CONDITIONING", "TEXT_G", "TEXT_L"],
    name: "SDXL Power Prompt - Simple / Negative (rgthree)",
    display_name: "SDXL Power Prompt - Simple / Negative (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Any Switch (rgthree)": {
    input: {
      required: {},
      optional: {},
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["*"],
    name: "Any Switch (rgthree)",
    display_name: "Any Switch (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  "Image Comparer (rgthree)": {
    input: {
      required: {},
      optional: {
        image_a: ["IMAGE"],
        image_b: ["IMAGE"],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "Image Comparer (rgthree)",
    display_name: "Image Comparer (rgthree)",
    description: "",
    category: "rgthree",
    output_node: true,
  },
  "Power Lora Loader (rgthree)": {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
      },
      optional: {},
      hidden: {},
    },
    output: ["MODEL", "CLIP"],
    output_is_list: [false, false],
    output_name: ["MODEL", "CLIP"],
    name: "Power Lora Loader (rgthree)",
    display_name: "Power Lora Loader (rgthree)",
    description: "",
    category: "rgthree",
    output_node: false,
  },
  DynamiCrafterI2V: {
    input: {
      required: {
        model: ["DCMODEL"],
        clip_vision: ["CLIP_VISION"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        image: ["IMAGE"],
        steps: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 7,
            min: 0,
            max: 20,
            step: 0.01,
          },
        ],
        eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        frames: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 100,
            step: 1,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        fs: [
          "INT",
          {
            default: 10,
            min: 2,
            max: 100,
            step: 1,
          },
        ],
        keep_model_loaded: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        vae_dtype: [
          ["fp32", "fp16", "bf16", "auto"],
          {
            default: "auto",
          },
        ],
      },
      optional: {
        image2: ["IMAGE"],
        mask: ["MASK"],
        frame_window_size: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
        frame_window_stride: [
          "INT",
          {
            default: 4,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
        augmentation_level: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        init_noise: ["DCNOISE"],
      },
    },
    output: ["IMAGE", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["images", "last_image"],
    name: "DynamiCrafterI2V",
    display_name: "DynamiCrafterI2V",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  DynamiCrafterModelLoader: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        dtype: [
          ["fp32", "fp16", "bf16", "auto"],
          {
            default: "auto",
          },
        ],
        fp8_unet: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["DCMODEL"],
    output_is_list: [false],
    output_name: ["DynCraft_model"],
    name: "DynamiCrafterModelLoader",
    display_name: "DynamiCrafterModelLoader",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  DynamiCrafterBatchInterpolation: {
    input: {
      required: {
        model: ["DCMODEL"],
        clip_vision: ["CLIP_VISION"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        images: ["IMAGE"],
        steps: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 7,
            min: 0,
            max: 20,
            step: 0.01,
          },
        ],
        eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 20,
            step: 0.01,
          },
        ],
        frames: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 100,
            step: 1,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        fs: [
          "INT",
          {
            default: 10,
            min: 2,
            max: 100,
            step: 1,
          },
        ],
        keep_model_loaded: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        vae_dtype: [
          ["fp32", "fp16", "bf16", "auto"],
          {
            default: "auto",
          },
        ],
        cut_near_keyframes: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 5,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["images", "last_image"],
    name: "DynamiCrafterBatchInterpolation",
    display_name: "DynamiCrafterBatchInterpolation",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  ToonCrafterInterpolation: {
    input: {
      required: {
        model: ["DCMODEL"],
        clip_vision: ["CLIP_VISION"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        images: ["IMAGE"],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 7,
            min: 0,
            max: 200,
            step: 0.01,
          },
        ],
        eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        frames: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 100,
            step: 1,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        fs: [
          "INT",
          {
            default: 10,
            min: 2,
            max: 100,
            step: 1,
          },
        ],
        vae_dtype: [
          ["fp32", "fp16", "bf16", "auto"],
          {
            default: "auto",
          },
        ],
      },
      optional: {
        image_embed_ratio: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        augmentation_level: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        optional_latents: ["LATENT"],
        ddpm_from: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 1000,
            step: 1,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["samples"],
    name: "ToonCrafterInterpolation",
    display_name: "ToonCrafterInterpolation",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  ToonCrafterDecode: {
    input: {
      required: {
        model: ["DCMODEL"],
        latent: ["LATENT"],
        vae_dtype: [
          ["fp32", "fp16", "bf16", "auto"],
          {
            default: "auto",
          },
        ],
      },
      optional: {
        prune_last_frame: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "ToonCrafterDecode",
    display_name: "ToonCrafterDecode",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  DownloadAndLoadDynamiCrafterModel: {
    input: {
      required: {
        model: [
          [
            "tooncrafter_512_interp-pruned-fp16.safetensors",
            "dynamicrafter_512_fp16_pruned.safetensors",
            "dynamicrafter_512_interp_fp16_pruned.safetensors",
            "dynamicrafter_1024_fp16_pruned.safetensors",
            "dynamicrafter-CIL-512-no-watermark-fixed-pruned-fp16.safetensors",
            "dynamicrafter-CIL-1024-no-watermark-pruned-fp16.safetensors",
          ],
          {
            default: "tooncrafter_512_interp-pruned-fp16.safetensors",
          },
        ],
        dtype: [
          ["fp32", "fp16", "bf16", "auto"],
          {
            default: "auto",
          },
        ],
        fp8_unet: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["DCMODEL"],
    output_is_list: [false],
    output_name: ["DynCraft_model"],
    name: "DownloadAndLoadDynamiCrafterModel",
    display_name: "DownloadAndLoadDynamiCrafterModel",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  DownloadAndLoadCLIPModel: {
    input: {
      required: {
        model: [
          [
            "stable-diffusion-2-1-clip-fp16.safetensors",
            "stable-diffusion-2-1-clip.safetensors",
          ],
          {
            default: "stable-diffusion-2-1-clip-fp16.safetensors",
          },
        ],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["clip"],
    name: "DownloadAndLoadCLIPModel",
    display_name: "DownloadAndLoadCLIPModel",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  DownloadAndLoadCLIPVisionModel: {
    input: {
      required: {
        model: [
          [
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "CLIP-ViT-H-fp16.safetensors",
          ],
          {
            default: "CLIP-ViT-H-fp16.safetensors",
          },
        ],
      },
    },
    output: ["CLIP_VISION"],
    output_is_list: [false],
    output_name: ["clip_vision"],
    name: "DownloadAndLoadCLIPVisionModel",
    display_name: "DownloadAndLoadCLIPVisionModel",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  DynamiCrafterLoadInitNoise: {
    input: {
      required: {
        model: ["DCMODEL"],
        M: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 1000,
            step: 1,
          },
        ],
        analytic_init: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["DCNOISE", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["init_noise", "width", "height"],
    name: "DynamiCrafterLoadInitNoise",
    display_name: "DynamiCrafterLoadInitNoise",
    description: "",
    category: "DynamiCrafterWrapper",
    output_node: false,
  },
  LoadAndApplyICLightUnet: {
    input: {
      required: {
        model: ["MODEL"],
        model_path: [["unet.safetensors"]],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "LoadAndApplyICLightUnet",
    display_name: "Load And Apply IC-Light",
    description:
      "\n  \nLoads and applies the diffusers SD1.5 IC-Light models available here:  \nhttps://huggingface.co/lllyasviel/ic-light/tree/main  \n  \nUsed with ICLightConditioning -node  \n",
    category: "IC-Light",
    output_node: false,
  },
  ICLightConditioning: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        vae: ["VAE"],
        foreground: ["LATENT"],
        multiplier: [
          "FLOAT",
          {
            default: 0.18215,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        opt_background: ["LATENT"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "empty_latent"],
    name: "ICLightConditioning",
    display_name: "IC-Light Conditioning",
    description:
      '\n  \nConditioning for the IC-Light model.  \nTo use the "opt_background" input, you also need to use the  \n"fbc" version of the IC-Light models.  \n  \n',
    category: "IC-Light",
    output_node: false,
  },
  LightSource: {
    input: {
      required: {
        light_position: [
          [
            "Left Light",
            "Right Light",
            "Top Light",
            "Bottom Light",
            "Top Left Light",
            "Top Right Light",
            "Bottom Left Light",
            "Bottom Right Light",
          ],
        ],
        multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.001,
          },
        ],
        start_color: [
          "STRING",
          {
            default: "#FFFFFF",
          },
        ],
        end_color: [
          "STRING",
          {
            default: "#000000",
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
      },
      optional: {
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        prev_image: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "LightSource",
    display_name: "Simple Light Source",
    description:
      "\nGenerates a gradient image that can be used  \nas a simple light source.  The color can be  \nspecified in RGB or hex format.  \n",
    category: "IC-Light",
    output_node: false,
  },
  CalculateNormalsFromImages: {
    input: {
      required: {
        images: ["IMAGE"],
        sigma: [
          "FLOAT",
          {
            default: 10,
            min: 0.01,
            max: 100,
            step: 0.01,
          },
        ],
        center_input_range: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
      },
    },
    output: ["IMAGE", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["normal", "divided"],
    name: "CalculateNormalsFromImages",
    display_name: "Calculate Normals From Images",
    description:
      "\nCalculates normal map from different directional exposures.  \nTakes in 4 images as a batch:  \nleft, right, bottom, top  \n\n",
    category: "IC-Light",
    output_node: false,
  },
  LoadHDRImage: {
    input: {
      required: {
        image: [
          ["example.png"],
          {
            image_upload: false,
          },
        ],
        exposures: [
          "STRING",
          {
            default: "-2,-1,0,1,2",
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "LoadHDRImage",
    display_name: "Load HDR Image",
    description:
      "\nLoads a .hdr image from the input directory.  \nOutput is a batch of LDR images with the selected exposures.  \n\n",
    category: "IC-Light",
    output_node: false,
  },
  BackgroundScaler: {
    input: {
      required: {
        image: ["IMAGE"],
        mask: ["MASK"],
        scale: [
          "FLOAT",
          {
            default: 0.5,
            min: -10,
            max: 10,
            step: 0.001,
          },
        ],
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "BackgroundScaler",
    display_name: "Background Scaler",
    description: "\nSets the masked area color in grayscale range.  \n",
    category: "IC-Light",
    output_node: false,
  },
  DetailTransfer: {
    input: {
      required: {
        target: ["IMAGE"],
        source: ["IMAGE"],
        mode: [
          [
            "add",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "hard_light",
            "color_dodge",
            "color_burn",
            "difference",
            "exclusion",
            "divide",
          ],
          {
            default: "add",
          },
        ],
        blur_sigma: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.01,
          },
        ],
        blend_factor: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.001,
            round: 0.001,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "DetailTransfer",
    display_name: "Detail Transfer",
    description: "",
    category: "IC-Light",
    output_node: false,
  },
  DitCheckpointLoader: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        model: [
          [
            "XL/2",
            "XL/4",
            "XL/8",
            "L/2",
            "L/4",
            "L/8",
            "B/2",
            "B/4",
            "B/8",
            "S/2",
            "S/4",
            "S/8",
          ],
        ],
        image_size: [[256, 512]],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["model"],
    name: "DitCheckpointLoader",
    display_name: "DitCheckpointLoader",
    description: "",
    category: "ExtraModels/DiT",
    output_node: false,
  },
  DiTCondLabelSelect: {
    input: {
      required: {
        model: ["MODEL"],
        label_name: [
          [
            "tench, Tinca tinca",
            "goldfish, Carassius auratus",
            "great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",
            "tiger shark, Galeocerdo cuvieri",
            "hammerhead, hammerhead shark",
            "electric ray, crampfish, numbfish, torpedo",
            "stingray",
            "cock",
            "hen",
            "ostrich, Struthio camelus",
            "brambling, Fringilla montifringilla",
            "goldfinch, Carduelis carduelis",
            "house finch, linnet, Carpodacus mexicanus",
            "junco, snowbird",
            "indigo bunting, indigo finch, indigo bird, Passerina cyanea",
            "robin, American robin, Turdus migratorius",
            "bulbul",
            "jay",
            "magpie",
            "chickadee",
            "water ouzel, dipper",
            "kite",
            "bald eagle, American eagle, Haliaeetus leucocephalus",
            "vulture",
            "great grey owl, great gray owl, Strix nebulosa",
            "European fire salamander, Salamandra salamandra",
            "common newt, Triturus vulgaris",
            "eft",
            "spotted salamander, Ambystoma maculatum",
            "axolotl, mud puppy, Ambystoma mexicanum",
            "bullfrog, Rana catesbeiana",
            "tree frog, tree-frog",
            "tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",
            "loggerhead, loggerhead turtle, Caretta caretta",
            "leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",
            "mud turtle",
            "terrapin",
            "box turtle, box tortoise",
            "banded gecko",
            "common iguana, iguana, Iguana iguana",
            "American chameleon, anole, Anolis carolinensis",
            "whiptail, whiptail lizard",
            "agama",
            "frilled lizard, Chlamydosaurus kingi",
            "alligator lizard",
            "Gila monster, Heloderma suspectum",
            "green lizard, Lacerta viridis",
            "African chameleon, Chamaeleo chamaeleon",
            "Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",
            "African crocodile, Nile crocodile, Crocodylus niloticus",
            "American alligator, Alligator mississipiensis",
            "triceratops",
            "thunder snake, worm snake, Carphophis amoenus",
            "ringneck snake, ring-necked snake, ring snake",
            "hognose snake, puff adder, sand viper",
            "green snake, grass snake",
            "king snake, kingsnake",
            "garter snake, grass snake",
            "water snake",
            "vine snake",
            "night snake, Hypsiglena torquata",
            "boa constrictor, Constrictor constrictor",
            "rock python, rock snake, Python sebae",
            "Indian cobra, Naja naja",
            "green mamba",
            "sea snake",
            "horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",
            "diamondback, diamondback rattlesnake, Crotalus adamanteus",
            "sidewinder, horned rattlesnake, Crotalus cerastes",
            "trilobite",
            "harvestman, daddy longlegs, Phalangium opilio",
            "scorpion",
            "black and gold garden spider, Argiope aurantia",
            "barn spider, Araneus cavaticus",
            "garden spider, Aranea diademata",
            "black widow, Latrodectus mactans",
            "tarantula",
            "wolf spider, hunting spider",
            "tick",
            "centipede",
            "black grouse",
            "ptarmigan",
            "ruffed grouse, partridge, Bonasa umbellus",
            "prairie chicken, prairie grouse, prairie fowl",
            "peacock",
            "quail",
            "partridge",
            "African grey, African gray, Psittacus erithacus",
            "macaw",
            "sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",
            "lorikeet",
            "coucal",
            "bee eater",
            "hornbill",
            "hummingbird",
            "jacamar",
            "toucan",
            "drake",
            "red-breasted merganser, Mergus serrator",
            "goose",
            "black swan, Cygnus atratus",
            "tusker",
            "echidna, spiny anteater, anteater",
            "platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",
            "wallaby, brush kangaroo",
            "koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",
            "wombat",
            "jellyfish",
            "sea anemone, anemone",
            "brain coral",
            "flatworm, platyhelminth",
            "nematode, nematode worm, roundworm",
            "conch",
            "snail",
            "slug",
            "sea slug, nudibranch",
            "chiton, coat-of-mail shell, sea cradle, polyplacophore",
            "chambered nautilus, pearly nautilus, nautilus",
            "Dungeness crab, Cancer magister",
            "rock crab, Cancer irroratus",
            "fiddler crab",
            "king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",
            "American lobster, Northern lobster, Maine lobster, Homarus americanus",
            "spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",
            "crayfish, crawfish, crawdad, crawdaddy",
            "hermit crab",
            "isopod",
            "white stork, Ciconia ciconia",
            "black stork, Ciconia nigra",
            "spoonbill",
            "flamingo",
            "little blue heron, Egretta caerulea",
            "American egret, great white heron, Egretta albus",
            "bittern",
            "crane",
            "limpkin, Aramus pictus",
            "European gallinule, Porphyrio porphyrio",
            "American coot, marsh hen, mud hen, water hen, Fulica americana",
            "bustard",
            "ruddy turnstone, Arenaria interpres",
            "red-backed sandpiper, dunlin, Erolia alpina",
            "redshank, Tringa totanus",
            "dowitcher",
            "oystercatcher, oyster catcher",
            "pelican",
            "king penguin, Aptenodytes patagonica",
            "albatross, mollymawk",
            "grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",
            "killer whale, killer, orca, grampus, sea wolf, Orcinus orca",
            "dugong, Dugong dugon",
            "sea lion",
            "Chihuahua",
            "Japanese spaniel",
            "Maltese dog, Maltese terrier, Maltese",
            "Pekinese, Pekingese, Peke",
            "Shih-Tzu",
            "Blenheim spaniel",
            "papillon",
            "toy terrier",
            "Rhodesian ridgeback",
            "Afghan hound, Afghan",
            "basset, basset hound",
            "beagle",
            "bloodhound, sleuthhound",
            "bluetick",
            "black-and-tan coonhound",
            "Walker hound, Walker foxhound",
            "English foxhound",
            "redbone",
            "borzoi, Russian wolfhound",
            "Irish wolfhound",
            "Italian greyhound",
            "whippet",
            "Ibizan hound, Ibizan Podenco",
            "Norwegian elkhound, elkhound",
            "otterhound, otter hound",
            "Saluki, gazelle hound",
            "Scottish deerhound, deerhound",
            "Weimaraner",
            "Staffordshire bullterrier, Staffordshire bull terrier",
            "American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",
            "Bedlington terrier",
            "Border terrier",
            "Kerry blue terrier",
            "Irish terrier",
            "Norfolk terrier",
            "Norwich terrier",
            "Yorkshire terrier",
            "wire-haired fox terrier",
            "Lakeland terrier",
            "Sealyham terrier, Sealyham",
            "Airedale, Airedale terrier",
            "cairn, cairn terrier",
            "Australian terrier",
            "Dandie Dinmont, Dandie Dinmont terrier",
            "Boston bull, Boston terrier",
            "miniature schnauzer",
            "giant schnauzer",
            "standard schnauzer",
            "Scotch terrier, Scottish terrier, Scottie",
            "Tibetan terrier, chrysanthemum dog",
            "silky terrier, Sydney silky",
            "soft-coated wheaten terrier",
            "West Highland white terrier",
            "Lhasa, Lhasa apso",
            "flat-coated retriever",
            "curly-coated retriever",
            "golden retriever",
            "Labrador retriever",
            "Chesapeake Bay retriever",
            "German short-haired pointer",
            "vizsla, Hungarian pointer",
            "English setter",
            "Irish setter, red setter",
            "Gordon setter",
            "Brittany spaniel",
            "clumber, clumber spaniel",
            "English springer, English springer spaniel",
            "Welsh springer spaniel",
            "cocker spaniel, English cocker spaniel, cocker",
            "Sussex spaniel",
            "Irish water spaniel",
            "kuvasz",
            "schipperke",
            "groenendael",
            "malinois",
            "briard",
            "kelpie",
            "komondor",
            "Old English sheepdog, bobtail",
            "Shetland sheepdog, Shetland sheep dog, Shetland",
            "collie",
            "Border collie",
            "Bouvier des Flandres, Bouviers des Flandres",
            "Rottweiler",
            "German shepherd, German shepherd dog, German police dog, alsatian",
            "Doberman, Doberman pinscher",
            "miniature pinscher",
            "Greater Swiss Mountain dog",
            "Bernese mountain dog",
            "Appenzeller",
            "EntleBucher",
            "boxer",
            "bull mastiff",
            "Tibetan mastiff",
            "French bulldog",
            "Great Dane",
            "Saint Bernard, St Bernard",
            "Eskimo dog, husky",
            "malamute, malemute, Alaskan malamute",
            "Siberian husky",
            "dalmatian, coach dog, carriage dog",
            "affenpinscher, monkey pinscher, monkey dog",
            "basenji",
            "pug, pug-dog",
            "Leonberg",
            "Newfoundland, Newfoundland dog",
            "Great Pyrenees",
            "Samoyed, Samoyede",
            "Pomeranian",
            "chow, chow chow",
            "keeshond",
            "Brabancon griffon",
            "Pembroke, Pembroke Welsh corgi",
            "Cardigan, Cardigan Welsh corgi",
            "toy poodle",
            "miniature poodle",
            "standard poodle",
            "Mexican hairless",
            "timber wolf, grey wolf, gray wolf, Canis lupus",
            "white wolf, Arctic wolf, Canis lupus tundrarum",
            "red wolf, maned wolf, Canis rufus, Canis niger",
            "coyote, prairie wolf, brush wolf, Canis latrans",
            "dingo, warrigal, warragal, Canis dingo",
            "dhole, Cuon alpinus",
            "African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",
            "hyena, hyaena",
            "red fox, Vulpes vulpes",
            "kit fox, Vulpes macrotis",
            "Arctic fox, white fox, Alopex lagopus",
            "grey fox, gray fox, Urocyon cinereoargenteus",
            "tabby, tabby cat",
            "tiger cat",
            "Persian cat",
            "Siamese cat, Siamese",
            "Egyptian cat",
            "cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",
            "lynx, catamount",
            "leopard, Panthera pardus",
            "snow leopard, ounce, Panthera uncia",
            "jaguar, panther, Panthera onca, Felis onca",
            "lion, king of beasts, Panthera leo",
            "tiger, Panthera tigris",
            "cheetah, chetah, Acinonyx jubatus",
            "brown bear, bruin, Ursus arctos",
            "American black bear, black bear, Ursus americanus, Euarctos americanus",
            "ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",
            "sloth bear, Melursus ursinus, Ursus ursinus",
            "mongoose",
            "meerkat, mierkat",
            "tiger beetle",
            "ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",
            "ground beetle, carabid beetle",
            "long-horned beetle, longicorn, longicorn beetle",
            "leaf beetle, chrysomelid",
            "dung beetle",
            "rhinoceros beetle",
            "weevil",
            "fly",
            "bee",
            "ant, emmet, pismire",
            "grasshopper, hopper",
            "cricket",
            "walking stick, walkingstick, stick insect",
            "cockroach, roach",
            "mantis, mantid",
            "cicada, cicala",
            "leafhopper",
            "lacewing, lacewing fly",
            "dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",
            "damselfly",
            "admiral",
            "ringlet, ringlet butterfly",
            "monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",
            "cabbage butterfly",
            "sulphur butterfly, sulfur butterfly",
            "lycaenid, lycaenid butterfly",
            "starfish, sea star",
            "sea urchin",
            "sea cucumber, holothurian",
            "wood rabbit, cottontail, cottontail rabbit",
            "hare",
            "Angora, Angora rabbit",
            "hamster",
            "porcupine, hedgehog",
            "fox squirrel, eastern fox squirrel, Sciurus niger",
            "marmot",
            "beaver",
            "guinea pig, Cavia cobaya",
            "sorrel",
            "zebra",
            "hog, pig, grunter, squealer, Sus scrofa",
            "wild boar, boar, Sus scrofa",
            "warthog",
            "hippopotamus, hippo, river horse, Hippopotamus amphibius",
            "ox",
            "water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",
            "bison",
            "ram, tup",
            "bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",
            "ibex, Capra ibex",
            "hartebeest",
            "impala, Aepyceros melampus",
            "gazelle",
            "Arabian camel, dromedary, Camelus dromedarius",
            "llama",
            "weasel",
            "mink",
            "polecat, fitch, foulmart, foumart, Mustela putorius",
            "black-footed ferret, ferret, Mustela nigripes",
            "otter",
            "skunk, polecat, wood pussy",
            "badger",
            "armadillo",
            "three-toed sloth, ai, Bradypus tridactylus",
            "orangutan, orang, orangutang, Pongo pygmaeus",
            "gorilla, Gorilla gorilla",
            "chimpanzee, chimp, Pan troglodytes",
            "gibbon, Hylobates lar",
            "siamang, Hylobates syndactylus, Symphalangus syndactylus",
            "guenon, guenon monkey",
            "patas, hussar monkey, Erythrocebus patas",
            "baboon",
            "macaque",
            "langur",
            "colobus, colobus monkey",
            "proboscis monkey, Nasalis larvatus",
            "marmoset",
            "capuchin, ringtail, Cebus capucinus",
            "howler monkey, howler",
            "titi, titi monkey",
            "spider monkey, Ateles geoffroyi",
            "squirrel monkey, Saimiri sciureus",
            "Madagascar cat, ring-tailed lemur, Lemur catta",
            "indri, indris, Indri indri, Indri brevicaudatus",
            "Indian elephant, Elephas maximus",
            "African elephant, Loxodonta africana",
            "lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",
            "giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",
            "barracouta, snoek",
            "eel",
            "coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",
            "rock beauty, Holocanthus tricolor",
            "anemone fish",
            "sturgeon",
            "gar, garfish, garpike, billfish, Lepisosteus osseus",
            "lionfish",
            "puffer, pufferfish, blowfish, globefish",
            "abacus",
            "abaya",
            "academic gown, academic robe, judge's robe",
            "accordion, piano accordion, squeeze box",
            "acoustic guitar",
            "aircraft carrier, carrier, flattop, attack aircraft carrier",
            "airliner",
            "airship, dirigible",
            "altar",
            "ambulance",
            "amphibian, amphibious vehicle",
            "analog clock",
            "apiary, bee house",
            "apron",
            "ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",
            "assault rifle, assault gun",
            "backpack, back pack, knapsack, packsack, rucksack, haversack",
            "bakery, bakeshop, bakehouse",
            "balance beam, beam",
            "balloon",
            "ballpoint, ballpoint pen, ballpen, Biro",
            "Band Aid",
            "banjo",
            "bannister, banister, balustrade, balusters, handrail",
            "barbell",
            "barber chair",
            "barbershop",
            "barn",
            "barometer",
            "barrel, cask",
            "barrow, garden cart, lawn cart, wheelbarrow",
            "baseball",
            "basketball",
            "bassinet",
            "bassoon",
            "bathing cap, swimming cap",
            "bath towel",
            "bathtub, bathing tub, bath, tub",
            "beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",
            "beacon, lighthouse, beacon light, pharos",
            "beaker",
            "bearskin, busby, shako",
            "beer bottle",
            "beer glass",
            "bell cote, bell cot",
            "bib",
            "bicycle-built-for-two, tandem bicycle, tandem",
            "bikini, two-piece",
            "binder, ring-binder",
            "binoculars, field glasses, opera glasses",
            "birdhouse",
            "boathouse",
            "bobsled, bobsleigh, bob",
            "bolo tie, bolo, bola tie, bola",
            "bonnet, poke bonnet",
            "bookcase",
            "bookshop, bookstore, bookstall",
            "bottlecap",
            "bow",
            "bow tie, bow-tie, bowtie",
            "brass, memorial tablet, plaque",
            "brassiere, bra, bandeau",
            "breakwater, groin, groyne, mole, bulwark, seawall, jetty",
            "breastplate, aegis, egis",
            "broom",
            "bucket, pail",
            "buckle",
            "bulletproof vest",
            "bullet train, bullet",
            "butcher shop, meat market",
            "cab, hack, taxi, taxicab",
            "caldron, cauldron",
            "candle, taper, wax light",
            "cannon",
            "canoe",
            "can opener, tin opener",
            "cardigan",
            "car mirror",
            "carousel, carrousel, merry-go-round, roundabout, whirligig",
            "carpenter's kit, tool kit",
            "carton",
            "car wheel",
            "cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",
            "cassette",
            "cassette player",
            "castle",
            "catamaran",
            "CD player",
            "cello, violoncello",
            "cellular telephone, cellular phone, cellphone, cell, mobile phone",
            "chain",
            "chainlink fence",
            "chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",
            "chain saw, chainsaw",
            "chest",
            "chiffonier, commode",
            "chime, bell, gong",
            "china cabinet, china closet",
            "Christmas stocking",
            "church, church building",
            "cinema, movie theater, movie theatre, movie house, picture palace",
            "cleaver, meat cleaver, chopper",
            "cliff dwelling",
            "cloak",
            "clog, geta, patten, sabot",
            "cocktail shaker",
            "coffee mug",
            "coffeepot",
            "coil, spiral, volute, whorl, helix",
            "combination lock",
            "computer keyboard, keypad",
            "confectionery, confectionary, candy store",
            "container ship, containership, container vessel",
            "convertible",
            "corkscrew, bottle screw",
            "cornet, horn, trumpet, trump",
            "cowboy boot",
            "cowboy hat, ten-gallon hat",
            "cradle",
            "crane",
            "crash helmet",
            "crate",
            "crib, cot",
            "Crock Pot",
            "croquet ball",
            "crutch",
            "cuirass",
            "dam, dike, dyke",
            "desk",
            "desktop computer",
            "dial telephone, dial phone",
            "diaper, nappy, napkin",
            "digital clock",
            "digital watch",
            "dining table, board",
            "dishrag, dishcloth",
            "dishwasher, dish washer, dishwashing machine",
            "disk brake, disc brake",
            "dock, dockage, docking facility",
            "dogsled, dog sled, dog sleigh",
            "dome",
            "doormat, welcome mat",
            "drilling platform, offshore rig",
            "drum, membranophone, tympan",
            "drumstick",
            "dumbbell",
            "Dutch oven",
            "electric fan, blower",
            "electric guitar",
            "electric locomotive",
            "entertainment center",
            "envelope",
            "espresso maker",
            "face powder",
            "feather boa, boa",
            "file, file cabinet, filing cabinet",
            "fireboat",
            "fire engine, fire truck",
            "fire screen, fireguard",
            "flagpole, flagstaff",
            "flute, transverse flute",
            "folding chair",
            "football helmet",
            "forklift",
            "fountain",
            "fountain pen",
            "four-poster",
            "freight car",
            "French horn, horn",
            "frying pan, frypan, skillet",
            "fur coat",
            "garbage truck, dustcart",
            "gasmask, respirator, gas helmet",
            "gas pump, gasoline pump, petrol pump, island dispenser",
            "goblet",
            "go-kart",
            "golf ball",
            "golfcart, golf cart",
            "gondola",
            "gong, tam-tam",
            "gown",
            "grand piano, grand",
            "greenhouse, nursery, glasshouse",
            "grille, radiator grille",
            "grocery store, grocery, food market, market",
            "guillotine",
            "hair slide",
            "hair spray",
            "half track",
            "hammer",
            "hamper",
            "hand blower, blow dryer, blow drier, hair dryer, hair drier",
            "hand-held computer, hand-held microcomputer",
            "handkerchief, hankie, hanky, hankey",
            "hard disc, hard disk, fixed disk",
            "harmonica, mouth organ, harp, mouth harp",
            "harp",
            "harvester, reaper",
            "hatchet",
            "holster",
            "home theater, home theatre",
            "honeycomb",
            "hook, claw",
            "hoopskirt, crinoline",
            "horizontal bar, high bar",
            "horse cart, horse-cart",
            "hourglass",
            "iPod",
            "iron, smoothing iron",
            "jack-o'-lantern",
            "jean, blue jean, denim",
            "jeep, landrover",
            "jersey, T-shirt, tee shirt",
            "jigsaw puzzle",
            "jinrikisha, ricksha, rickshaw",
            "joystick",
            "kimono",
            "knee pad",
            "knot",
            "lab coat, laboratory coat",
            "ladle",
            "lampshade, lamp shade",
            "laptop, laptop computer",
            "lawn mower, mower",
            "lens cap, lens cover",
            "letter opener, paper knife, paperknife",
            "library",
            "lifeboat",
            "lighter, light, igniter, ignitor",
            "limousine, limo",
            "liner, ocean liner",
            "lipstick, lip rouge",
            "Loafer",
            "lotion",
            "loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",
            "loupe, jeweler's loupe",
            "lumbermill, sawmill",
            "magnetic compass",
            "mailbag, postbag",
            "mailbox, letter box",
            "maillot",
            "maillot, tank suit",
            "manhole cover",
            "maraca",
            "marimba, xylophone",
            "mask",
            "matchstick",
            "maypole",
            "maze, labyrinth",
            "measuring cup",
            "medicine chest, medicine cabinet",
            "megalith, megalithic structure",
            "microphone, mike",
            "microwave, microwave oven",
            "military uniform",
            "milk can",
            "minibus",
            "miniskirt, mini",
            "minivan",
            "missile",
            "mitten",
            "mixing bowl",
            "mobile home, manufactured home",
            "Model T",
            "modem",
            "monastery",
            "monitor",
            "moped",
            "mortar",
            "mortarboard",
            "mosque",
            "mosquito net",
            "motor scooter, scooter",
            "mountain bike, all-terrain bike, off-roader",
            "mountain tent",
            "mouse, computer mouse",
            "mousetrap",
            "moving van",
            "muzzle",
            "nail",
            "neck brace",
            "necklace",
            "nipple",
            "notebook, notebook computer",
            "obelisk",
            "oboe, hautboy, hautbois",
            "ocarina, sweet potato",
            "odometer, hodometer, mileometer, milometer",
            "oil filter",
            "organ, pipe organ",
            "oscilloscope, scope, cathode-ray oscilloscope, CRO",
            "overskirt",
            "oxcart",
            "oxygen mask",
            "packet",
            "paddle, boat paddle",
            "paddlewheel, paddle wheel",
            "padlock",
            "paintbrush",
            "pajama, pyjama, pj's, jammies",
            "palace",
            "panpipe, pandean pipe, syrinx",
            "paper towel",
            "parachute, chute",
            "parallel bars, bars",
            "park bench",
            "parking meter",
            "passenger car, coach, carriage",
            "patio, terrace",
            "pay-phone, pay-station",
            "pedestal, plinth, footstall",
            "pencil box, pencil case",
            "pencil sharpener",
            "perfume, essence",
            "Petri dish",
            "photocopier",
            "pick, plectrum, plectron",
            "pickelhaube",
            "picket fence, paling",
            "pickup, pickup truck",
            "pier",
            "piggy bank, penny bank",
            "pill bottle",
            "pillow",
            "ping-pong ball",
            "pinwheel",
            "pirate, pirate ship",
            "pitcher, ewer",
            "plane, carpenter's plane, woodworking plane",
            "planetarium",
            "plastic bag",
            "plate rack",
            "plow, plough",
            "plunger, plumber's helper",
            "Polaroid camera, Polaroid Land camera",
            "pole",
            "police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",
            "poncho",
            "pool table, billiard table, snooker table",
            "pop bottle, soda bottle",
            "pot, flowerpot",
            "potter's wheel",
            "power drill",
            "prayer rug, prayer mat",
            "printer",
            "prison, prison house",
            "projectile, missile",
            "projector",
            "puck, hockey puck",
            "punching bag, punch bag, punching ball, punchball",
            "purse",
            "quill, quill pen",
            "quilt, comforter, comfort, puff",
            "racer, race car, racing car",
            "racket, racquet",
            "radiator",
            "radio, wireless",
            "radio telescope, radio reflector",
            "rain barrel",
            "recreational vehicle, RV, R.V.",
            "reel",
            "reflex camera",
            "refrigerator, icebox",
            "remote control, remote",
            "restaurant, eating house, eating place, eatery",
            "revolver, six-gun, six-shooter",
            "rifle",
            "rocking chair, rocker",
            "rotisserie",
            "rubber eraser, rubber, pencil eraser",
            "rugby ball",
            "rule, ruler",
            "running shoe",
            "safe",
            "safety pin",
            "saltshaker, salt shaker",
            "sandal",
            "sarong",
            "sax, saxophone",
            "scabbard",
            "scale, weighing machine",
            "school bus",
            "schooner",
            "scoreboard",
            "screen, CRT screen",
            "screw",
            "screwdriver",
            "seat belt, seatbelt",
            "sewing machine",
            "shield, buckler",
            "shoe shop, shoe-shop, shoe store",
            "shoji",
            "shopping basket",
            "shopping cart",
            "shovel",
            "shower cap",
            "shower curtain",
            "ski",
            "ski mask",
            "sleeping bag",
            "slide rule, slipstick",
            "sliding door",
            "slot, one-armed bandit",
            "snorkel",
            "snowmobile",
            "snowplow, snowplough",
            "soap dispenser",
            "soccer ball",
            "sock",
            "solar dish, solar collector, solar furnace",
            "sombrero",
            "soup bowl",
            "space bar",
            "space heater",
            "space shuttle",
            "spatula",
            "speedboat",
            "spider web, spider's web",
            "spindle",
            "sports car, sport car",
            "spotlight, spot",
            "stage",
            "steam locomotive",
            "steel arch bridge",
            "steel drum",
            "stethoscope",
            "stole",
            "stone wall",
            "stopwatch, stop watch",
            "stove",
            "strainer",
            "streetcar, tram, tramcar, trolley, trolley car",
            "stretcher",
            "studio couch, day bed",
            "stupa, tope",
            "submarine, pigboat, sub, U-boat",
            "suit, suit of clothes",
            "sundial",
            "sunglass",
            "sunglasses, dark glasses, shades",
            "sunscreen, sunblock, sun blocker",
            "suspension bridge",
            "swab, swob, mop",
            "sweatshirt",
            "swimming trunks, bathing trunks",
            "swing",
            "switch, electric switch, electrical switch",
            "syringe",
            "table lamp",
            "tank, army tank, armored combat vehicle, armoured combat vehicle",
            "tape player",
            "teapot",
            "teddy, teddy bear",
            "television, television system",
            "tennis ball",
            "thatch, thatched roof",
            "theater curtain, theatre curtain",
            "thimble",
            "thresher, thrasher, threshing machine",
            "throne",
            "tile roof",
            "toaster",
            "tobacco shop, tobacconist shop, tobacconist",
            "toilet seat",
            "torch",
            "totem pole",
            "tow truck, tow car, wrecker",
            "toyshop",
            "tractor",
            "trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",
            "tray",
            "trench coat",
            "tricycle, trike, velocipede",
            "trimaran",
            "tripod",
            "triumphal arch",
            "trolleybus, trolley coach, trackless trolley",
            "trombone",
            "tub, vat",
            "turnstile",
            "typewriter keyboard",
            "umbrella",
            "unicycle, monocycle",
            "upright, upright piano",
            "vacuum, vacuum cleaner",
            "vase",
            "vault",
            "velvet",
            "vending machine",
            "vestment",
            "viaduct",
            "violin, fiddle",
            "volleyball",
            "waffle iron",
            "wall clock",
            "wallet, billfold, notecase, pocketbook",
            "wardrobe, closet, press",
            "warplane, military plane",
            "washbasin, handbasin, washbowl, lavabo, wash-hand basin",
            "washer, automatic washer, washing machine",
            "water bottle",
            "water jug",
            "water tower",
            "whiskey jug",
            "whistle",
            "wig",
            "window screen",
            "window shade",
            "Windsor tie",
            "wine bottle",
            "wing",
            "wok",
            "wooden spoon",
            "wool, woolen, woollen",
            "worm fence, snake fence, snake-rail fence, Virginia fence",
            "wreck",
            "yawl",
            "yurt",
            "web site, website, internet site, site",
            "comic book",
            "crossword puzzle, crossword",
            "street sign",
            "traffic light, traffic signal, stoplight",
            "book jacket, dust cover, dust jacket, dust wrapper",
            "menu",
            "plate",
            "guacamole",
            "consomme",
            "hot pot, hotpot",
            "trifle",
            "ice cream, icecream",
            "ice lolly, lolly, lollipop, popsicle",
            "French loaf",
            "bagel, beigel",
            "pretzel",
            "cheeseburger",
            "hotdog, hot dog, red hot",
            "mashed potato",
            "head cabbage",
            "broccoli",
            "cauliflower",
            "zucchini, courgette",
            "spaghetti squash",
            "acorn squash",
            "butternut squash",
            "cucumber, cuke",
            "artichoke, globe artichoke",
            "bell pepper",
            "cardoon",
            "mushroom",
            "Granny Smith",
            "strawberry",
            "orange",
            "lemon",
            "fig",
            "pineapple, ananas",
            "banana",
            "jackfruit, jak, jack",
            "custard apple",
            "pomegranate",
            "hay",
            "carbonara",
            "chocolate sauce, chocolate syrup",
            "dough",
            "meat loaf, meatloaf",
            "pizza, pizza pie",
            "potpie",
            "burrito",
            "red wine",
            "espresso",
            "cup",
            "eggnog",
            "alp",
            "bubble",
            "cliff, drop, drop-off",
            "coral reef",
            "geyser",
            "lakeside, lakeshore",
            "promontory, headland, head, foreland",
            "sandbar, sand bar",
            "seashore, coast, seacoast, sea-coast",
            "valley, vale",
            "volcano",
            "ballplayer, baseball player",
            "groom, bridegroom",
            "scuba diver",
            "rapeseed",
            "daisy",
            "yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",
            "corn",
            "acorn",
            "hip, rose hip, rosehip",
            "buckeye, horse chestnut, conker",
            "coral fungus",
            "agaric",
            "gyromitra",
            "stinkhorn, carrion fungus",
            "earthstar",
            "hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",
            "bolete",
            "ear, spike, capitulum",
            "toilet tissue, toilet paper, bathroom tissue",
          ],
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["class"],
    name: "DiTCondLabelSelect",
    display_name: "DiTCondLabelSelect",
    description: "",
    category: "ExtraModels/DiT",
    output_node: false,
  },
  DiTCondLabelEmpty: {
    input: {
      required: {
        model: ["MODEL"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["empty"],
    name: "DiTCondLabelEmpty",
    display_name: "DiTCondLabelEmpty",
    description: "",
    category: "ExtraModels/DiT",
    output_node: false,
  },
  PixArtCheckpointLoader: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        model: [
          [
            "PixArtMS_XL_2",
            "PixArtMS_Sigma_XL_2",
            "PixArtMS_Sigma_XL_2_900M",
            "PixArtMS_Sigma_XL_2_2K",
            "PixArt_XL_2",
            "ControlPixArtHalf",
            "ControlPixArtMSHalf",
          ],
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["model"],
    name: "PixArtCheckpointLoader",
    display_name: "PixArt Checkpoint Loader",
    description: "",
    category: "ExtraModels/PixArt",
    output_node: false,
  },
  PixArtCheckpointLoaderSimple: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["model"],
    name: "PixArtCheckpointLoaderSimple",
    display_name: "PixArt Checkpoint Loader (auto)",
    description: "",
    category: "ExtraModels/PixArt",
    output_node: false,
  },
  PixArtResolutionSelect: {
    input: {
      required: {
        model: [
          [
            "PixArtMS_XL_2",
            "PixArt_XL_2",
            "PixArtMS_Sigma_XL_2_2K",
            "PixArtMS_Sigma_XL_2",
            "PixArtMS_Sigma_XL_2_512",
          ],
        ],
        ratio: [
          [
            "0.25",
            "0.26",
            "0.27",
            "0.28",
            "0.32",
            "0.33",
            "0.35",
            "0.40",
            "0.42",
            "0.48",
            "0.50",
            "0.52",
            "0.57",
            "0.60",
            "0.68",
            "0.72",
            "0.78",
            "0.82",
            "0.88",
            "0.94",
            "1.00",
            "1.07",
            "1.13",
            "1.21",
            "1.29",
            "1.38",
            "1.46",
            "1.67",
            "1.75",
            "2.00",
            "2.09",
            "2.40",
            "2.50",
            "2.89",
            "3.00",
            "3.11",
            "3.62",
            "3.75",
            "3.88",
            "4.00",
          ],
          {
            default: "1.00",
          },
        ],
      },
    },
    output: ["INT", "INT"],
    output_is_list: [false, false],
    output_name: ["width", "height"],
    name: "PixArtResolutionSelect",
    display_name: "PixArt Resolution Select",
    description: "",
    category: "ExtraModels/PixArt",
    output_node: false,
  },
  PixArtLoraLoader: {
    input: {
      required: {
        model: ["MODEL"],
        lora_name: [
          [
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: -20,
            max: 20,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "PixArtLoraLoader",
    display_name: "PixArt Load LoRA",
    description: "",
    category: "ExtraModels/PixArt",
    output_node: false,
  },
  PixArtT5TextEncode: {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
        T5: ["T5"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "PixArtT5TextEncode",
    display_name: "PixArt T5 Text Encode [Reference]",
    description: "",
    category: "ExtraModels/PixArt",
    output_node: false,
  },
  PixArtResolutionCond: {
    input: {
      required: {
        cond: ["CONDITIONING"],
        width: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 8192,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 8192,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["cond"],
    name: "PixArtResolutionCond",
    display_name: "PixArt Resolution Conditioning",
    description: "",
    category: "ExtraModels/PixArt",
    output_node: false,
  },
  PixArtControlNetCond: {
    input: {
      required: {
        cond: ["CONDITIONING"],
        latent: ["LATENT"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["cond"],
    name: "PixArtControlNetCond",
    display_name: "PixArt ControlNet Conditioning",
    description: "",
    category: "ExtraModels/PixArt",
    output_node: false,
  },
  PixArtT5FromSD3CLIP: {
    input: {
      required: {
        sd3_clip: ["CLIP"],
        padding: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 300,
          },
        ],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["t5"],
    name: "PixArtT5FromSD3CLIP",
    display_name: "PixArt T5 from SD3 CLIP",
    description: "",
    category: "ExtraModels/PixArt",
    output_node: false,
  },
  T5v11Loader: {
    input: {
      required: {
        t5v11_name: [[]],
        t5v11_ver: [["xxl"]],
        path_type: [["folder", "file"]],
        device: [
          ["auto", "cpu", "gpu"],
          {
            default: "cpu",
          },
        ],
        dtype: [
          [
            "default",
            "auto (comfy)",
            "FP32",
            "FP16",
            "bnb8bit",
            "bnb4bit",
            "FP8 E4M3",
            "FP8 E5M2",
          ],
        ],
      },
    },
    output: ["T5"],
    output_is_list: [false],
    output_name: ["T5"],
    name: "T5v11Loader",
    display_name: "T5v1.1 Loader",
    description: "",
    category: "ExtraModels/T5",
    output_node: false,
  },
  T5TextEncode: {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
        T5: ["T5"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "T5TextEncode",
    display_name: "T5 Text Encode",
    description: "",
    category: "ExtraModels/T5",
    output_node: false,
  },
  HYDiTCheckpointLoader: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        model: [
          ["G/2", "G/2-1.2", "XL/2", "L/2", "B/2"],
          {
            default: "G/2",
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["model"],
    name: "HYDiTCheckpointLoader",
    display_name: "Hunyuan DiT Checkpoint Loader",
    description: "",
    category: "ExtraModels/HunyuanDiT",
    output_node: false,
  },
  HYDiTTextEncoderLoader: {
    input: {
      required: {
        clip_name: [["clip.safetensors"]],
        mt5_name: [[]],
        device: [
          ["auto", "cpu", "gpu"],
          {
            default: "cpu",
          },
        ],
        dtype: [["default", "auto (comfy)", "FP32", "FP16", "BF16"]],
      },
    },
    output: ["CLIP", "T5"],
    output_is_list: [false, false],
    output_name: ["CLIP", "T5"],
    name: "HYDiTTextEncoderLoader",
    display_name: "Hunyuan DiT Text Encoder Loader",
    description: "",
    category: "ExtraModels/HunyuanDiT",
    output_node: false,
  },
  HYDiTTextEncode: {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
        text_t5: [
          "STRING",
          {
            multiline: true,
          },
        ],
        CLIP: ["CLIP"],
        T5: ["T5"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "HYDiTTextEncode",
    display_name: "Hunyuan DiT Text Encode",
    description: "",
    category: "ExtraModels/HunyuanDiT",
    output_node: false,
  },
  HYDiTTextEncodeSimple: {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
        CLIP: ["CLIP"],
        T5: ["T5"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "HYDiTTextEncodeSimple",
    display_name: "Hunyuan DiT Text Encode (simple)",
    description: "",
    category: "ExtraModels/HunyuanDiT",
    output_node: false,
  },
  HYDiTSrcSizeCond: {
    input: {
      required: {
        cond: ["CONDITIONING"],
        width: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 8192,
            step: 16,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 8192,
            step: 16,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["cond"],
    name: "HYDiTSrcSizeCond",
    display_name: "Hunyuan DiT Size Conditioning (advanced)",
    description: "",
    category: "ExtraModels/HunyuanDiT",
    output_node: false,
  },
  ExtraVAELoader: {
    input: {
      required: {
        vae_name: [
          [
            "sha256_63aeecb90ff7bc1c115395962d3e803571385b61938377bc7089b36e81e92e2e.safetensors",
            "sha256_735e4c3a447a3255760d7f86845f09f937809baa529c17370d83e4c3758f3c75.safetensors",
            "vae.safetensors",
          ],
        ],
        vae_type: [
          [
            "kl-f4",
            "kl-f8",
            "kl-f8-d16",
            "kl-f16",
            "kl-f32",
            "vq-f4",
            "vq-f8",
            "vq-f16",
            "Consistency-Decoder",
            "SDV-VideoDecoder",
            "MoVQ3",
          ],
          {
            default: "kl-f8",
          },
        ],
        dtype: [["auto", "FP32", "FP16", "BF16"]],
      },
    },
    output: ["VAE"],
    output_is_list: [false],
    output_name: ["VAE"],
    name: "ExtraVAELoader",
    display_name: "ExtraVAELoader",
    description: "",
    category: "ExtraModels",
    output_node: false,
  },
  MiaoBiCLIPLoader: {
    input: {
      required: {
        clip_name: [["clip.safetensors"]],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "MiaoBiCLIPLoader",
    display_name: "MiaoBi CLIP Loader",
    description: "",
    category: "ExtraModels/MiaoBi",
    output_node: false,
  },
  MiaoBiDiffusersLoader: {
    input: {
      required: {
        model_path: [[]],
      },
    },
    output: ["MODEL", "CLIP", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "VAE"],
    name: "MiaoBiDiffusersLoader",
    display_name: "MiaoBi Checkpoint Loader (Diffusers)",
    description: "",
    category: "ExtraModels/MiaoBi",
    output_node: false,
  },
  AV_CheckpointModelsToParametersPipe: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
      optional: {
        pipe: ["PIPE"],
        secondary_ckpt_name: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        vae_name: [
          [
            "None",
            "sha256_63aeecb90ff7bc1c115395962d3e803571385b61938377bc7089b36e81e92e2e.safetensors",
            "sha256_735e4c3a447a3255760d7f86845f09f937809baa529c17370d83e4c3758f3c75.safetensors",
            "vae.safetensors",
          ],
        ],
        upscaler_name: [
          [
            "None",
            "sha256_e1a73bd89c2da1ae494774746398689048b5a892bd9653e146713f9df8bca86a.pth",
            "upscale_models.safetensors",
          ],
        ],
        secondary_upscaler_name: [
          [
            "None",
            "sha256_e1a73bd89c2da1ae494774746398689048b5a892bd9653e146713f9df8bca86a.pth",
            "upscale_models.safetensors",
          ],
        ],
        lora_1_name: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        lora_2_name: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        lora_3_name: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
      },
    },
    output: ["PIPE"],
    output_is_list: [false],
    output_name: ["PIPE"],
    name: "AV_CheckpointModelsToParametersPipe",
    display_name: "Checkpoint Models to Pipe",
    description: "",
    category: "Art Venture/Parameters",
    output_node: false,
  },
  AV_PromptsToParametersPipe: {
    input: {
      required: {
        positive: [
          "STRING",
          {
            multiline: true,
            default: "Positive",
          },
        ],
        negative: [
          "STRING",
          {
            multiline: true,
            default: "Negative",
          },
        ],
      },
      optional: {
        pipe: ["PIPE"],
        image: ["IMAGE"],
        mask: ["MASK"],
      },
    },
    output: ["PIPE"],
    output_is_list: [false],
    output_name: ["PIPE"],
    name: "AV_PromptsToParametersPipe",
    display_name: "Prompts to Pipe",
    description: "",
    category: "Art Venture/Parameters",
    output_node: false,
  },
  AV_ParametersPipeToCheckpointModels: {
    input: {
      required: {
        pipe: ["PIPE"],
      },
    },
    output: [
      "PIPE",
      "CHECKPOINT_NAME",
      "CHECKPOINT_NAME",
      "VAE_NAME",
      "UPSCALER_NAME",
      "UPSCALER_NAME",
      "LORA_NAME",
      "LORA_NAME",
      "LORA_NAME",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "pipe",
      "ckpt_name",
      "secondary_ckpt_name",
      "vae_name",
      "upscaler_name",
      "secondary_upscaler_name",
      "lora_1_name",
      "lora_2_name",
      "lora_3_name",
    ],
    name: "AV_ParametersPipeToCheckpointModels",
    display_name: "Pipe to Checkpoint Models",
    description: "",
    category: "Art Venture/Parameters",
    output_node: false,
  },
  AV_ParametersPipeToPrompts: {
    input: {
      required: {
        pipe: ["PIPE"],
      },
    },
    output: ["PIPE", "STRING", "STRING", "IMAGE", "MASK"],
    output_is_list: [false, false, false, false, false],
    output_name: ["pipe", "positive", "negative", "image", "mask"],
    name: "AV_ParametersPipeToPrompts",
    display_name: "Pipe to Prompts",
    description: "",
    category: "Art Venture/Parameters",
    output_node: false,
  },
  AV_VAELoader: {
    input: {
      required: {
        vae_name: [
          [
            "sha256_63aeecb90ff7bc1c115395962d3e803571385b61938377bc7089b36e81e92e2e.safetensors",
            "sha256_735e4c3a447a3255760d7f86845f09f937809baa529c17370d83e4c3758f3c75.safetensors",
            "vae.safetensors",
          ],
        ],
      },
      optional: {
        vae_override: [
          "STRING",
          {
            default: "None",
          },
        ],
      },
    },
    output: ["VAE"],
    output_is_list: [false],
    output_name: ["VAE"],
    name: "AV_VAELoader",
    display_name: "VAE Loader",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_LoraLoader: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_name: [
          [
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
      },
      optional: {
        lora_override: [
          "STRING",
          {
            default: "None",
          },
        ],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP"],
    output_is_list: [false, false],
    output_name: ["MODEL", "CLIP"],
    name: "AV_LoraLoader",
    display_name: "Lora Loader",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_LoraListLoader: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        data: [
          "STRING",
          {
            default: "",
            multiline: true,
            dynamicPrompts: false,
          },
        ],
      },
      optional: {
        base_url: [
          "STRING",
          {
            default: "https://cdn.protogaia.com",
          },
        ],
      },
    },
    output: ["MODEL", "CLIP"],
    output_is_list: [false, false],
    output_name: ["MODEL", "CLIP"],
    name: "AV_LoraListLoader",
    display_name: "Lora List Loader",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_LoraListStacker: {
    input: {
      required: {
        data: [
          "STRING",
          {
            default: "",
            multiline: true,
            dynamicPrompts: false,
          },
        ],
      },
      optional: {
        base_url: [
          "STRING",
          {
            default: "https://cdn.protogaia.com",
          },
        ],
        lora_stack: ["LORA_STACK"],
      },
    },
    output: ["LORA_STACK"],
    output_is_list: [false],
    output_name: ["LORA_STACK"],
    name: "AV_LoraListStacker",
    display_name: "Lora List Stacker",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_CheckpointMerge: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        model1_weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 1,
            step: 0.01,
          },
        ],
        model2_weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "AV_CheckpointMerge",
    display_name: "Checkpoint Merge",
    description: "",
    category: "Art Venture/Model Merging",
    output_node: false,
  },
  AV_CheckpointSave: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        filename_prefix: [
          "STRING",
          {
            default: "checkpoints/ComfyUI",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
      optional: {
        dtype: [
          ["float16", "float32"],
          {
            default: "float16",
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "AV_CheckpointSave",
    display_name: "Checkpoint Save",
    description: "",
    category: "Art Venture/Model Merging",
    output_node: true,
  },
  LoadImageFromUrl: {
    input: {
      required: {},
      optional: {
        image: [
          "STRING",
          {
            default: "",
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        keep_alpha_channel: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        output_mode: [
          "BOOLEAN",
          {
            default: false,
            label_on: "list",
            label_off: "batch",
          },
        ],
        url: [
          "STRING",
          {
            default: "",
            multiline: true,
            dynamicPrompts: false,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK", "BOOLEAN"],
    output_is_list: [true, true, false],
    output_name: ["images", "masks", "has_image"],
    name: "LoadImageFromUrl",
    display_name: "Load Image From URL",
    description: "",
    category: "Art Venture/Image",
    output_node: false,
  },
  LoadImageAsMaskFromUrl: {
    input: {
      required: {
        image: [
          "STRING",
          {
            default: "",
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        channel: [["alpha", "red", "green", "blue"]],
      },
    },
    output: ["MASK"],
    output_is_list: [true, true, false],
    output_name: ["masks"],
    name: "LoadImageAsMaskFromUrl",
    display_name: "Load Image (as Mask) From URL",
    description: "",
    category: "Art Venture/Image",
    output_node: false,
  },
  StringToInt: {
    input: {
      required: {
        string: [
          "STRING",
          {
            default: "0",
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "StringToInt",
    display_name: "String to Int",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  StringToNumber: {
    input: {
      required: {
        string: [
          "STRING",
          {
            default: "0",
          },
        ],
        rounding: [
          ["round", "floor", "ceil"],
          {
            default: "round",
          },
        ],
      },
    },
    output: ["INT", "FLOAT"],
    output_is_list: [false, false],
    output_name: ["INT", "FLOAT"],
    name: "StringToNumber",
    display_name: "String to Number",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  BooleanPrimitive: {
    input: {
      required: {
        value: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        reverse: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["BOOLEAN", "STRING"],
    output_is_list: [false, false],
    output_name: ["BOOLEAN", "STRING"],
    name: "BooleanPrimitive",
    display_name: "Boolean",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageMuxer: {
    input: {
      required: {
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
        input_selector: [
          "INT",
          {
            default: 0,
          },
        ],
      },
      optional: {
        image_3: ["IMAGE"],
        image_4: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageMuxer",
    display_name: "Image Muxer",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageScaleDown: {
    input: {
      required: {
        images: ["IMAGE"],
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 8192,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 8192,
            step: 1,
          },
        ],
        crop: [["disabled", "center"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageScaleDown",
    display_name: "Scale Down",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageScaleDownBy: {
    input: {
      required: {
        images: ["IMAGE"],
        scale_by: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.01,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageScaleDownBy",
    display_name: "Scale Down By",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageScaleDownToSize: {
    input: {
      required: {
        images: ["IMAGE"],
        size: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 8192,
            step: 1,
          },
        ],
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "max",
            label_off: "min",
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageScaleDownToSize",
    display_name: "Scale Down To Size",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageScaleToMegapixels: {
    input: {
      required: {
        images: ["IMAGE"],
        megapixels: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.05,
          },
        ],
      },
      optional: {
        upscale_model_opt: ["UPSCALE_MODEL"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageScaleToMegapixels",
    display_name: "Scale To Megapixels",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageAlphaComposite: {
    input: {
      required: {
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageAlphaComposite",
    display_name: "Image Alpha Composite",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageGaussianBlur: {
    input: {
      required: {
        images: ["IMAGE"],
        radius: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 100,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageGaussianBlur",
    display_name: "Image Gaussian Blur",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageRepeat: {
    input: {
      required: {
        images: ["IMAGE"],
        amount: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1024,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageRepeat",
    display_name: "Repeat Images",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageExtractChannel: {
    input: {
      required: {
        images: ["IMAGE"],
        channel: [["R", "G", "B", "A"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["channel_data"],
    name: "ImageExtractChannel",
    display_name: "Image Extract Channel",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  ImageApplyChannel: {
    input: {
      required: {
        images: ["IMAGE"],
        channel_data: ["MASK"],
        channel: [["R", "G", "B", "A"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageApplyChannel",
    display_name: "Image Apply Channel",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  QRCodeGenerator: {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
        size: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
            step: 64,
          },
        ],
        qr_version: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 40,
            step: 1,
          },
        ],
        error_correction: [
          ["L", "M", "Q", "H"],
          {
            default: "H",
          },
        ],
        box_size: [
          "INT",
          {
            default: 10,
            min: 1,
            max: 100,
            step: 1,
          },
        ],
        border: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "QRCodeGenerator",
    display_name: "QR Code Generator",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  DependenciesEdit: {
    input: {
      required: {
        dependencies: ["DEPENDENCIES"],
      },
      optional: {
        ckpt_name: [
          [
            "Original",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        vae_name: [
          [
            "Original",
            "Baked VAE",
            "sha256_63aeecb90ff7bc1c115395962d3e803571385b61938377bc7089b36e81e92e2e.safetensors",
            "sha256_735e4c3a447a3255760d7f86845f09f937809baa529c17370d83e4c3758f3c75.safetensors",
            "vae.safetensors",
          ],
        ],
        clip: ["CLIP"],
        clip_skip: [
          "INT",
          {
            default: 0,
            min: -24,
            max: 0,
            step: 1,
          },
        ],
        positive: [
          "STRING",
          {
            default: "Original",
            multiline: true,
          },
        ],
        negative: [
          "STRING",
          {
            default: "Original",
            multiline: true,
          },
        ],
        lora_stack: ["LORA_STACK"],
        cnet_stack: ["CONTROL_NET_STACK"],
      },
    },
    output: ["DEPENDENCIES"],
    output_is_list: [false],
    output_name: ["DEPENDENCIES"],
    name: "DependenciesEdit",
    display_name: "Dependencies Edit",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  AspectRatioSelector: {
    input: {
      required: {
        aspect_ratio: [["1:1", "2:3", "3:4", "9:16", "3:2", "4:3", "16:9"]],
      },
    },
    output: ["STRING", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["ratio", "width", "height"],
    name: "AspectRatioSelector",
    display_name: "Aspect Ratio",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  SDXLAspectRatioSelector: {
    input: {
      required: {
        aspect_ratio: [
          [
            "1:1",
            "2:3",
            "3:4",
            "5:8",
            "9:16",
            "9:19",
            "9:21",
            "3:2",
            "4:3",
            "8:5",
            "16:9",
            "19:9",
            "21:9",
          ],
        ],
      },
    },
    output: ["STRING", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["ratio", "width", "height"],
    name: "SDXLAspectRatioSelector",
    display_name: "SDXL Aspect Ratio",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  SeedSelector: {
    input: {
      required: {
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "random",
            label_off: "fixed",
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        fixed_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["seed"],
    name: "SeedSelector",
    display_name: "Seed Selector",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  CheckpointNameSelector: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: [
      [
        "checkpoints.safetensors",
        "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
        "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
        "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
        "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
        "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
        "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
        "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
        "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
        "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
        "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
        "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
        "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
        "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
        "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
        "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
        "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
        "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
      ],
      "STRING",
    ],
    output_is_list: [false, false],
    output_name: ["ckpt_name", "ckpt_name_str"],
    name: "CheckpointNameSelector",
    display_name: "Checkpoint Name Selector",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  LoadJsonFromUrl: {
    input: {
      required: {
        url: [
          "STRING",
          {
            default: "",
          },
        ],
      },
      optional: {
        print_to_console: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["JSON"],
    output_is_list: [false],
    output_name: ["JSON"],
    name: "LoadJsonFromUrl",
    display_name: "Load JSON From URL",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  GetObjectFromJson: {
    input: {
      required: {
        json: ["JSON"],
        key: [
          "STRING",
          {
            default: "",
          },
        ],
      },
    },
    output: ["JSON"],
    output_is_list: [false],
    output_name: ["JSON"],
    name: "GetObjectFromJson",
    display_name: "Get Object From JSON",
    description: "",
    category: "Art Venture/Utils",
    output_node: true,
  },
  GetTextFromJson: {
    input: {
      required: {
        json: ["JSON"],
        key: [
          "STRING",
          {
            default: "",
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "GetTextFromJson",
    display_name: "Get Text From JSON",
    description: "",
    category: "Art Venture/Utils",
    output_node: true,
  },
  GetFloatFromJson: {
    input: {
      required: {
        json: ["JSON"],
        key: [
          "STRING",
          {
            default: "",
          },
        ],
      },
    },
    output: ["FLOAT"],
    output_is_list: [false],
    output_name: ["FLOAT"],
    name: "GetFloatFromJson",
    display_name: "Get Float From JSON",
    description: "",
    category: "Art Venture/Utils",
    output_node: true,
  },
  GetIntFromJson: {
    input: {
      required: {
        json: ["JSON"],
        key: [
          "STRING",
          {
            default: "",
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "GetIntFromJson",
    display_name: "Get Int From JSON",
    description: "",
    category: "Art Venture/Utils",
    output_node: true,
  },
  GetBoolFromJson: {
    input: {
      required: {
        json: ["JSON"],
        key: [
          "STRING",
          {
            default: "",
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "GetBoolFromJson",
    display_name: "Get Bool From JSON",
    description: "",
    category: "Art Venture/Utils",
    output_node: true,
  },
  RandomInt: {
    input: {
      required: {
        min: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        max: [
          "INT",
          {
            default: 100,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["INT", "STRING"],
    name: "RandomInt",
    display_name: "Random Int",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  RandomFloat: {
    input: {
      required: {
        min: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        max: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["FLOAT", "STRING"],
    output_is_list: [false, false],
    output_name: ["FLOAT", "STRING"],
    name: "RandomFloat",
    display_name: "Random Float",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  NumberScaler: {
    input: {
      required: {
        min: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        max: [
          "FLOAT",
          {
            default: 10,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        scale_to_min: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        scale_to_max: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        value: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["FLOAT"],
    output_is_list: [false],
    output_name: ["FLOAT"],
    name: "NumberScaler",
    display_name: "Number Scaler",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  MergeModels: {
    input: {
      required: {
        model1: ["MODEL"],
        model2: ["MODEL"],
        ratio: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "MergeModels",
    display_name: "Merge Models",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  SDXLPromptStyler: {
    input: {
      required: {
        text_positive: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
        text_negative: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
        style: [
          [
            "base",
            "3d-model",
            "analog film",
            "anime",
            "cinematic",
            "comic book",
            "craft clay",
            "digital art",
            "enhance",
            "fantasy art",
            "isometric",
            "line art",
            "lowpoly",
            "neonpunk",
            "origami",
            "photographic",
            "pixel art",
            "texture",
            "ads-advertising",
            "ads-automotive",
            "ads-corporate",
            "ads-fashion editorial",
            "ads-food photography",
            "ads-gourmet food photography",
            "ads-luxury",
            "ads-real estate",
            "ads-retail",
            "artstyle-abstract",
            "artstyle-abstract expressionism",
            "artstyle-art deco",
            "artstyle-art nouveau",
            "artstyle-constructivist",
            "artstyle-cubist",
            "artstyle-expressionist",
            "artstyle-graffiti",
            "artstyle-hyperrealism",
            "artstyle-impressionist",
            "artstyle-pointillism",
            "artstyle-pop art",
            "artstyle-psychedelic",
            "artstyle-renaissance",
            "artstyle-steampunk",
            "artstyle-surrealist",
            "artstyle-typography",
            "artstyle-watercolor",
            "futuristic-biomechanical",
            "futuristic-biomechanical cyberpunk",
            "futuristic-cybernetic",
            "futuristic-cybernetic robot",
            "futuristic-cyberpunk cityscape",
            "futuristic-futuristic",
            "futuristic-retro cyberpunk",
            "futuristic-retro futurism",
            "futuristic-sci-fi",
            "futuristic-vaporwave",
            "game-bubble bobble",
            "game-cyberpunk game",
            "game-fighting game",
            "game-gta",
            "game-mario",
            "game-minecraft",
            "game-pokemon",
            "game-retro arcade",
            "game-retro game",
            "game-rpg fantasy game",
            "game-strategy game",
            "game-streetfighter",
            "game-zelda",
            "misc-architectural",
            "misc-disco",
            "misc-dreamscape",
            "misc-dystopian",
            "misc-fairy tale",
            "misc-gothic",
            "misc-grunge",
            "misc-horror",
            "misc-kawaii",
            "misc-lovecraftian",
            "misc-macabre",
            "misc-manga",
            "misc-metropolis",
            "misc-minimalist",
            "misc-monochrome",
            "misc-nautical",
            "misc-space",
            "misc-stained glass",
            "misc-techwear fashion",
            "misc-tribal",
            "misc-zentangle",
            "papercraft-collage",
            "papercraft-flat papercut",
            "papercraft-kirigami",
            "papercraft-paper mache",
            "papercraft-paper quilling",
            "papercraft-papercut collage",
            "papercraft-papercut shadow box",
            "papercraft-stacked papercut",
            "papercraft-thick layered papercut",
            "photo-alien",
            "photo-film noir",
            "photo-glamour",
            "photo-hdr",
            "photo-iphone photographic",
            "photo-long exposure",
            "photo-neon noir",
            "photo-silhouette",
            "photo-tilt-shift",
          ],
        ],
        log_prompt: [
          ["No", "Yes"],
          {
            default: "No",
          },
        ],
      },
      optional: {
        style_name: [
          "STRING",
          {
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["positive_prompt_text_g", "negative_prompt_text_g"],
    name: "SDXLPromptStyler",
    display_name: "SDXL Prompt Styler",
    description: "",
    category: "utils",
    output_node: false,
  },
  BLIPLoader: {
    input: {
      required: {
        model_name: [[]],
      },
    },
    output: ["BLIP_MODEL"],
    output_is_list: [false],
    output_name: ["BLIP_MODEL"],
    name: "BLIPLoader",
    display_name: "BLIP Loader",
    description: "",
    category: "Art Venture/Captioning",
    output_node: false,
  },
  BLIPCaption: {
    input: {
      required: {
        image: ["IMAGE"],
        min_length: [
          "INT",
          {
            default: 24,
            min: 0,
            max: 200,
            step: 1,
          },
        ],
        max_length: [
          "INT",
          {
            default: 48,
            min: 0,
            max: 200,
            step: 1,
          },
        ],
      },
      optional: {
        device_mode: [["AUTO", "Prefer GPU", "CPU"]],
        prefix: [
          "STRING",
          {
            default: "",
          },
        ],
        suffix: [
          "STRING",
          {
            default: "",
          },
        ],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        blip_model: ["BLIP_MODEL"],
      },
    },
    output: ["STRING"],
    output_is_list: [true],
    output_name: ["caption"],
    name: "BLIPCaption",
    display_name: "BLIP Caption",
    description: "",
    category: "Art Venture/Captioning",
    output_node: false,
  },
  DeepDanbooruCaption: {
    input: {
      required: {
        image: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sort_alpha: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        use_spaces: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        escape: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        filter_tags: [
          "STRING",
          {
            default: "blacklist",
            multiline: true,
          },
        ],
      },
      optional: {
        device_mode: [["AUTO", "Prefer GPU", "CPU"]],
        prefix: [
          "STRING",
          {
            default: "",
          },
        ],
        suffix: [
          "STRING",
          {
            default: "",
          },
        ],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [true],
    output_name: ["caption"],
    name: "DeepDanbooruCaption",
    display_name: "Deep Danbooru Caption",
    description: "",
    category: "Art Venture/Utils",
    output_node: false,
  },
  Fooocus_KSampler: {
    input: {
      required: {
        model: ["MODEL"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        latent_image: ["LATENT"],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        sharpness: [
          "FLOAT",
          {
            default: 2,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "Fooocus_KSampler",
    display_name: "KSampler Fooocus",
    description: "",
    category: "Art Venture/Sampling",
    output_node: false,
  },
  Fooocus_KSamplerAdvanced: {
    input: {
      required: {
        model: ["MODEL"],
        add_noise: [["enable", "disable"]],
        noise_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        latent_image: ["LATENT"],
        start_at_step: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10000,
          },
        ],
        end_at_step: [
          "INT",
          {
            default: 10000,
            min: 0,
            max: 10000,
          },
        ],
        return_with_leftover_noise: [["disable", "enable"]],
      },
      optional: {
        sharpness: [
          "FLOAT",
          {
            default: 2,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "Fooocus_KSamplerAdvanced",
    display_name: "KSampler Adv. Fooocus",
    description: "",
    category: "Art Venture/Sampling",
    output_node: false,
  },
  ColorBlend: {
    input: {
      required: {
        bw_layer: ["IMAGE"],
        color_layer: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ColorBlend",
    display_name: "Color Blend",
    description: "",
    category: "Art Venture/Post Processing",
    output_node: false,
  },
  ColorCorrect: {
    input: {
      required: {
        image: ["IMAGE"],
        temperature: [
          "FLOAT",
          {
            default: 0,
            min: -100,
            max: 100,
            step: 5,
          },
        ],
        hue: [
          "FLOAT",
          {
            default: 0,
            min: -90,
            max: 90,
            step: 5,
          },
        ],
        brightness: [
          "FLOAT",
          {
            default: 0,
            min: -100,
            max: 100,
            step: 5,
          },
        ],
        contrast: [
          "FLOAT",
          {
            default: 0,
            min: -100,
            max: 100,
            step: 5,
          },
        ],
        saturation: [
          "FLOAT",
          {
            default: 0,
            min: -100,
            max: 100,
            step: 5,
          },
        ],
        gamma: [
          "FLOAT",
          {
            default: 1,
            min: 0.2,
            max: 2.2,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ColorCorrect",
    display_name: "Color Correct",
    description: "",
    category: "Art Venture/Post Processing",
    output_node: false,
  },
  AV_ControlNetLoader: {
    input: {
      required: {
        control_net_name: [
          [
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
      },
      optional: {
        control_net_override: [
          "STRING",
          {
            default: "None",
          },
        ],
        timestep_keyframe: ["TIMESTEP_KEYFRAME"],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "AV_ControlNetLoader",
    display_name: "ControlNet Loader",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_ControlNetEfficientLoader: {
    input: {
      required: {
        control_net_name: [
          [
            "None",
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        conditioning: ["CONDITIONING"],
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        preprocessor: [
          [
            "None",
            "canny",
            "lineart",
            "lineart_coarse",
            "lineart_anime",
            "lineart_manga",
            "scribble",
            "scribble_hed",
            "hed",
            "hed_safe",
            "pidi",
            "pidi_safe",
            "mlsd",
            "openpose",
            "pose",
            "dwpose",
            "normalmap_bae",
            "normalmap_midas",
            "depth_midas",
            "depth",
            "depth_zoe",
            "seg_ofcoco",
            "seg_ofade20k",
            "seg_ufade20k",
            "tile",
          ],
        ],
      },
      optional: {
        control_net_override: [
          "STRING",
          {
            default: "None",
          },
        ],
        timestep_keyframe: ["TIMESTEP_KEYFRAME"],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
            step: 64,
          },
        ],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "AV_ControlNetEfficientLoader",
    display_name: "ControlNet Loader",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_ControlNetEfficientLoaderAdvanced: {
    input: {
      required: {
        control_net_name: [
          [
            "None",
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        preprocessor: [
          [
            "None",
            "canny",
            "lineart",
            "lineart_coarse",
            "lineart_anime",
            "lineart_manga",
            "scribble",
            "scribble_hed",
            "hed",
            "hed_safe",
            "pidi",
            "pidi_safe",
            "mlsd",
            "openpose",
            "pose",
            "dwpose",
            "normalmap_bae",
            "normalmap_midas",
            "depth_midas",
            "depth",
            "depth_zoe",
            "seg_ofcoco",
            "seg_ofade20k",
            "seg_ufade20k",
            "tile",
          ],
        ],
      },
      optional: {
        control_net_override: [
          "STRING",
          {
            default: "None",
          },
        ],
        timestep_keyframe: ["TIMESTEP_KEYFRAME"],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
            step: 64,
          },
        ],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["positive", "negative"],
    name: "AV_ControlNetEfficientLoaderAdvanced",
    display_name: "ControlNet Loader Adv.",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_ControlNetEfficientStacker: {
    input: {
      required: {
        control_net_name: [
          [
            "None",
            "Auto: sd15",
            "Auto: sdxl",
            "Auto: sdxl_t2i",
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        preprocessor: [
          [
            "None",
            "canny",
            "lineart",
            "lineart_coarse",
            "lineart_anime",
            "lineart_manga",
            "scribble",
            "scribble_hed",
            "hed",
            "hed_safe",
            "pidi",
            "pidi_safe",
            "mlsd",
            "openpose",
            "pose",
            "dwpose",
            "normalmap_bae",
            "normalmap_midas",
            "depth_midas",
            "depth",
            "depth_zoe",
            "seg_ofcoco",
            "seg_ofade20k",
            "seg_ufade20k",
            "tile",
          ],
        ],
      },
      optional: {
        cnet_stack: ["CONTROL_NET_STACK"],
        control_net_override: [
          "STRING",
          {
            default: "None",
          },
        ],
        timestep_keyframe: ["TIMESTEP_KEYFRAME"],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
            step: 64,
          },
        ],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["CONTROL_NET_STACK"],
    output_is_list: [false],
    output_name: ["CNET_STACK"],
    name: "AV_ControlNetEfficientStacker",
    display_name: "ControlNet Stacker Adv.",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_ControlNetEfficientStackerSimple: {
    input: {
      required: {
        control_net_name: [
          [
            "None",
            "Auto: sd15",
            "Auto: sdxl",
            "Auto: sdxl_t2i",
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        preprocessor: [
          [
            "None",
            "canny",
            "lineart",
            "lineart_coarse",
            "lineart_anime",
            "lineart_manga",
            "scribble",
            "scribble_hed",
            "hed",
            "hed_safe",
            "pidi",
            "pidi_safe",
            "mlsd",
            "openpose",
            "pose",
            "dwpose",
            "normalmap_bae",
            "normalmap_midas",
            "depth_midas",
            "depth",
            "depth_zoe",
            "seg_ofcoco",
            "seg_ofade20k",
            "seg_ufade20k",
            "tile",
          ],
        ],
      },
      optional: {
        cnet_stack: ["CONTROL_NET_STACK"],
        control_net_override: [
          "STRING",
          {
            default: "None",
          },
        ],
        timestep_keyframe: ["TIMESTEP_KEYFRAME"],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
            step: 64,
          },
        ],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["CONTROL_NET_STACK"],
    output_is_list: [false],
    output_name: ["CNET_STACK"],
    name: "AV_ControlNetEfficientStackerSimple",
    display_name: "ControlNet Stacker",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_ControlNetPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
        preprocessor: [
          [
            "None",
            "tile",
            "canny",
            "lineart",
            "lineart_coarse",
            "lineart_anime",
            "lineart_manga",
            "scribble",
            "scribble_hed",
            "hed",
            "hed_safe",
            "pidi",
            "pidi_safe",
            "mlsd",
            "openpose",
            "pose",
            "dwpose",
            "normalmap_bae",
            "normalmap_midas",
            "depth_midas",
            "depth",
            "depth_zoe",
            "seg_ofcoco",
            "seg_ofade20k",
            "seg_ufade20k",
            "tile",
          ],
        ],
        sd_version: [["sd15", "sdxl", "sdxl_t2i"]],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
            step: 64,
          },
        ],
        preprocessor_override: [
          "STRING",
          {
            default: "None",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "CNET_NAME"],
    name: "AV_ControlNetPreprocessor",
    display_name: "ControlNet Preprocessor",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_IPAdapter: {
    input: {
      required: {
        ip_adapter_name: [
          [
            "None",
            "ip-adapter-full-face_sd15.safetensors",
            "ip-adapter-plus-face_sd15.safetensors",
            "ip-adapter-plus-face_sdxl_vit-h.safetensors",
            "ip-adapter-plus_sd15.safetensors",
            "ip-adapter-plus_sdxl_vit-h.safetensors",
            "ip-adapter_sd15.safetensors",
            "ip-adapter_sd15_light_v11.bin",
            "ip-adapter_sd15_vit-G.safetensors",
            "ip-adapter_sdxl.safetensors",
            "ip-adapter_sdxl_vit-h.safetensors",
          ],
        ],
        clip_name: [
          [
            "None",
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "CLIP-ViT-bigG-14-laion2B-39B-b160k.safetensors",
            "clip_vision.safetensors",
            "sha256_036e6e2bd49697511f4f8b8cb5ee465f93025f7a69a145eadeb9a881ace9b18d.safetensors",
            "sha256_3d3ec1e66737f77a4f3bc2df3c52eacefc69ce7825e2784183b1d4e9877d9193.bin",
          ],
        ],
        model: ["MODEL"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        noise: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        ip_adapter_opt: ["IPADAPTER"],
        clip_vision_opt: ["CLIP_VISION"],
        attn_mask: ["MASK"],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        weight_type: [
          [
            "standard",
            "prompt is more important",
            "style transfer (SDXL only)",
          ],
          {
            default: "standard",
          },
        ],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["MODEL", "IPADAPTER", "CLIP_VISION"],
    output_is_list: [false, false, false],
    output_name: ["model", "pipeline", "clip_vision"],
    name: "AV_IPAdapter",
    display_name: "IP Adapter Apply",
    description: "",
    category: "Art Venture/IP Adapter",
    output_node: false,
  },
  AV_IPAdapterPipe: {
    input: {
      required: {
        ip_adapter_name: [
          [
            "ip-adapter-full-face_sd15.safetensors",
            "ip-adapter-plus-face_sd15.safetensors",
            "ip-adapter-plus-face_sdxl_vit-h.safetensors",
            "ip-adapter-plus_sd15.safetensors",
            "ip-adapter-plus_sdxl_vit-h.safetensors",
            "ip-adapter_sd15.safetensors",
            "ip-adapter_sd15_light_v11.bin",
            "ip-adapter_sd15_vit-G.safetensors",
            "ip-adapter_sdxl.safetensors",
            "ip-adapter_sdxl_vit-h.safetensors",
          ],
        ],
        clip_name: [
          [
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "CLIP-ViT-bigG-14-laion2B-39B-b160k.safetensors",
            "clip_vision.safetensors",
            "sha256_036e6e2bd49697511f4f8b8cb5ee465f93025f7a69a145eadeb9a881ace9b18d.safetensors",
            "sha256_3d3ec1e66737f77a4f3bc2df3c52eacefc69ce7825e2784183b1d4e9877d9193.bin",
          ],
        ],
      },
    },
    output: ["IPADAPTER"],
    output_is_list: [false],
    output_name: "pipeline",
    name: "AV_IPAdapterPipe",
    display_name: "IP Adapter Pipe",
    description: "",
    category: "Art Venture/IP Adapter",
    output_node: false,
  },
  AV_StyleApply: {
    input: {
      required: {
        model: ["MODEL"],
        preset: [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
          ],
        ],
        data: [
          "STRING",
          {
            placeholder:
              '[{"url": "http://domain/path/image.png", "weight": 1}]',
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        weight: [
          "FLOAT",
          {
            default: 0.5,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer (SDXL)",
            "composition (SDXL)",
          ],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["MODEL", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["MODEL", "IMAGE"],
    name: "AV_StyleApply",
    display_name: "AV Style Apply",
    description: "",
    category: "Art Venture/Style",
    output_node: false,
  },
  ISNetLoader: {
    input: {
      required: {
        model_name: [[]],
        model_override: [
          "STRING",
          {
            default: "None",
          },
        ],
      },
    },
    output: ["ISNET_MODEL"],
    output_is_list: [false],
    output_name: ["ISNET_MODEL"],
    name: "ISNetLoader",
    display_name: "ISNet Loader",
    description: "",
    category: "Art Venture/Segmentation",
    output_node: false,
  },
  ISNetSegment: {
    input: {
      required: {
        images: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        device_mode: [["AUTO", "Prefer GPU", "CPU"]],
        enabled: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        isnet_model: ["ISNET_MODEL"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["segmented", "mask"],
    name: "ISNetSegment",
    display_name: "ISNet Segment",
    description: "",
    category: "Art Venture/Segmentation",
    output_node: false,
  },
  AV_SAMLoader: {
    input: {
      required: {
        model_name: [["sams.safetensors"]],
      },
    },
    output: ["AV_SAM_MODEL"],
    output_is_list: [false],
    output_name: ["sam_model"],
    name: "AV_SAMLoader",
    display_name: "SAM Loader",
    description: "",
    category: "Art Venture/Segmentation",
    output_node: false,
  },
  GetSAMEmbedding: {
    input: {
      required: {
        sam_model: ["AV_SAM_MODEL"],
        image: ["IMAGE"],
      },
      optional: {
        device_mode: [["AUTO", "Prefer GPU", "CPU"]],
      },
    },
    output: ["SAM_EMBEDDING"],
    output_is_list: [false],
    output_name: ["SAM_EMBEDDING"],
    name: "GetSAMEmbedding",
    display_name: "Get SAM Embedding",
    description: "",
    category: "Art Venture/Segmentation",
    output_node: false,
  },
  SAMEmbeddingToImage: {
    input: {
      required: {
        embedding: ["SAM_EMBEDDING"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "SAMEmbeddingToImage",
    display_name: "SAM Embedding to Image",
    description: "",
    category: "Art Venture/Segmentation",
    output_node: false,
  },
  LaMaInpaint: {
    input: {
      required: {
        image: ["IMAGE"],
        mask: ["MASK"],
      },
      optional: {
        device_mode: [["AUTO", "Prefer GPU", "CPU"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "LaMaInpaint",
    display_name: "LaMa Remove Object",
    description: "",
    category: "Art Venture/Inpainting",
    output_node: false,
  },
  PrepareImageAndMaskForInpaint: {
    input: {
      required: {
        image: ["IMAGE"],
        mask: ["MASK"],
        mask_blur: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 64,
          },
        ],
        inpaint_masked: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        mask_padding: [
          "INT",
          {
            default: 32,
            min: 0,
            max: 256,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK", "IMAGE", "CROP_REGION"],
    output_is_list: [false, false, false, false],
    output_name: [
      "inpaint_image",
      "inpaint_mask",
      "overlay_image",
      "crop_region",
    ],
    name: "PrepareImageAndMaskForInpaint",
    display_name: "Prepare Image & Mask for Inpaint",
    description: "",
    category: "Art Venture/Inpainting",
    output_node: false,
  },
  OverlayInpaintedLatent: {
    input: {
      required: {
        original: ["LATENT"],
        inpainted: ["LATENT"],
        mask: ["MASK"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "OverlayInpaintedLatent",
    display_name: "Overlay Inpainted Latent",
    description: "",
    category: "Art Venture/Inpainting",
    output_node: false,
  },
  OverlayInpaintedImage: {
    input: {
      required: {
        inpainted: ["IMAGE"],
        overlay_image: ["IMAGE"],
        crop_region: ["CROP_REGION"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "OverlayInpaintedImage",
    display_name: "Overlay Inpainted Image",
    description: "",
    category: "Art Venture/Inpainting",
    output_node: false,
  },
  LoadVideoFromUrl: {
    input: {
      required: {
        video: [
          "STRING",
          {
            default: "",
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        force_rate: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 60,
            step: 1,
          },
        ],
        force_size: [
          [
            "Disabled",
            "Custom Height",
            "Custom Width",
            "Custom",
            "256x?",
            "?x256",
            "256x256",
            "512x?",
            "?x512",
            "512x512",
          ],
        ],
        custom_width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        custom_height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        frame_load_cap: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        skip_first_frames: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        select_every_nth: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
      optional: {
        meta_batch: ["VHS_BatchManager"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["IMAGE", "INT", "BOOLEAN"],
    output_is_list: [true, true, false],
    output_name: ["frames", "frame_count", "has_video"],
    name: "LoadVideoFromUrl",
    display_name: "Load Video From Url",
    description: "",
    category: "Art Venture/Loaders",
    output_node: false,
  },
  AV_FaceDetailer: {
    input: {
      required: {
        image: ["IMAGE"],
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        bbox_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        bbox_crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
        sam_detection_hint: [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none",
          ],
        ],
        sam_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        sam_threshold: [
          "FLOAT",
          {
            default: 0.93,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sam_bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        sam_mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sam_mask_hint_use_negative: [["False", "Small", "Outter"]],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        bbox_detector: ["BBOX_DETECTOR"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        sam_model_opt: ["SAM_MODEL"],
        segm_detector_opt: ["SEGM_DETECTOR"],
        detailer_hook: ["DETAILER_HOOK"],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
        enabled: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE", "MASK", "DETAILER_PIPE", "IMAGE"],
    output_is_list: [false, true, true, false, false, true],
    output_name: [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "mask",
      "detailer_pipe",
      "cnet_images",
    ],
    name: "AV_FaceDetailer",
    display_name: "FaceDetailer (AV)",
    description: "",
    category: "ArtVenture/Detailer",
    output_node: false,
  },
  AV_FaceDetailerPipe: {
    input: {
      required: {
        image: ["IMAGE"],
        detailer_pipe: ["DETAILER_PIPE"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        bbox_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        bbox_crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
        sam_detection_hint: [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none",
          ],
        ],
        sam_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        sam_threshold: [
          "FLOAT",
          {
            default: 0.93,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sam_bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        sam_mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sam_mask_hint_use_negative: [["False", "Small", "Outter"]],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        refiner_ratio: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
        enabled: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE", "MASK", "DETAILER_PIPE", "IMAGE"],
    output_is_list: [false, true, true, false, false, true],
    output_name: [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "mask",
      "detailer_pipe",
      "cnet_images",
    ],
    name: "AV_FaceDetailerPipe",
    display_name: "FaceDetailerPipe (AV)",
    description: "",
    category: "ArtVenture/Detailer",
    output_node: false,
  },
  AV_OpenAIApi: {
    input: {
      required: {
        openai_api_key: [
          "STRING",
          {
            multiline: false,
          },
        ],
        endpoint: [
          "STRING",
          {
            multiline: false,
            default: "https://api.openai.com/v1",
          },
        ],
      },
    },
    output: ["LLM_API"],
    output_is_list: [false],
    output_name: ["LLM_API"],
    name: "AV_OpenAIApi",
    display_name: "OpenAI API",
    description: "",
    category: "ArtVenture/LLM",
    output_node: false,
  },
  AV_ClaudeApi: {
    input: {
      required: {
        claude_api_key: [
          "STRING",
          {
            multiline: false,
          },
        ],
        endpoint: [
          "STRING",
          {
            multiline: false,
            default: "https://api.anthropic.com/v1",
          },
        ],
        version: [
          ["2023-06-01"],
          {
            default: "2023-06-01",
          },
        ],
      },
    },
    output: ["LLM_API"],
    output_is_list: [false],
    output_name: ["llm_api"],
    name: "AV_ClaudeApi",
    display_name: "Claude API",
    description: "",
    category: "ArtVenture/LLM",
    output_node: false,
  },
  AV_AwsBedrockClaudeApi: {
    input: {
      required: {
        aws_access_key_id: [
          "STRING",
          {
            multiline: false,
          },
        ],
        aws_secret_access_key: [
          "STRING",
          {
            multiline: false,
          },
        ],
        aws_session_token: [
          "STRING",
          {
            multiline: false,
          },
        ],
        region: [
          [
            "us-east-1",
            "us-west-2",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "eu-central-1",
            "eu-west-3",
            "eu-west-1",
            "ap-south-3",
          ],
          {
            default: "us-east-1",
          },
        ],
        version: [
          ["bedrock-2023-05-31"],
          {
            default: "bedrock-2023-05-31",
          },
        ],
      },
    },
    output: ["LLM_API"],
    output_is_list: [false],
    output_name: ["llm_api"],
    name: "AV_AwsBedrockClaudeApi",
    display_name: "AWS Bedrock Claude API",
    description: "",
    category: "ArtVenture/LLM",
    output_node: false,
  },
  AV_AwsBedrockMistralApi: {
    input: {
      required: {
        aws_access_key_id: [
          "STRING",
          {
            multiline: false,
          },
        ],
        aws_secret_access_key: [
          "STRING",
          {
            multiline: false,
          },
        ],
        aws_session_token: [
          "STRING",
          {
            multiline: false,
          },
        ],
        region: [
          [
            "us-east-1",
            "us-west-2",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "eu-central-1",
            "eu-west-3",
            "eu-west-1",
            "ap-south-3",
          ],
          {
            default: "us-east-1",
          },
        ],
      },
    },
    output: ["LLM_API"],
    output_is_list: [false],
    output_name: ["llm_api"],
    name: "AV_AwsBedrockMistralApi",
    display_name: "AWS Bedrock Mistral API",
    description: "",
    category: "ArtVenture/LLM",
    output_node: false,
  },
  AV_LLMApiConfig: {
    input: {
      required: {
        model: [
          [
            "gpt-3.5-turbo",
            "gpt-3.5-turbo-16k",
            "gpt-4-turbo",
            "gpt-4-vision-preview",
            "gpt-4-turbo-preview",
            "gpt-4-0125-preview",
            "gpt-4-1106-preview",
            "gpt-4-0613",
            "gpt-4",
            "claude-3-opus-20240229",
            "claude-3-sonnet-20240229",
            "claude-3-haiku-20240307",
            "claude-2.1",
            "anthropic.claude-3-haiku-20240307-v1:0",
            "anthropic.claude-3-sonnet-20240229-v1:0",
            "anthropic.claude-3-opus-20240229-v1:0",
            "anthropic.claude-v2",
            "anthropic.claude-v2.1",
            "mistral.mistral-7b-instruct-v0:2",
            "mistral.mixtral-8x7b-instruct-v0:1",
            "mistral.mistral-large-2402-v1:0",
          ],
          {
            default: "gpt-4-turbo",
          },
        ],
        max_token: [
          "INT",
          {
            default: 1024,
          },
        ],
        temperature: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["LLM_CONFIG"],
    output_is_list: [false],
    output_name: ["llm_config"],
    name: "AV_LLMApiConfig",
    display_name: "LLM API Config",
    description: "",
    category: "ArtVenture/LLM",
    output_node: false,
  },
  AV_LLMMessage: {
    input: {
      required: {
        role: [["system", "user", "assistant"]],
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
      },
      optional: {
        image: ["IMAGE"],
        messages: ["LLM_MESSAGE"],
      },
    },
    output: ["LLM_MESSAGE"],
    output_is_list: [false],
    output_name: ["messages"],
    name: "AV_LLMMessage",
    display_name: "LLM Message",
    description: "",
    category: "ArtVenture/LLM",
    output_node: false,
  },
  AV_LLMChat: {
    input: {
      required: {
        messages: ["LLM_MESSAGE"],
        api: ["LLM_API"],
        config: ["LLM_CONFIG"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["response"],
    name: "AV_LLMChat",
    display_name: "LLM Chat",
    description: "",
    category: "ArtVenture/LLM",
    output_node: false,
  },
  AV_LLMCompletion: {
    input: {
      required: {
        prompt: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        api: ["LLM_API"],
        config: ["LLM_CONFIG"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["response"],
    name: "AV_LLMCompletion",
    display_name: "LLM Completion",
    description: "",
    category: "ArtVenture/LLM",
    output_node: false,
  },
  TimestepKeyframe: {
    input: {
      required: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_timestep_kf: ["TIMESTEP_KEYFRAME"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        cn_weights: ["CONTROL_NET_WEIGHTS"],
        latent_keyframe: ["LATENT_KEYFRAME"],
        null_latent_kf_strength: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        inherit_missing: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
        mask_optional: ["MASK"],
      },
    },
    output: ["TIMESTEP_KEYFRAME"],
    output_is_list: [false],
    output_name: ["TIMESTEP_KF"],
    name: "TimestepKeyframe",
    display_name: "Timestep Keyframe 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    output_node: false,
  },
  ACN_TimestepKeyframeInterpolation: {
    input: {
      required: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        strength_start: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        strength_end: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        interpolation: [["linear", "ease-in", "ease-out", "ease-in-out"]],
        intervals: [
          "INT",
          {
            default: 50,
            min: 2,
            max: 100,
            step: 1,
          },
        ],
      },
      optional: {
        prev_timestep_kf: ["TIMESTEP_KEYFRAME"],
        cn_weights: ["CONTROL_NET_WEIGHTS"],
        latent_keyframe: ["LATENT_KEYFRAME"],
        null_latent_kf_strength: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        inherit_missing: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        mask_optional: ["MASK"],
        print_keyframes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["TIMESTEP_KEYFRAME"],
    output_is_list: [false],
    output_name: ["TIMESTEP_KF"],
    name: "ACN_TimestepKeyframeInterpolation",
    display_name: "Timestep Keyframe Interpolation 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    output_node: false,
  },
  ACN_TimestepKeyframeFromStrengthList: {
    input: {
      required: {
        float_strengths: [
          "FLOAT",
          {
            default: -1,
            min: -1,
            step: 0.001,
            forceInput: true,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_timestep_kf: ["TIMESTEP_KEYFRAME"],
        cn_weights: ["CONTROL_NET_WEIGHTS"],
        latent_keyframe: ["LATENT_KEYFRAME"],
        null_latent_kf_strength: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        inherit_missing: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        mask_optional: ["MASK"],
        print_keyframes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["TIMESTEP_KEYFRAME"],
    output_is_list: [false],
    output_name: ["TIMESTEP_KF"],
    name: "ACN_TimestepKeyframeFromStrengthList",
    display_name: "Timestep Keyframe From List 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    output_node: false,
  },
  LatentKeyframe: {
    input: {
      required: {
        batch_index: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
            step: 1,
          },
        ],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_latent_kf: ["LATENT_KEYFRAME"],
      },
    },
    output: ["LATENT_KEYFRAME"],
    output_is_list: [false],
    output_name: ["LATENT_KF"],
    name: "LatentKeyframe",
    display_name: "Latent Keyframe 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    output_node: false,
  },
  LatentKeyframeTiming: {
    input: {
      required: {
        batch_index_from: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
            step: 1,
          },
        ],
        batch_index_to_excl: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
            step: 1,
          },
        ],
        strength_from: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        strength_to: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        interpolation: [["linear", "ease-in", "ease-out", "ease-in-out"]],
      },
      optional: {
        prev_latent_kf: ["LATENT_KEYFRAME"],
        print_keyframes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["LATENT_KEYFRAME"],
    output_is_list: [false],
    output_name: ["LATENT_KF"],
    name: "LatentKeyframeTiming",
    display_name: "Latent Keyframe Interpolation 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    output_node: false,
  },
  LatentKeyframeBatchedGroup: {
    input: {
      required: {
        float_strengths: [
          "FLOAT",
          {
            default: -1,
            min: -1,
            step: 0.001,
            forceInput: true,
          },
        ],
      },
      optional: {
        prev_latent_kf: ["LATENT_KEYFRAME"],
        print_keyframes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["LATENT_KEYFRAME"],
    output_is_list: [false],
    output_name: ["LATENT_KF"],
    name: "LatentKeyframeBatchedGroup",
    display_name: "Latent Keyframe From List 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    output_node: false,
  },
  LatentKeyframeGroup: {
    input: {
      required: {
        index_strengths: [
          "STRING",
          {
            multiline: true,
            default: "",
          },
        ],
      },
      optional: {
        prev_latent_kf: ["LATENT_KEYFRAME"],
        latent_optional: ["LATENT"],
        print_keyframes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["LATENT_KEYFRAME"],
    output_is_list: [false],
    output_name: ["LATENT_KF"],
    name: "LatentKeyframeGroup",
    display_name: "Latent Keyframe Group 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    output_node: false,
  },
  ACN_AdvancedControlNetApply: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        control_net: ["CONTROL_NET"],
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        mask_optional: ["MASK"],
        timestep_kf: ["TIMESTEP_KEYFRAME"],
        latent_kf_override: ["LATENT_KEYFRAME"],
        weights_override: ["CONTROL_NET_WEIGHTS"],
        model_optional: ["MODEL"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "MODEL"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "model_opt"],
    name: "ACN_AdvancedControlNetApply",
    display_name: "Apply Advanced ControlNet 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝",
    output_node: false,
  },
  ControlNetLoaderAdvanced: {
    input: {
      required: {
        control_net_name: [
          [
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
      },
      optional: {
        timestep_keyframe: ["TIMESTEP_KEYFRAME"],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "ControlNetLoaderAdvanced",
    display_name: "Load Advanced ControlNet Model 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝",
    output_node: false,
  },
  DiffControlNetLoaderAdvanced: {
    input: {
      required: {
        model: ["MODEL"],
        control_net_name: [
          [
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
      },
      optional: {
        timestep_keyframe: ["TIMESTEP_KEYFRAME"],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "DiffControlNetLoaderAdvanced",
    display_name: "Load Advanced ControlNet Model (diff) 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝",
    output_node: false,
  },
  ScaledSoftControlNetWeights: {
    input: {
      required: {
        base_multiplier: [
          "FLOAT",
          {
            default: 0.825,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        flip_weights: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        uncond_multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        cn_extras: ["CN_WEIGHTS_EXTRAS"],
      },
    },
    output: ["CONTROL_NET_WEIGHTS", "TIMESTEP_KEYFRAME"],
    output_is_list: [false, false],
    output_name: ["CN_WEIGHTS", "TK_SHORTCUT"],
    name: "ScaledSoftControlNetWeights",
    display_name: "Scaled Soft Weights 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/weights",
    output_node: false,
  },
  ScaledSoftMaskedUniversalWeights: {
    input: {
      required: {
        mask: ["MASK"],
        min_base_multiplier: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        max_base_multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        uncond_multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        cn_extras: ["CN_WEIGHTS_EXTRAS"],
      },
    },
    output: ["CONTROL_NET_WEIGHTS", "TIMESTEP_KEYFRAME"],
    output_is_list: [false, false],
    output_name: ["CN_WEIGHTS", "TK_SHORTCUT"],
    name: "ScaledSoftMaskedUniversalWeights",
    display_name: "Scaled Soft Masked Weights 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/weights",
    output_node: false,
  },
  SoftControlNetWeights: {
    input: {
      required: {
        weight_00: [
          "FLOAT",
          {
            default: 0.09941396206337118,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_01: [
          "FLOAT",
          {
            default: 0.12050177219802567,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_02: [
          "FLOAT",
          {
            default: 0.14606275417942507,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_03: [
          "FLOAT",
          {
            default: 0.17704576264172736,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_04: [
          "FLOAT",
          {
            default: 0.214600924414215,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_05: [
          "FLOAT",
          {
            default: 0.26012233262329093,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_06: [
          "FLOAT",
          {
            default: 0.3152997971191405,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_07: [
          "FLOAT",
          {
            default: 0.3821815722656249,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_08: [
          "FLOAT",
          {
            default: 0.4632503906249999,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_09: [
          "FLOAT",
          {
            default: 0.561515625,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_10: [
          "FLOAT",
          {
            default: 0.6806249999999999,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_11: [
          "FLOAT",
          {
            default: 0.825,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_12: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        flip_weights: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        uncond_multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        cn_extras: ["CN_WEIGHTS_EXTRAS"],
      },
    },
    output: ["CONTROL_NET_WEIGHTS", "TIMESTEP_KEYFRAME"],
    output_is_list: [false, false],
    output_name: ["CN_WEIGHTS", "TK_SHORTCUT"],
    name: "SoftControlNetWeights",
    display_name: "ControlNet Soft Weights 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/weights/ControlNet",
    output_node: false,
  },
  CustomControlNetWeights: {
    input: {
      required: {
        weight_00: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_01: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_02: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_03: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_04: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_05: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_06: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_07: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_08: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_09: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_10: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_11: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_12: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        flip_weights: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        uncond_multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        cn_extras: ["CN_WEIGHTS_EXTRAS"],
      },
    },
    output: ["CONTROL_NET_WEIGHTS", "TIMESTEP_KEYFRAME"],
    output_is_list: [false, false],
    output_name: ["CN_WEIGHTS", "TK_SHORTCUT"],
    name: "CustomControlNetWeights",
    display_name: "ControlNet Custom Weights 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/weights/ControlNet",
    output_node: false,
  },
  SoftT2IAdapterWeights: {
    input: {
      required: {
        weight_00: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_01: [
          "FLOAT",
          {
            default: 0.62,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_02: [
          "FLOAT",
          {
            default: 0.825,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_03: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        flip_weights: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        uncond_multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        cn_extras: ["CN_WEIGHTS_EXTRAS"],
      },
    },
    output: ["CONTROL_NET_WEIGHTS", "TIMESTEP_KEYFRAME"],
    output_is_list: [false, false],
    output_name: ["CN_WEIGHTS", "TK_SHORTCUT"],
    name: "SoftT2IAdapterWeights",
    display_name: "T2IAdapter Soft Weights 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/weights/T2IAdapter",
    output_node: false,
  },
  CustomT2IAdapterWeights: {
    input: {
      required: {
        weight_00: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_01: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_02: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        weight_03: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        flip_weights: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        uncond_multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        cn_extras: ["CN_WEIGHTS_EXTRAS"],
      },
    },
    output: ["CONTROL_NET_WEIGHTS", "TIMESTEP_KEYFRAME"],
    output_is_list: [false, false],
    output_name: ["CN_WEIGHTS", "TK_SHORTCUT"],
    name: "CustomT2IAdapterWeights",
    display_name: "T2IAdapter Custom Weights 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/weights/T2IAdapter",
    output_node: false,
  },
  ACN_DefaultUniversalWeights: {
    input: {
      optional: {
        cn_extras: ["CN_WEIGHTS_EXTRAS"],
      },
    },
    output: ["CONTROL_NET_WEIGHTS", "TIMESTEP_KEYFRAME"],
    output_is_list: [false, false],
    output_name: ["CN_WEIGHTS", "TK_SHORTCUT"],
    name: "ACN_DefaultUniversalWeights",
    display_name: "Default Weights 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/weights",
    output_node: false,
  },
  ACN_SparseCtrlRGBPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
        vae: ["VAE"],
        latent_size: ["LATENT"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["proc_IMAGE"],
    name: "ACN_SparseCtrlRGBPreprocessor",
    display_name: "RGB SparseCtrl 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/preprocess",
    output_node: false,
  },
  ACN_SparseCtrlLoaderAdvanced: {
    input: {
      required: {
        sparsectrl_name: [
          [
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        use_motion: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        motion_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
      },
      optional: {
        sparse_method: ["SPARSE_METHOD"],
        tk_optional: ["TIMESTEP_KEYFRAME"],
        context_aware: [["nearest_hint", "off"]],
        sparse_hint_mult: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        sparse_nonhint_mult: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        sparse_mask_mult: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "ACN_SparseCtrlLoaderAdvanced",
    display_name: "Load SparseCtrl Model 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl",
    output_node: false,
  },
  ACN_SparseCtrlMergedLoaderAdvanced: {
    input: {
      required: {
        sparsectrl_name: [
          [
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        control_net_name: [
          [
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        use_motion: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        motion_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
      },
      optional: {
        sparse_method: ["SPARSE_METHOD"],
        tk_optional: ["TIMESTEP_KEYFRAME"],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "ACN_SparseCtrlMergedLoaderAdvanced",
    display_name: "🧪Load Merged SparseCtrl Model 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/experimental",
    output_node: false,
  },
  ACN_SparseCtrlIndexMethodNode: {
    input: {
      required: {
        indexes: [
          "STRING",
          {
            default: "0",
          },
        ],
      },
    },
    output: ["SPARSE_METHOD"],
    output_is_list: [false],
    output_name: ["SPARSE_METHOD"],
    name: "ACN_SparseCtrlIndexMethodNode",
    display_name: "SparseCtrl Index Method 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl",
    output_node: false,
  },
  ACN_SparseCtrlSpreadMethodNode: {
    input: {
      required: {
        spread: [["uniform", "starting", "ending", "center"]],
      },
    },
    output: ["SPARSE_METHOD"],
    output_is_list: [false],
    output_name: ["SPARSE_METHOD"],
    name: "ACN_SparseCtrlSpreadMethodNode",
    display_name: "SparseCtrl Spread Method 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl",
    output_node: false,
  },
  ACN_SparseCtrlWeightExtras: {
    input: {
      optional: {
        cn_extras: ["CN_WEIGHTS_EXTRAS"],
        sparse_hint_mult: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        sparse_nonhint_mult: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        sparse_mask_mult: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
      },
    },
    output: ["CN_WEIGHTS_EXTRAS"],
    output_is_list: [false],
    output_name: ["cn_extras"],
    name: "ACN_SparseCtrlWeightExtras",
    display_name: "SparseCtrl Weight Extras 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/extras",
    output_node: false,
  },
  ACN_ReferencePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
        vae: ["VAE"],
        latent_size: ["LATENT"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["proc_IMAGE"],
    name: "ACN_ReferencePreprocessor",
    display_name: "Reference Preproccessor 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/Reference/preprocess",
    output_node: false,
  },
  ACN_ReferenceControlNet: {
    input: {
      required: {
        reference_type: [
          ["reference_attn", "reference_adain", "reference_attn+adain"],
        ],
        style_fidelity: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        ref_weight: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "ACN_ReferenceControlNet",
    display_name: "Reference ControlNet 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/Reference",
    output_node: false,
  },
  ACN_ReferenceControlNetFinetune: {
    input: {
      required: {
        attn_style_fidelity: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        attn_ref_weight: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        attn_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        adain_style_fidelity: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        adain_ref_weight: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        adain_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "ACN_ReferenceControlNetFinetune",
    display_name: "Reference ControlNet (Finetune) 🛂🅐🅒🅝",
    description: "",
    category: "Adv-ControlNet 🛂🅐🅒🅝/Reference",
    output_node: false,
  },
  LoadImagesFromDirectory: {
    input: {
      required: {
        directory: [
          "STRING",
          {
            default: "",
          },
        ],
      },
      optional: {
        image_load_cap: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        start_index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK", "INT"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "MASK", "INT"],
    name: "LoadImagesFromDirectory",
    display_name: "🚫Load Images [DEPRECATED] 🛂🅐🅒🅝",
    description: "",
    category: "",
    output_node: false,
  },
  ADE_AnimateDiffLoRALoader: {
    input: {
      required: {
        lora_name: [["animatediff_motion_lora.safetensors"]],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_motion_lora: ["MOTION_LORA"],
      },
    },
    output: ["MOTION_LORA"],
    output_is_list: [false],
    output_name: ["MOTION_LORA"],
    name: "ADE_AnimateDiffLoRALoader",
    display_name: "Load AnimateDiff LoRA 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓",
    output_node: false,
  },
  ADE_AnimateDiffSamplingSettings: {
    input: {
      required: {
        batch_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
        noise_type: [
          ["default", "constant", "empty", "repeated_context", "FreeNoise"],
        ],
        seed_gen: [["comfy", "auto1111"]],
        seed_offset: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
      },
      optional: {
        noise_layers: ["NOISE_LAYERS"],
        iteration_opts: ["ITERATION_OPTS"],
        seed_override: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
            forceInput: true,
          },
        ],
        adapt_denoise_steps: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        custom_cfg: ["CUSTOM_CFG"],
        sigma_schedule: ["SIGMA_SCHEDULE"],
        image_inject: ["IMAGE_INJECT"],
      },
    },
    output: ["SAMPLE_SETTINGS"],
    output_is_list: [false],
    output_name: ["settings"],
    name: "ADE_AnimateDiffSamplingSettings",
    display_name: "Sample Settings 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓",
    output_node: false,
  },
  ADE_AnimateDiffKeyframe: {
    input: {
      required: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_ad_keyframes: ["AD_KEYFRAMES"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
        inherit_missing: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["AD_KEYFRAMES"],
    output_is_list: [false],
    output_name: ["AD_KEYFRAMES"],
    name: "ADE_AnimateDiffKeyframe",
    display_name: "AnimateDiff Keyframe 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓",
    output_node: false,
  },
  ADE_MultivalDynamic: {
    input: {
      required: {
        float_val: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
      },
      optional: {
        mask_optional: ["MASK"],
      },
    },
    output: ["MULTIVAL"],
    output_is_list: [false],
    output_name: ["MULTIVAL"],
    name: "ADE_MultivalDynamic",
    display_name: "Multival Dynamic 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/multival",
    output_node: false,
  },
  ADE_MultivalDynamicFloatInput: {
    input: {
      required: {
        float_val: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
            forceInput: true,
          },
        ],
      },
      optional: {
        mask_optional: ["MASK"],
      },
    },
    output: ["MULTIVAL"],
    output_is_list: [false],
    output_name: ["MULTIVAL"],
    name: "ADE_MultivalDynamicFloatInput",
    display_name: "Multival Dynamic [Float List] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/multival",
    output_node: false,
  },
  ADE_MultivalScaledMask: {
    input: {
      required: {
        min_float_val: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            step: 0.001,
          },
        ],
        max_float_val: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
        mask: ["MASK"],
      },
      optional: {
        scaling: [["absolute", "relative"]],
      },
    },
    output: ["MULTIVAL"],
    output_is_list: [false],
    output_name: ["MULTIVAL"],
    name: "ADE_MultivalScaledMask",
    display_name: "Multival Scaled Mask 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/multival",
    output_node: false,
  },
  ADE_MultivalConvertToMask: {
    input: {
      required: {
        multival: ["MULTIVAL"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ADE_MultivalConvertToMask",
    display_name: "Multival to Mask 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/multival",
    output_node: false,
  },
  ADE_StandardStaticContextOptions: {
    input: {
      required: {
        context_length: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
          },
        ],
        context_overlap: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 128,
          },
        ],
      },
      optional: {
        fuse_method: [
          [
            "pyramid",
            "relative",
            "flat",
            "delayed reverse sawtooth",
            "pyramid-sigma",
            "pyramid-sigma inverse",
            "gauss-sigma",
            "gauss-sigma inverse",
            "random",
          ],
        ],
        use_on_equal_length: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
        prev_context: ["CONTEXT_OPTIONS"],
        view_opts: ["VIEW_OPTS"],
      },
    },
    output: ["CONTEXT_OPTIONS"],
    output_is_list: [false],
    output_name: ["CONTEXT_OPTS"],
    name: "ADE_StandardStaticContextOptions",
    display_name: "Context Options◆Standard Static 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/context opts",
    output_node: false,
  },
  ADE_StandardUniformContextOptions: {
    input: {
      required: {
        context_length: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
          },
        ],
        context_stride: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 32,
          },
        ],
        context_overlap: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 128,
          },
        ],
      },
      optional: {
        fuse_method: [
          [
            "pyramid",
            "flat",
            "delayed reverse sawtooth",
            "pyramid-sigma",
            "pyramid-sigma inverse",
            "gauss-sigma",
            "gauss-sigma inverse",
            "random",
          ],
        ],
        use_on_equal_length: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
        prev_context: ["CONTEXT_OPTIONS"],
        view_opts: ["VIEW_OPTS"],
      },
    },
    output: ["CONTEXT_OPTIONS"],
    output_is_list: [false],
    output_name: ["CONTEXT_OPTS"],
    name: "ADE_StandardUniformContextOptions",
    display_name: "Context Options◆Standard Uniform 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/context opts",
    output_node: false,
  },
  ADE_LoopedUniformContextOptions: {
    input: {
      required: {
        context_length: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
          },
        ],
        context_stride: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 32,
          },
        ],
        context_overlap: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 128,
          },
        ],
        closed_loop: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        fuse_method: [
          [
            "pyramid",
            "flat",
            "delayed reverse sawtooth",
            "pyramid-sigma",
            "pyramid-sigma inverse",
            "gauss-sigma",
            "gauss-sigma inverse",
            "random",
          ],
        ],
        use_on_equal_length: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
        prev_context: ["CONTEXT_OPTIONS"],
        view_opts: ["VIEW_OPTS"],
      },
    },
    output: ["CONTEXT_OPTIONS"],
    output_is_list: [false],
    output_name: ["CONTEXT_OPTS"],
    name: "ADE_LoopedUniformContextOptions",
    display_name: "Context Options◆Looped Uniform 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/context opts",
    output_node: false,
  },
  ADE_ViewsOnlyContextOptions: {
    input: {
      required: {
        view_opts_req: ["VIEW_OPTS"],
      },
      optional: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
        prev_context: ["CONTEXT_OPTIONS"],
      },
    },
    output: ["CONTEXT_OPTIONS"],
    output_is_list: [false],
    output_name: ["CONTEXT_OPTS"],
    name: "ADE_ViewsOnlyContextOptions",
    display_name: "Context Options◆Views Only [VRAM⇈] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/context opts",
    output_node: false,
  },
  ADE_BatchedContextOptions: {
    input: {
      required: {
        context_length: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
          },
        ],
      },
      optional: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
        prev_context: ["CONTEXT_OPTIONS"],
      },
    },
    output: ["CONTEXT_OPTIONS"],
    output_is_list: [false],
    output_name: ["CONTEXT_OPTS"],
    name: "ADE_BatchedContextOptions",
    display_name: "Context Options◆Batched [Non-AD] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/context opts",
    output_node: false,
  },
  ADE_AnimateDiffUniformContextOptions: {
    input: {
      required: {
        context_length: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
          },
        ],
        context_stride: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 32,
          },
        ],
        context_overlap: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 128,
          },
        ],
        context_schedule: [["uniform"]],
        closed_loop: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        fuse_method: [
          [
            "pyramid",
            "flat",
            "delayed reverse sawtooth",
            "pyramid-sigma",
            "pyramid-sigma inverse",
            "gauss-sigma",
            "gauss-sigma inverse",
            "random",
          ],
          {
            default: "flat",
          },
        ],
        use_on_equal_length: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
        prev_context: ["CONTEXT_OPTIONS"],
        view_opts: ["VIEW_OPTS"],
      },
    },
    output: ["CONTEXT_OPTIONS"],
    output_is_list: [false],
    output_name: ["CONTEXT_OPTS"],
    name: "ADE_AnimateDiffUniformContextOptions",
    display_name: "Context Options◆Looped Uniform 🎭🅐🅓",
    description: "",
    category: "",
    output_node: false,
  },
  ADE_StandardStaticViewOptions: {
    input: {
      required: {
        view_length: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
          },
        ],
        view_overlap: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 128,
          },
        ],
      },
      optional: {
        fuse_method: [
          [
            "pyramid",
            "flat",
            "delayed reverse sawtooth",
            "pyramid-sigma",
            "pyramid-sigma inverse",
            "gauss-sigma",
            "gauss-sigma inverse",
            "random",
          ],
        ],
      },
    },
    output: ["VIEW_OPTS"],
    output_is_list: [false],
    output_name: ["VIEW_OPTS"],
    name: "ADE_StandardStaticViewOptions",
    display_name: "View Options◆Standard Static 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/context opts/view opts",
    output_node: false,
  },
  ADE_StandardUniformViewOptions: {
    input: {
      required: {
        view_length: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
          },
        ],
        view_stride: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 32,
          },
        ],
        view_overlap: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 128,
          },
        ],
      },
      optional: {
        fuse_method: [
          [
            "pyramid",
            "flat",
            "delayed reverse sawtooth",
            "pyramid-sigma",
            "pyramid-sigma inverse",
            "gauss-sigma",
            "gauss-sigma inverse",
            "random",
          ],
        ],
      },
    },
    output: ["VIEW_OPTS"],
    output_is_list: [false],
    output_name: ["VIEW_OPTS"],
    name: "ADE_StandardUniformViewOptions",
    display_name: "View Options◆Standard Uniform 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/context opts/view opts",
    output_node: false,
  },
  ADE_LoopedUniformViewOptions: {
    input: {
      required: {
        view_length: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
          },
        ],
        view_stride: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 32,
          },
        ],
        view_overlap: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 128,
          },
        ],
        closed_loop: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        fuse_method: [
          [
            "pyramid",
            "flat",
            "delayed reverse sawtooth",
            "pyramid-sigma",
            "pyramid-sigma inverse",
            "gauss-sigma",
            "gauss-sigma inverse",
            "random",
          ],
        ],
        use_on_equal_length: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["VIEW_OPTS"],
    output_is_list: [false],
    output_name: ["VIEW_OPTS"],
    name: "ADE_LoopedUniformViewOptions",
    display_name: "View Options◆Looped Uniform 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/context opts/view opts",
    output_node: false,
  },
  ADE_IterationOptsDefault: {
    input: {
      required: {
        iterations: [
          "INT",
          {
            default: 1,
            min: 1,
          },
        ],
      },
      optional: {
        iter_batch_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
        iter_seed_offset: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["ITERATION_OPTS"],
    output_is_list: [false],
    output_name: ["ITERATION_OPTS"],
    name: "ADE_IterationOptsDefault",
    display_name: "Default Iteration Options 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/iteration opts",
    output_node: false,
  },
  ADE_IterationOptsFreeInit: {
    input: {
      required: {
        iterations: [
          "INT",
          {
            default: 2,
            min: 1,
          },
        ],
        filter: [["gaussian", "butterworth", "ideal", "box"]],
        d_s: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        d_t: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        n_butterworth: [
          "INT",
          {
            default: 4,
            min: 1,
            max: 100,
          },
        ],
        sigma_step: [
          "INT",
          {
            default: 999,
            min: 1,
            max: 999,
          },
        ],
        apply_to_1st_iter: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        init_type: [
          ["FreeInit [sampler sigma]", "FreeInit [model sigma]", "DinkInit_v1"],
        ],
      },
      optional: {
        iter_batch_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
        iter_seed_offset: [
          "INT",
          {
            default: 1,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["ITERATION_OPTS"],
    output_is_list: [false],
    output_name: ["ITERATION_OPTS"],
    name: "ADE_IterationOptsFreeInit",
    display_name: "FreeInit Iteration Options 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/iteration opts",
    output_node: false,
  },
  ADE_RegisterLoraHook: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_name: [
          [
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -20,
            max: 20,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -20,
            max: 20,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "LORA_HOOK"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "LORA_HOOK"],
    name: "ADE_RegisterLoraHook",
    display_name: "Register LoRA Hook 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/register lora hooks",
    output_node: false,
  },
  ADE_RegisterLoraHookModelOnly: {
    input: {
      required: {
        model: ["MODEL"],
        lora_name: [
          [
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -20,
            max: 20,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "LORA_HOOK"],
    output_is_list: [false, false],
    output_name: ["MODEL", "LORA_HOOK"],
    name: "ADE_RegisterLoraHookModelOnly",
    display_name: "Register LoRA Hook (Model Only) 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/register lora hooks",
    output_node: false,
  },
  ADE_RegisterModelAsLoraHook: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -20,
            max: 20,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -20,
            max: 20,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "LORA_HOOK"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "LORA_HOOK"],
    name: "ADE_RegisterModelAsLoraHook",
    display_name: "Register Model as LoRA Hook 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/register lora hooks",
    output_node: false,
  },
  ADE_RegisterModelAsLoraHookModelOnly: {
    input: {
      required: {
        model: ["MODEL"],
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -20,
            max: 20,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "LORA_HOOK"],
    output_is_list: [false, false],
    output_name: ["MODEL", "LORA_HOOK"],
    name: "ADE_RegisterModelAsLoraHookModelOnly",
    display_name: "Register Model as LoRA Hook (MO) 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/register lora hooks",
    output_node: false,
  },
  ADE_CombineLoraHooks: {
    input: {
      required: {},
      optional: {
        lora_hook_A: ["LORA_HOOK"],
        lora_hook_B: ["LORA_HOOK"],
      },
    },
    output: ["LORA_HOOK"],
    output_is_list: [false],
    output_name: ["LORA_HOOK"],
    name: "ADE_CombineLoraHooks",
    display_name: "Combine LoRA Hooks [2] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/combine lora hooks",
    output_node: false,
  },
  ADE_CombineLoraHooksFour: {
    input: {
      required: {},
      optional: {
        lora_hook_A: ["LORA_HOOK"],
        lora_hook_B: ["LORA_HOOK"],
        lora_hook_C: ["LORA_HOOK"],
        lora_hook_D: ["LORA_HOOK"],
      },
    },
    output: ["LORA_HOOK"],
    output_is_list: [false],
    output_name: ["LORA_HOOK"],
    name: "ADE_CombineLoraHooksFour",
    display_name: "Combine LoRA Hooks [4] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/combine lora hooks",
    output_node: false,
  },
  ADE_CombineLoraHooksEight: {
    input: {
      required: {},
      optional: {
        lora_hook_A: ["LORA_HOOK"],
        lora_hook_B: ["LORA_HOOK"],
        lora_hook_C: ["LORA_HOOK"],
        lora_hook_D: ["LORA_HOOK"],
        lora_hook_E: ["LORA_HOOK"],
        lora_hook_F: ["LORA_HOOK"],
        lora_hook_G: ["LORA_HOOK"],
        lora_hook_H: ["LORA_HOOK"],
      },
    },
    output: ["LORA_HOOK"],
    output_is_list: [false],
    output_name: ["LORA_HOOK"],
    name: "ADE_CombineLoraHooksEight",
    display_name: "Combine LoRA Hooks [8] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/combine lora hooks",
    output_node: false,
  },
  ADE_SetLoraHookKeyframe: {
    input: {
      required: {
        lora_hook: ["LORA_HOOK"],
        hook_kf: ["LORA_HOOK_KEYFRAMES"],
      },
    },
    output: ["LORA_HOOK"],
    output_is_list: [false],
    output_name: ["LORA_HOOK"],
    name: "ADE_SetLoraHookKeyframe",
    display_name: "Set LoRA Hook Keyframes 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning",
    output_node: false,
  },
  ADE_AttachLoraHookToCLIP: {
    input: {
      required: {
        clip: ["CLIP"],
        lora_hook: ["LORA_HOOK"],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["hook_CLIP"],
    name: "ADE_AttachLoraHookToCLIP",
    display_name: "Set CLIP LoRA Hook 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning",
    output_node: false,
  },
  ADE_LoraHookKeyframe: {
    input: {
      required: {
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -20,
            max: 20,
            step: 0.01,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
      },
      optional: {
        prev_hook_kf: ["LORA_HOOK_KEYFRAMES"],
      },
    },
    output: ["LORA_HOOK_KEYFRAMES"],
    output_is_list: [false],
    output_name: ["HOOK_KF"],
    name: "ADE_LoraHookKeyframe",
    display_name: "LoRA Hook Keyframe 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/schedule lora hooks",
    output_node: false,
  },
  ADE_LoraHookKeyframeInterpolation: {
    input: {
      required: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        strength_start: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        strength_end: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        interpolation: [["linear", "ease_in", "ease_out", "ease_in_out"]],
        intervals: [
          "INT",
          {
            default: 5,
            min: 2,
            max: 100,
            step: 1,
          },
        ],
        print_keyframes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_hook_kf: ["LORA_HOOK_KEYFRAMES"],
      },
    },
    output: ["LORA_HOOK_KEYFRAMES"],
    output_is_list: [false],
    output_name: ["HOOK_KF"],
    name: "ADE_LoraHookKeyframeInterpolation",
    display_name: "LoRA Hook Keyframes Interpolation 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/schedule lora hooks",
    output_node: false,
  },
  ADE_LoraHookKeyframeFromStrengthList: {
    input: {
      required: {
        strengths_float: [
          "FLOAT",
          {
            default: -1,
            min: -1,
            step: 0.001,
            forceInput: true,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        print_keyframes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_hook_kf: ["LORA_HOOK_KEYFRAMES"],
      },
    },
    output: ["LORA_HOOK_KEYFRAMES"],
    output_is_list: [false],
    output_name: ["HOOK_KF"],
    name: "ADE_LoraHookKeyframeFromStrengthList",
    display_name: "LoRA Hook Keyframes From List 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/schedule lora hooks",
    output_node: false,
  },
  ADE_AttachLoraHookToConditioning: {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        lora_hook: ["LORA_HOOK"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ADE_AttachLoraHookToConditioning",
    display_name: "Set Model LoRA Hook 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/single cond ops",
    output_node: false,
  },
  ADE_PairedConditioningSetMask: {
    input: {
      required: {
        positive_ADD: ["CONDITIONING"],
        negative_ADD: ["CONDITIONING"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
      optional: {
        opt_mask: ["MASK"],
        opt_lora_hook: ["LORA_HOOK"],
        opt_timesteps: ["TIMESTEPS_COND"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["positive", "negative"],
    name: "ADE_PairedConditioningSetMask",
    display_name: "Set Props on Conds 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning",
    output_node: false,
  },
  ADE_ConditioningSetMask: {
    input: {
      required: {
        cond_ADD: ["CONDITIONING"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
      optional: {
        opt_mask: ["MASK"],
        opt_lora_hook: ["LORA_HOOK"],
        opt_timesteps: ["TIMESTEPS_COND"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ADE_ConditioningSetMask",
    display_name: "Set Props on Cond 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/single cond ops",
    output_node: false,
  },
  ADE_PairedConditioningSetMaskAndCombine: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        positive_ADD: ["CONDITIONING"],
        negative_ADD: ["CONDITIONING"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
      optional: {
        opt_mask: ["MASK"],
        opt_lora_hook: ["LORA_HOOK"],
        opt_timesteps: ["TIMESTEPS_COND"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["positive", "negative"],
    name: "ADE_PairedConditioningSetMaskAndCombine",
    display_name: "Set Props and Combine Conds 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning",
    output_node: false,
  },
  ADE_ConditioningSetMaskAndCombine: {
    input: {
      required: {
        cond: ["CONDITIONING"],
        cond_ADD: ["CONDITIONING"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
      optional: {
        opt_mask: ["MASK"],
        opt_lora_hook: ["LORA_HOOK"],
        opt_timesteps: ["TIMESTEPS_COND"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ADE_ConditioningSetMaskAndCombine",
    display_name: "Set Props and Combine Cond 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/single cond ops",
    output_node: false,
  },
  ADE_PairedConditioningSetUnmaskedAndCombine: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        positive_DEFAULT: ["CONDITIONING"],
        negative_DEFAULT: ["CONDITIONING"],
      },
      optional: {
        opt_lora_hook: ["LORA_HOOK"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["positive", "negative"],
    name: "ADE_PairedConditioningSetUnmaskedAndCombine",
    display_name: "Set Unmasked Conds 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning",
    output_node: false,
  },
  ADE_ConditioningSetUnmaskedAndCombine: {
    input: {
      required: {
        cond: ["CONDITIONING"],
        cond_DEFAULT: ["CONDITIONING"],
      },
      optional: {
        opt_lora_hook: ["LORA_HOOK"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ADE_ConditioningSetUnmaskedAndCombine",
    display_name: "Set Unmasked Cond 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning/single cond ops",
    output_node: false,
  },
  ADE_TimestepsConditioning: {
    input: {
      required: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["TIMESTEPS_COND"],
    output_is_list: [false],
    output_name: ["TIMESTEPS_COND"],
    name: "ADE_TimestepsConditioning",
    display_name: "Timesteps Conditioning 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/conditioning",
    output_node: false,
  },
  ADE_NoiseLayerAdd: {
    input: {
      required: {
        batch_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
        noise_type: [
          ["default", "constant", "empty", "repeated_context", "FreeNoise"],
        ],
        seed_gen_override: [["use existing", "comfy", "auto1111"]],
        seed_offset: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
        noise_weight: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_noise_layers: ["NOISE_LAYERS"],
        mask_optional: ["MASK"],
        seed_override: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
            forceInput: true,
          },
        ],
      },
    },
    output: ["NOISE_LAYERS"],
    output_is_list: [false],
    output_name: ["NOISE_LAYERS"],
    name: "ADE_NoiseLayerAdd",
    display_name: "Noise Layer [Add] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/noise layers",
    output_node: false,
  },
  ADE_NoiseLayerAddWeighted: {
    input: {
      required: {
        batch_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
        noise_type: [
          ["default", "constant", "empty", "repeated_context", "FreeNoise"],
        ],
        seed_gen_override: [["use existing", "comfy", "auto1111"]],
        seed_offset: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
        noise_weight: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        balance_multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_noise_layers: ["NOISE_LAYERS"],
        mask_optional: ["MASK"],
        seed_override: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
            forceInput: true,
          },
        ],
      },
    },
    output: ["NOISE_LAYERS"],
    output_is_list: [false],
    output_name: ["NOISE_LAYERS"],
    name: "ADE_NoiseLayerAddWeighted",
    display_name: "Noise Layer [Add Weighted] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/noise layers",
    output_node: false,
  },
  ADE_NoiseLayerReplace: {
    input: {
      required: {
        batch_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
        noise_type: [
          ["default", "constant", "empty", "repeated_context", "FreeNoise"],
        ],
        seed_gen_override: [["use existing", "comfy", "auto1111"]],
        seed_offset: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
      },
      optional: {
        prev_noise_layers: ["NOISE_LAYERS"],
        mask_optional: ["MASK"],
        seed_override: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
            forceInput: true,
          },
        ],
      },
    },
    output: ["NOISE_LAYERS"],
    output_is_list: [false],
    output_name: ["NOISE_LAYERS"],
    name: "ADE_NoiseLayerReplace",
    display_name: "Noise Layer [Replace] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/noise layers",
    output_node: false,
  },
  ADE_AnimateDiffSettings: {
    input: {
      optional: {
        pe_adjust: ["PE_ADJUST"],
        weight_adjust: ["WEIGHT_ADJUST"],
      },
    },
    output: ["AD_SETTINGS"],
    output_is_list: [false],
    output_name: ["AD_SETTINGS"],
    name: "ADE_AnimateDiffSettings",
    display_name: "AnimateDiff Settings 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings",
    output_node: false,
  },
  ADE_AdjustPESweetspotStretch: {
    input: {
      required: {
        sweetspot: [
          "INT",
          {
            default: 16,
            min: 0,
            max: 9007199254740991,
          },
        ],
        new_sweetspot: [
          "INT",
          {
            default: 16,
            min: 0,
            max: 9007199254740991,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_pe_adjust: ["PE_ADJUST"],
      },
    },
    output: ["PE_ADJUST"],
    output_is_list: [false],
    output_name: ["PE_ADJUST"],
    name: "ADE_AdjustPESweetspotStretch",
    display_name: "Adjust PE [Sweetspot Stretch] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/pe adjust",
    output_node: false,
  },
  ADE_AdjustPEFullStretch: {
    input: {
      required: {
        pe_stretch: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_pe_adjust: ["PE_ADJUST"],
      },
    },
    output: ["PE_ADJUST"],
    output_is_list: [false],
    output_name: ["PE_ADJUST"],
    name: "ADE_AdjustPEFullStretch",
    display_name: "Adjust PE [Full Stretch] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/pe adjust",
    output_node: false,
  },
  ADE_AdjustPEManual: {
    input: {
      required: {
        cap_initial_pe_length: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        interpolate_pe_to_length: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        initial_pe_idx_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        final_pe_idx_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_pe_adjust: ["PE_ADJUST"],
      },
    },
    output: ["PE_ADJUST"],
    output_is_list: [false],
    output_name: ["PE_ADJUST"],
    name: "ADE_AdjustPEManual",
    display_name: "Adjust PE [Manual] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/pe adjust",
    output_node: false,
  },
  ADE_AdjustWeightAllAdd: {
    input: {
      required: {
        all_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_weight_adjust: ["WEIGHT_ADJUST"],
      },
    },
    output: ["WEIGHT_ADJUST"],
    output_is_list: [false],
    output_name: ["WEIGHT_ADJUST"],
    name: "ADE_AdjustWeightAllAdd",
    display_name: "Adjust Weight [All◆Add] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/weight adjust",
    output_node: false,
  },
  ADE_AdjustWeightAllMult: {
    input: {
      required: {
        all_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_weight_adjust: ["WEIGHT_ADJUST"],
      },
    },
    output: ["WEIGHT_ADJUST"],
    output_is_list: [false],
    output_name: ["WEIGHT_ADJUST"],
    name: "ADE_AdjustWeightAllMult",
    display_name: "Adjust Weight [All◆Mult] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/weight adjust",
    output_node: false,
  },
  ADE_AdjustWeightIndivAdd: {
    input: {
      required: {
        pe_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        other_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_weight_adjust: ["WEIGHT_ADJUST"],
      },
    },
    output: ["WEIGHT_ADJUST"],
    output_is_list: [false],
    output_name: ["WEIGHT_ADJUST"],
    name: "ADE_AdjustWeightIndivAdd",
    display_name: "Adjust Weight [Indiv◆Add] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/weight adjust",
    output_node: false,
  },
  ADE_AdjustWeightIndivMult: {
    input: {
      required: {
        pe_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        other_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_weight_adjust: ["WEIGHT_ADJUST"],
      },
    },
    output: ["WEIGHT_ADJUST"],
    output_is_list: [false],
    output_name: ["WEIGHT_ADJUST"],
    name: "ADE_AdjustWeightIndivMult",
    display_name: "Adjust Weight [Indiv◆Mult] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/weight adjust",
    output_node: false,
  },
  ADE_AdjustWeightIndivAttnAdd: {
    input: {
      required: {
        pe_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_q_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_k_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_v_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_out_weight_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_out_bias_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        other_ADD: [
          "FLOAT",
          {
            default: 0,
            min: -2,
            max: 2,
            step: 0.000001,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_weight_adjust: ["WEIGHT_ADJUST"],
      },
    },
    output: ["WEIGHT_ADJUST"],
    output_is_list: [false],
    output_name: ["WEIGHT_ADJUST"],
    name: "ADE_AdjustWeightIndivAttnAdd",
    display_name: "Adjust Weight [Indiv-Attn◆Add] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/weight adjust",
    output_node: false,
  },
  ADE_AdjustWeightIndivAttnMult: {
    input: {
      required: {
        pe_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_q_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_k_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_v_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_out_weight_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        attn_out_bias_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        other_MULT: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.000001,
          },
        ],
        print_adjustment: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        prev_weight_adjust: ["WEIGHT_ADJUST"],
      },
    },
    output: ["WEIGHT_ADJUST"],
    output_is_list: [false],
    output_name: ["WEIGHT_ADJUST"],
    name: "ADE_AdjustWeightIndivAttnMult",
    display_name: "Adjust Weight [Indiv-Attn◆Mult] 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/ad settings/weight adjust",
    output_node: false,
  },
  ADE_CustomCFG: {
    input: {
      required: {
        cfg_multival: ["MULTIVAL"],
      },
    },
    output: ["CUSTOM_CFG"],
    output_is_list: [false],
    output_name: ["CUSTOM_CFG"],
    name: "ADE_CustomCFG",
    display_name: "Custom CFG 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings",
    output_node: false,
  },
  ADE_CustomCFGKeyframe: {
    input: {
      required: {
        cfg_multival: ["MULTIVAL"],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
      },
      optional: {
        prev_custom_cfg: ["CUSTOM_CFG"],
      },
    },
    output: ["CUSTOM_CFG"],
    output_is_list: [false],
    output_name: ["CUSTOM_CFG"],
    name: "ADE_CustomCFGKeyframe",
    display_name: "Custom CFG Keyframe 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings",
    output_node: false,
  },
  ADE_SigmaSchedule: {
    input: {
      required: {
        beta_schedule: [
          [
            "sqrt_linear (AnimateDiff)",
            "linear (AnimateDiff-SDXL)",
            "linear (HotshotXL/default)",
            "avg(sqrt_linear,linear)",
            "lcm avg(sqrt_linear,linear)",
            "lcm",
            "lcm[100_ots]",
            "lcm >> sqrt_linear",
            "sqrt",
            "cosine",
            "squaredcos_cap_v2",
          ],
        ],
      },
    },
    output: ["SIGMA_SCHEDULE"],
    output_is_list: [false],
    output_name: ["SIGMA_SCHEDULE"],
    name: "ADE_SigmaSchedule",
    display_name: "Create Sigma Schedule 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings/sigma schedule",
    output_node: false,
  },
  ADE_RawSigmaSchedule: {
    input: {
      required: {
        raw_beta_schedule: [
          ["linear", "sqrt_linear", "sqrt", "cosine", "squaredcos_cap_v2"],
        ],
        linear_start: [
          "FLOAT",
          {
            default: 0.00085,
            min: 0,
            max: 1,
            step: 0.000001,
          },
        ],
        linear_end: [
          "FLOAT",
          {
            default: 0.012,
            min: 0,
            max: 1,
            step: 0.000001,
          },
        ],
        sampling: [["eps", "v_prediction", "lcm"]],
        lcm_original_timesteps: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 1000,
          },
        ],
        lcm_zsnr: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["SIGMA_SCHEDULE"],
    output_is_list: [false],
    output_name: ["SIGMA_SCHEDULE"],
    name: "ADE_RawSigmaSchedule",
    display_name: "Create Raw Sigma Schedule 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings/sigma schedule",
    output_node: false,
  },
  ADE_SigmaScheduleWeightedAverage: {
    input: {
      required: {
        schedule_A: ["SIGMA_SCHEDULE"],
        schedule_B: ["SIGMA_SCHEDULE"],
        weight_A: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["SIGMA_SCHEDULE"],
    output_is_list: [false],
    output_name: ["SIGMA_SCHEDULE"],
    name: "ADE_SigmaScheduleWeightedAverage",
    display_name: "Sigma Schedule Weighted Mean 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings/sigma schedule",
    output_node: false,
  },
  ADE_SigmaScheduleWeightedAverageInterp: {
    input: {
      required: {
        schedule_A: ["SIGMA_SCHEDULE"],
        schedule_B: ["SIGMA_SCHEDULE"],
        weight_A_Start: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        weight_A_End: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        interpolation: [["linear", "ease_in", "ease_out", "ease_in_out"]],
      },
    },
    output: ["SIGMA_SCHEDULE"],
    output_is_list: [false],
    output_name: ["SIGMA_SCHEDULE"],
    name: "ADE_SigmaScheduleWeightedAverageInterp",
    display_name: "Sigma Schedule Interpolated Mean 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings/sigma schedule",
    output_node: false,
  },
  ADE_SigmaScheduleSplitAndCombine: {
    input: {
      required: {
        schedule_Start: ["SIGMA_SCHEDULE"],
        schedule_End: ["SIGMA_SCHEDULE"],
        idx_split_percent: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["SIGMA_SCHEDULE"],
    output_is_list: [false],
    output_name: ["SIGMA_SCHEDULE"],
    name: "ADE_SigmaScheduleSplitAndCombine",
    display_name: "Sigma Schedule Split Combine 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings/sigma schedule",
    output_node: false,
  },
  ADE_NoisedImageInjection: {
    input: {
      required: {
        image: ["IMAGE"],
        vae: ["VAE"],
      },
      optional: {
        mask_opt: ["MASK"],
        invert_mask: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        resize_image: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
          },
        ],
        img_inject_opts: ["IMAGE_INJECT_OPTIONS"],
        strength_multival: ["MULTIVAL"],
        prev_image_inject: ["IMAGE_INJECT"],
      },
    },
    output: ["IMAGE_INJECT"],
    output_is_list: [false],
    output_name: ["IMAGE_INJECT"],
    name: "ADE_NoisedImageInjection",
    display_name: "Image Injection 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings/image inject",
    output_node: false,
  },
  ADE_NoisedImageInjectOptions: {
    input: {
      required: {},
      optional: {
        composite_x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        composite_y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE_INJECT_OPTIONS"],
    output_is_list: [false],
    output_name: ["IMG_INJECT_OPTS"],
    name: "ADE_NoisedImageInjectOptions",
    display_name: "Image Injection Options 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/sample settings/image inject",
    output_node: false,
  },
  ADE_AnimateDiffUnload: {
    input: {
      required: {
        model: ["MODEL"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ADE_AnimateDiffUnload",
    display_name: "AnimateDiff Unload 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/extras",
    output_node: false,
  },
  ADE_EmptyLatentImageLarge: {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 262144,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "ADE_EmptyLatentImageLarge",
    display_name: "Empty Latent Image (Big Batch) 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/extras",
    output_node: false,
  },
  CheckpointLoaderSimpleWithNoiseSelect: {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        beta_schedule: [
          [
            "autoselect",
            "use existing",
            "sqrt_linear (AnimateDiff)",
            "linear (AnimateDiff-SDXL)",
            "linear (HotshotXL/default)",
            "avg(sqrt_linear,linear)",
            "lcm avg(sqrt_linear,linear)",
            "lcm",
            "lcm[100_ots]",
            "lcm >> sqrt_linear",
            "sqrt",
            "cosine",
            "squaredcos_cap_v2",
          ],
          {
            default: "use existing",
          },
        ],
      },
      optional: {
        use_custom_scale_factor: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        scale_factor: [
          "FLOAT",
          {
            default: 0.18215,
            min: 0,
            max: 1,
            step: 0.00001,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "VAE"],
    name: "CheckpointLoaderSimpleWithNoiseSelect",
    display_name: "Load Checkpoint w/ Noise Select 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/extras",
    output_node: false,
  },
  ADE_AnimateDiffLoaderGen1: {
    input: {
      required: {
        model: ["MODEL"],
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
        beta_schedule: [
          [
            "autoselect",
            "use existing",
            "sqrt_linear (AnimateDiff)",
            "linear (AnimateDiff-SDXL)",
            "linear (HotshotXL/default)",
            "avg(sqrt_linear,linear)",
            "lcm avg(sqrt_linear,linear)",
            "lcm",
            "lcm[100_ots]",
            "lcm >> sqrt_linear",
            "sqrt",
            "cosine",
            "squaredcos_cap_v2",
          ],
          {
            default: "autoselect",
          },
        ],
      },
      optional: {
        context_options: ["CONTEXT_OPTIONS"],
        motion_lora: ["MOTION_LORA"],
        ad_settings: ["AD_SETTINGS"],
        ad_keyframes: ["AD_KEYFRAMES"],
        sample_settings: ["SAMPLE_SETTINGS"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ADE_AnimateDiffLoaderGen1",
    display_name: "AnimateDiff Loader 🎭🅐🅓①",
    description: "",
    category: "Animate Diff 🎭🅐🅓/① Gen1 nodes ①",
    output_node: false,
  },
  ADE_AnimateDiffLoaderWithContext: {
    input: {
      required: {
        model: ["MODEL"],
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
        beta_schedule: [
          [
            "autoselect",
            "use existing",
            "sqrt_linear (AnimateDiff)",
            "linear (AnimateDiff-SDXL)",
            "linear (HotshotXL/default)",
            "avg(sqrt_linear,linear)",
            "lcm avg(sqrt_linear,linear)",
            "lcm",
            "lcm[100_ots]",
            "lcm >> sqrt_linear",
            "sqrt",
            "cosine",
            "squaredcos_cap_v2",
          ],
          {
            default: "autoselect",
          },
        ],
      },
      optional: {
        context_options: ["CONTEXT_OPTIONS"],
        motion_lora: ["MOTION_LORA"],
        ad_settings: ["AD_SETTINGS"],
        sample_settings: ["SAMPLE_SETTINGS"],
        motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
        apply_v2_models_properly: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        ad_keyframes: ["AD_KEYFRAMES"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ADE_AnimateDiffLoaderWithContext",
    display_name: "AnimateDiff Loader [Legacy] 🎭🅐🅓①",
    description: "",
    category: "Animate Diff 🎭🅐🅓/① Gen1 nodes ①",
    output_node: false,
  },
  ADE_UseEvolvedSampling: {
    input: {
      required: {
        model: ["MODEL"],
        beta_schedule: [
          [
            "autoselect",
            "use existing",
            "sqrt_linear (AnimateDiff)",
            "linear (AnimateDiff-SDXL)",
            "linear (HotshotXL/default)",
            "avg(sqrt_linear,linear)",
            "lcm avg(sqrt_linear,linear)",
            "lcm",
            "lcm[100_ots]",
            "lcm >> sqrt_linear",
            "sqrt",
            "cosine",
            "squaredcos_cap_v2",
          ],
          {
            default: "autoselect",
          },
        ],
      },
      optional: {
        m_models: ["M_MODELS"],
        context_options: ["CONTEXT_OPTIONS"],
        sample_settings: ["SAMPLE_SETTINGS"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ADE_UseEvolvedSampling",
    display_name: "Use Evolved Sampling 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②",
    output_node: false,
  },
  ADE_ApplyAnimateDiffModelSimple: {
    input: {
      required: {
        motion_model: ["MOTION_MODEL_ADE"],
      },
      optional: {
        motion_lora: ["MOTION_LORA"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
        ad_keyframes: ["AD_KEYFRAMES"],
      },
    },
    output: ["M_MODELS"],
    output_is_list: [false],
    output_name: ["M_MODELS"],
    name: "ADE_ApplyAnimateDiffModelSimple",
    display_name: "Apply AnimateDiff Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②",
    output_node: false,
  },
  ADE_ApplyAnimateDiffModel: {
    input: {
      required: {
        motion_model: ["MOTION_MODEL_ADE"],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        motion_lora: ["MOTION_LORA"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
        ad_keyframes: ["AD_KEYFRAMES"],
        prev_m_models: ["M_MODELS"],
      },
    },
    output: ["M_MODELS"],
    output_is_list: [false],
    output_name: ["M_MODELS"],
    name: "ADE_ApplyAnimateDiffModel",
    display_name: "Apply AnimateDiff Model (Adv.) 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②",
    output_node: false,
  },
  ADE_LoadAnimateDiffModel: {
    input: {
      required: {
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
      },
      optional: {
        ad_settings: ["AD_SETTINGS"],
      },
    },
    output: ["MOTION_MODEL_ADE"],
    output_is_list: [false],
    output_name: ["MOTION_MODEL"],
    name: "ADE_LoadAnimateDiffModel",
    display_name: "Load AnimateDiff Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②",
    output_node: false,
  },
  ADE_ApplyAnimateLCMI2VModel: {
    input: {
      required: {
        motion_model: ["MOTION_MODEL_ADE"],
        ref_latent: ["LATENT"],
        ref_drift: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        apply_ref_when_disabled: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        motion_lora: ["MOTION_LORA"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
        ad_keyframes: ["AD_KEYFRAMES"],
        prev_m_models: ["M_MODELS"],
      },
    },
    output: ["M_MODELS"],
    output_is_list: [false],
    output_name: ["M_MODELS"],
    name: "ADE_ApplyAnimateLCMI2VModel",
    display_name: "Apply AnimateLCM-I2V Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/AnimateLCM-I2V",
    output_node: false,
  },
  ADE_LoadAnimateLCMI2VModel: {
    input: {
      required: {
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
      },
      optional: {
        ad_settings: ["AD_SETTINGS"],
      },
    },
    output: ["MOTION_MODEL_ADE", "MOTION_MODEL_ADE"],
    output_is_list: [false, false],
    output_name: ["MOTION_MODEL", "encoder_only"],
    name: "ADE_LoadAnimateLCMI2VModel",
    display_name: "Load AnimateLCM-I2V Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/AnimateLCM-I2V",
    output_node: false,
  },
  ADE_UpscaleAndVAEEncode: {
    input: {
      required: {
        image: ["IMAGE"],
        vae: ["VAE"],
        latent_size: ["LATENT"],
        scale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "lanczos"],
        ],
        crop: [
          ["disabled", "center"],
          {
            default: "center",
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "ADE_UpscaleAndVAEEncode",
    display_name: "Scale Ref Image and VAE Encode 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/AnimateLCM-I2V",
    output_node: false,
  },
  ADE_InjectI2VIntoAnimateDiffModel: {
    input: {
      required: {
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
        motion_model: ["MOTION_MODEL_ADE"],
      },
      optional: {
        ad_settings: ["AD_SETTINGS"],
      },
    },
    output: ["MOTION_MODEL_ADE"],
    output_is_list: [false],
    output_name: ["MOTION_MODEL"],
    name: "ADE_InjectI2VIntoAnimateDiffModel",
    display_name: "🧪Inject I2V into AnimateDiff Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/AnimateLCM-I2V/🧪experimental",
    output_node: false,
  },
  ADE_ApplyAnimateDiffModelWithCameraCtrl: {
    input: {
      required: {
        motion_model: ["MOTION_MODEL_ADE"],
        cameractrl_poses: ["CAMERACTRL_POSES"],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        motion_lora: ["MOTION_LORA"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
        cameractrl_multival: ["MULTIVAL"],
        ad_keyframes: ["AD_KEYFRAMES"],
        prev_m_models: ["M_MODELS"],
      },
    },
    output: ["M_MODELS"],
    output_is_list: [false],
    output_name: ["M_MODELS"],
    name: "ADE_ApplyAnimateDiffModelWithCameraCtrl",
    display_name: "Apply AnimateDiff+CameraCtrl Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl",
    output_node: false,
  },
  ADE_LoadAnimateDiffModelWithCameraCtrl: {
    input: {
      required: {
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
        camera_ctrl: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
      },
      optional: {
        ad_settings: ["AD_SETTINGS"],
      },
    },
    output: ["MOTION_MODEL_ADE"],
    output_is_list: [false],
    output_name: ["MOTION_MODEL"],
    name: "ADE_LoadAnimateDiffModelWithCameraCtrl",
    display_name: "Load AnimateDiff+CameraCtrl Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl",
    output_node: false,
  },
  ADE_CameraCtrlAnimateDiffKeyframe: {
    input: {
      required: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_ad_keyframes: ["AD_KEYFRAMES"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
        cameractrl_multival: ["MULTIVAL"],
        inherit_missing: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["AD_KEYFRAMES"],
    output_is_list: [false],
    output_name: ["AD_KEYFRAMES"],
    name: "ADE_CameraCtrlAnimateDiffKeyframe",
    display_name: "AnimateDiff+CameraCtrl Keyframe 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl",
    output_node: false,
  },
  ADE_LoadCameraPoses: {
    input: {
      required: {
        pose_filename: [[]],
      },
    },
    output: ["CAMERACTRL_POSES"],
    output_is_list: [false],
    output_name: ["CAMERACTRL_POSES"],
    name: "ADE_LoadCameraPoses",
    display_name: "Load CameraCtrl Poses (File) 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses",
    output_node: false,
  },
  ADE_CameraPoseBasic: {
    input: {
      required: {
        motion_type: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        speed: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        frame_length: [
          "INT",
          {
            default: 16,
          },
        ],
      },
      optional: {
        prev_poses: ["CAMERACTRL_POSES"],
      },
    },
    output: ["CAMERACTRL_POSES"],
    output_is_list: [false],
    output_name: ["CAMERACTRL_POSES"],
    name: "ADE_CameraPoseBasic",
    display_name: "Create CameraCtrl Poses 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses",
    output_node: false,
  },
  ADE_CameraPoseCombo: {
    input: {
      required: {
        motion_type1: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        motion_type2: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        motion_type3: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        motion_type4: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        motion_type5: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        motion_type6: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        speed: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        frame_length: [
          "INT",
          {
            default: 16,
          },
        ],
      },
      optional: {
        prev_poses: ["CAMERACTRL_POSES"],
      },
    },
    output: ["CAMERACTRL_POSES"],
    output_is_list: [false],
    output_name: ["CAMERACTRL_POSES"],
    name: "ADE_CameraPoseCombo",
    display_name: "Create CameraCtrl Poses (Combo) 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses",
    output_node: false,
  },
  ADE_CameraPoseAdvanced: {
    input: {
      required: {
        motion_type1: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        strength1: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        motion_type2: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        strength2: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        motion_type3: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        strength3: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        motion_type4: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        strength4: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        motion_type5: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        strength5: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        motion_type6: [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Roll Clockwise",
            "Roll Anticlockwise",
            "Tilt Down",
            "Tilt Up",
            "Tilt Left",
            "Tilt Right",
          ],
        ],
        strength6: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        speed: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        frame_length: [
          "INT",
          {
            default: 16,
          },
        ],
      },
      optional: {
        prev_poses: ["CAMERACTRL_POSES"],
      },
    },
    output: ["CAMERACTRL_POSES"],
    output_is_list: [false],
    output_name: ["CAMERACTRL_POSES"],
    name: "ADE_CameraPoseAdvanced",
    display_name: "Create CameraCtrl Poses (Adv.) 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses",
    output_node: false,
  },
  ADE_CameraManualPoseAppend: {
    input: {
      required: {
        poses_first: ["CAMERACTRL_POSES"],
        poses_last: ["CAMERACTRL_POSES"],
      },
    },
    output: ["CAMERACTRL_POSES"],
    output_is_list: [false],
    output_name: ["CAMERACTRL_POSES"],
    name: "ADE_CameraManualPoseAppend",
    display_name: "Manual Append CameraCtrl Poses 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses",
    output_node: false,
  },
  ADE_ReplaceCameraParameters: {
    input: {
      required: {
        poses: ["CAMERACTRL_POSES"],
        fx: [
          "FLOAT",
          {
            default: 0.474812461,
            min: 0,
            max: 1,
            step: 1e-9,
          },
        ],
        fy: [
          "FLOAT",
          {
            default: 0.844111024,
            min: 0,
            max: 1,
            step: 1e-9,
          },
        ],
        cx: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        cy: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CAMERACTRL_POSES"],
    output_is_list: [false],
    output_name: ["CAMERACTRL_POSES"],
    name: "ADE_ReplaceCameraParameters",
    display_name: "Replace Camera Parameters 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses",
    output_node: false,
  },
  ADE_ReplaceOriginalPoseAspectRatio: {
    input: {
      required: {
        poses: ["CAMERACTRL_POSES"],
        orig_pose_width: [
          "INT",
          {
            default: 1280,
            min: 1,
            max: 9007199254740991,
          },
        ],
        orig_pose_height: [
          "INT",
          {
            default: 720,
            min: 1,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["CAMERACTRL_POSES"],
    output_is_list: [false],
    output_name: ["CAMERACTRL_POSES"],
    name: "ADE_ReplaceOriginalPoseAspectRatio",
    display_name: "Replace Orig. Pose Aspect Ratio 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses",
    output_node: false,
  },
  ADE_ApplyAnimateDiffModelWithPIA: {
    input: {
      required: {
        motion_model: ["MOTION_MODEL_ADE"],
        image: ["IMAGE"],
        vae: ["VAE"],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        pia_input: ["PIA_INPUT"],
        motion_lora: ["MOTION_LORA"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
        ad_keyframes: ["AD_KEYFRAMES"],
        prev_m_models: ["M_MODELS"],
      },
    },
    output: ["M_MODELS"],
    output_is_list: [false],
    output_name: ["M_MODELS"],
    name: "ADE_ApplyAnimateDiffModelWithPIA",
    display_name: "Apply AnimateDiff-PIA Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA",
    output_node: false,
  },
  ADE_InputPIA_Multival: {
    input: {
      required: {
        multival: ["MULTIVAL"],
      },
    },
    output: ["PIA_INPUT"],
    output_is_list: [false],
    output_name: ["PIA_INPUT"],
    name: "ADE_InputPIA_Multival",
    display_name: "PIA Input [Multival] 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA",
    output_node: false,
  },
  ADE_InputPIA_PaperPresets: {
    input: {
      required: {
        preset: [
          [
            "Animation (Small Motion)",
            "Animation (Medium Motion)",
            "Animation (Large Motion)",
            "Loop (Small Motion)",
            "Loop (Medium Motion)",
            "Loop (Large Motion)",
            "Style Transfer (Small Motion)",
            "Style Transfer (Medium Motion)",
            "Style Transfer (Large Motion)",
          ],
        ],
        batch_index: [
          "INT",
          {
            default: 0,
            min: -9007199254740991,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
      optional: {
        mult_multival: ["MULTIVAL"],
        print_values: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["PIA_INPUT"],
    output_is_list: [false],
    output_name: ["PIA_INPUT"],
    name: "ADE_InputPIA_PaperPresets",
    display_name: "PIA Input [Paper Presets] 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA",
    output_node: false,
  },
  ADE_PIA_AnimateDiffKeyframe: {
    input: {
      required: {
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        prev_ad_keyframes: ["AD_KEYFRAMES"],
        scale_multival: ["MULTIVAL"],
        effect_multival: ["MULTIVAL"],
        pia_input: ["PIA_INPUT"],
        inherit_missing: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        guarantee_steps: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["AD_KEYFRAMES"],
    output_is_list: [false],
    output_name: ["AD_KEYFRAMES"],
    name: "ADE_PIA_AnimateDiffKeyframe",
    display_name: "AnimateDiff-PIA Keyframe 🎭🅐🅓",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA",
    output_node: false,
  },
  ADE_InjectPIAIntoAnimateDiffModel: {
    input: {
      required: {
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
        motion_model: ["MOTION_MODEL_ADE"],
      },
      optional: {
        ad_settings: ["AD_SETTINGS"],
      },
    },
    output: ["MOTION_MODEL_ADE"],
    output_is_list: [false],
    output_name: ["MOTION_MODEL"],
    name: "ADE_InjectPIAIntoAnimateDiffModel",
    display_name: "🧪Inject PIA into AnimateDiff Model 🎭🅐🅓②",
    description: "",
    category: "Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA/🧪experimental",
    output_node: false,
  },
  AnimateDiffLoaderV1: {
    input: {
      required: {
        model: ["MODEL"],
        latents: ["LATENT"],
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
        unlimited_area_hack: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        beta_schedule: [
          [
            "sqrt_linear (AnimateDiff)",
            "use existing",
            "autoselect",
            "linear (AnimateDiff-SDXL)",
            "linear (HotshotXL/default)",
            "avg(sqrt_linear,linear)",
            "lcm avg(sqrt_linear,linear)",
            "lcm",
            "lcm[100_ots]",
            "lcm >> sqrt_linear",
            "sqrt",
            "cosine",
            "squaredcos_cap_v2",
          ],
        ],
      },
    },
    output: ["MODEL", "LATENT"],
    output_is_list: [false, false],
    output_name: ["MODEL", "LATENT"],
    name: "AnimateDiffLoaderV1",
    display_name: "🚫AnimateDiff Loader [DEPRECATED] 🎭🅐🅓",
    description: "",
    category: "",
    output_node: false,
  },
  ADE_AnimateDiffLoaderV1Advanced: {
    input: {
      required: {
        model: ["MODEL"],
        latents: ["LATENT"],
        model_name: [
          [
            "animatediff_models.safetensors",
            "sha256_2412711886f61091846f53204aabc38aa6e09356d62a9808abe4daa802168343.ckpt",
            "sha256_b46c3de62e5696af72c4056e3cdcbea12fbc19581c0aad7b6f2b027851148f5f.ckpt",
          ],
        ],
        unlimited_area_hack: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        context_length: [
          "INT",
          {
            default: 16,
            min: 0,
            max: 1000,
          },
        ],
        context_stride: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        context_overlap: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 1000,
          },
        ],
        context_schedule: [["uniform"]],
        closed_loop: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        beta_schedule: [
          [
            "sqrt_linear (AnimateDiff)",
            "use existing",
            "autoselect",
            "linear (AnimateDiff-SDXL)",
            "linear (HotshotXL/default)",
            "avg(sqrt_linear,linear)",
            "lcm avg(sqrt_linear,linear)",
            "lcm",
            "lcm[100_ots]",
            "lcm >> sqrt_linear",
            "sqrt",
            "cosine",
            "squaredcos_cap_v2",
          ],
        ],
      },
    },
    output: ["MODEL", "LATENT"],
    output_is_list: [false, false],
    output_name: ["MODEL", "LATENT"],
    name: "ADE_AnimateDiffLoaderV1Advanced",
    display_name: "🚫AnimateDiff Loader (Advanced) [DEPRECATED] 🎭🅐🅓",
    description: "",
    category: "",
    output_node: false,
  },
  ADE_AnimateDiffCombine: {
    input: {
      required: {
        images: ["IMAGE"],
        frame_rate: [
          "INT",
          {
            default: 8,
            min: 1,
            max: 24,
            step: 1,
          },
        ],
        loop_count: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        filename_prefix: [
          "STRING",
          {
            default: "AnimateDiff",
          },
        ],
        format: [["image/gif", "image/webp"]],
        pingpong: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        save_image: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: ["GIF"],
    output_is_list: [false],
    output_name: ["GIF"],
    name: "ADE_AnimateDiffCombine",
    display_name:
      "🚫AnimateDiff Combine [DEPRECATED, Use Video Combine (VHS) Instead!] 🎭🅐🅓",
    description: "",
    category: "",
    output_node: true,
  },
  ADE_AnimateDiffModelSettings_Release: {
    input: {
      required: {
        min_motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
        max_motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
      },
      optional: {
        mask_motion_scale: ["MASK"],
      },
    },
    output: ["AD_SETTINGS"],
    output_is_list: [false],
    output_name: ["AD_SETTINGS"],
    name: "ADE_AnimateDiffModelSettings_Release",
    display_name: "🚫[DEPR] Motion Model Settings 🎭🅐🅓①",
    description: "",
    category: "",
    output_node: false,
  },
  ADE_AnimateDiffModelSettingsSimple: {
    input: {
      required: {
        motion_pe_stretch: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
      },
      optional: {
        mask_motion_scale: ["MASK"],
        min_motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
        max_motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
      },
    },
    output: ["AD_SETTINGS"],
    output_is_list: [false],
    output_name: ["AD_SETTINGS"],
    name: "ADE_AnimateDiffModelSettingsSimple",
    display_name: "🚫[DEPR] Motion Model Settings (Simple) 🎭🅐🅓①",
    description: "",
    category: "",
    output_node: false,
  },
  ADE_AnimateDiffModelSettings: {
    input: {
      required: {
        pe_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        attn_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        other_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        motion_pe_stretch: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        cap_initial_pe_length: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        interpolate_pe_to_length: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        initial_pe_idx_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        final_pe_idx_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
      },
      optional: {
        mask_motion_scale: ["MASK"],
        min_motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
        max_motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
      },
    },
    output: ["AD_SETTINGS"],
    output_is_list: [false],
    output_name: ["AD_SETTINGS"],
    name: "ADE_AnimateDiffModelSettings",
    display_name: "🚫[DEPR] Motion Model Settings (Advanced) 🎭🅐🅓①",
    description: "",
    category: "",
    output_node: false,
  },
  ADE_AnimateDiffModelSettingsAdvancedAttnStrengths: {
    input: {
      required: {
        pe_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        attn_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        attn_q_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        attn_k_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        attn_v_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        attn_out_weight_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        attn_out_bias_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        other_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.0001,
          },
        ],
        motion_pe_stretch: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        cap_initial_pe_length: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        interpolate_pe_to_length: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        initial_pe_idx_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        final_pe_idx_offset: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
      },
      optional: {
        mask_motion_scale: ["MASK"],
        min_motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
        max_motion_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            step: 0.001,
          },
        ],
      },
    },
    output: ["AD_SETTINGS"],
    output_is_list: [false],
    output_name: ["AD_SETTINGS"],
    name: "ADE_AnimateDiffModelSettingsAdvancedAttnStrengths",
    display_name: "🚫[DEPR] Motion Model Settings (Adv. Attn) 🎭🅐🅓①",
    description: "",
    category: "",
    output_node: false,
  },
  "LoraLoader|pysssss": {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_name: [
          [
            {
              content: "loras.safetensors",
              image: null,
            },
            {
              content:
                "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
              image: null,
            },
            {
              content:
                "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
              image: null,
            },
            {
              content:
                "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
              image: null,
            },
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP"],
    output_is_list: [false, false],
    output_name: ["MODEL", "CLIP"],
    name: "LoraLoader|pysssss",
    display_name: "Lora Loader 🐍",
    description: "",
    category: "loaders",
    output_node: false,
  },
  "CheckpointLoader|pysssss": {
    input: {
      required: {
        ckpt_name: [
          [
            {
              content: "checkpoints.safetensors",
              image: null,
            },
            {
              content:
                "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
              image: null,
            },
            {
              content:
                "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
              image: null,
            },
            {
              content:
                "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
              image: null,
            },
            {
              content:
                "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
              image: null,
            },
            {
              content:
                "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
              image: null,
            },
            {
              content:
                "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
              image: null,
            },
            {
              content:
                "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
              image: null,
            },
            {
              content:
                "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
              image: null,
            },
            {
              content:
                "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
              image: null,
            },
            {
              content:
                "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
              image: null,
            },
            {
              content:
                "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
              image: null,
            },
            {
              content:
                "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
              image: null,
            },
            {
              content:
                "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
              image: null,
            },
            {
              content:
                "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
              image: null,
            },
            {
              content:
                "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
              image: null,
            },
            {
              content:
                "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
              image: null,
            },
            {
              content:
                "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
              image: null,
            },
          ],
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "VAE"],
    name: "CheckpointLoader|pysssss",
    display_name: "Checkpoint Loader 🐍",
    description: "",
    category: "loaders",
    output_node: false,
  },
  "ConstrainImage|pysssss": {
    input: {
      required: {
        images: ["IMAGE"],
        max_width: [
          "INT",
          {
            default: 1024,
            min: 0,
          },
        ],
        max_height: [
          "INT",
          {
            default: 1024,
            min: 0,
          },
        ],
        min_width: [
          "INT",
          {
            default: 0,
            min: 0,
          },
        ],
        min_height: [
          "INT",
          {
            default: 0,
            min: 0,
          },
        ],
        crop_if_required: [
          ["yes", "no"],
          {
            default: "no",
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [true],
    output_name: ["IMAGE"],
    name: "ConstrainImage|pysssss",
    display_name: "Constrain Image 🐍",
    description: "",
    category: "image",
    output_node: false,
  },
  "ConstrainImageforVideo|pysssss": {
    input: {
      required: {
        images: ["IMAGE"],
        max_width: [
          "INT",
          {
            default: 1024,
            min: 0,
          },
        ],
        max_height: [
          "INT",
          {
            default: 1024,
            min: 0,
          },
        ],
        min_width: [
          "INT",
          {
            default: 0,
            min: 0,
          },
        ],
        min_height: [
          "INT",
          {
            default: 0,
            min: 0,
          },
        ],
        crop_if_required: [
          ["yes", "no"],
          {
            default: "no",
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ConstrainImageforVideo|pysssss",
    display_name: "Constrain Image for Video 🐍",
    description: "",
    category: "image",
    output_node: false,
  },
  "MathExpression|pysssss": {
    input: {
      required: {
        expression: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
            "pysssss.autocomplete": {
              words: [
                {
                  text: "round",
                  value: "round()",
                  showValue: false,
                  hint: "number, dp? = 0",
                  caretOffset: -1,
                },
                {
                  text: "ceil",
                  value: "ceil()",
                  showValue: false,
                  hint: "number",
                  caretOffset: -1,
                },
                {
                  text: "floor",
                  value: "floor()",
                  showValue: false,
                  hint: "number",
                  caretOffset: -1,
                },
                {
                  text: "min",
                  value: "min()",
                  showValue: false,
                  hint: "...numbers",
                  caretOffset: -1,
                },
                {
                  text: "max",
                  value: "max()",
                  showValue: false,
                  hint: "...numbers",
                  caretOffset: -1,
                },
                {
                  text: "randomint",
                  value: "randomint()",
                  showValue: false,
                  hint: "min, max",
                  caretOffset: -1,
                },
                {
                  text: "randomchoice",
                  value: "randomchoice()",
                  showValue: false,
                  hint: "...numbers",
                  caretOffset: -1,
                },
                {
                  text: "sqrt",
                  value: "sqrt()",
                  showValue: false,
                  hint: "number",
                  caretOffset: -1,
                },
                {
                  text: "int",
                  value: "int()",
                  showValue: false,
                  hint: "number",
                  caretOffset: -1,
                },
                {
                  text: "iif",
                  value: "iif()",
                  showValue: false,
                  hint: "value, truepart, falsepart",
                  caretOffset: -1,
                },
              ],
              separator: "",
            },
          },
        ],
      },
      optional: {
        a: ["INT,FLOAT,IMAGE,LATENT"],
        b: ["INT,FLOAT,IMAGE,LATENT"],
        c: ["INT,FLOAT,IMAGE,LATENT"],
      },
      hidden: {
        extra_pnginfo: "EXTRA_PNGINFO",
        prompt: "PROMPT",
      },
    },
    output: ["INT", "FLOAT"],
    output_is_list: [false, false],
    output_name: ["INT", "FLOAT"],
    name: "MathExpression|pysssss",
    display_name: "Math Expression 🐍",
    description: "",
    category: "utils",
    output_node: true,
  },
  "PlaySound|pysssss": {
    input: {
      required: {
        any: ["*", {}],
        mode: [["always", "on empty queue"], {}],
        volume: [
          "FLOAT",
          {
            min: 0,
            max: 1,
            step: 0.1,
            default: 0.5,
          },
        ],
        file: [
          "STRING",
          {
            default: "notify.mp3",
          },
        ],
      },
    },
    output: ["*"],
    output_is_list: [true],
    output_name: ["*"],
    name: "PlaySound|pysssss",
    display_name: "PlaySound 🐍",
    description: "",
    category: "utils",
    output_node: true,
  },
  "Repeater|pysssss": {
    input: {
      required: {
        source: ["*", {}],
        repeats: [
          "INT",
          {
            min: 0,
            max: 5000,
            default: 2,
          },
        ],
        output: [["single", "multi"], {}],
        node_mode: [["reuse", "create"], {}],
      },
    },
    output: ["*"],
    output_is_list: [true],
    output_name: ["*"],
    name: "Repeater|pysssss",
    display_name: "Repeater 🐍",
    description: "",
    category: "utils",
    output_node: false,
  },
  "ReroutePrimitive|pysssss": {
    input: {
      required: {
        value: ["*"],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["*"],
    name: "ReroutePrimitive|pysssss",
    display_name: "Reroute Primitive 🐍",
    description: "",
    category: "utils",
    output_node: false,
  },
  "ShowText|pysssss": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: ["STRING"],
    output_is_list: [true],
    output_name: ["STRING"],
    name: "ShowText|pysssss",
    display_name: "Show Text 🐍",
    description: "",
    category: "utils",
    output_node: true,
  },
  "StringFunction|pysssss": {
    input: {
      required: {
        action: [["append", "replace"], {}],
        tidy_tags: [["yes", "no"], {}],
      },
      optional: {
        text_a: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        text_b: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        text_c: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "StringFunction|pysssss",
    display_name: "String Function 🐍",
    description: "",
    category: "utils",
    output_node: true,
  },
  "SystemNotification|pysssss": {
    input: {
      required: {
        message: [
          "STRING",
          {
            default: "Your notification has triggered.",
          },
        ],
        any: ["*", {}],
        mode: [["always", "on empty queue"], {}],
      },
    },
    output: ["*"],
    output_is_list: [true],
    output_name: ["*"],
    name: "SystemNotification|pysssss",
    display_name: "SystemNotification 🐍",
    description: "",
    category: "utils",
    output_node: true,
  },
  "LoadText|pysssss": {
    input: {
      required: {
        root_dir: [["input", "output", "temp"], {}],
        file: [
          ["[none]"],
          {
            "pysssss.binding": [
              {
                source: "root_dir",
                callback: [
                  {
                    type: "set",
                    target: "$this.disabled",
                    value: true,
                  },
                  {
                    type: "fetch",
                    url: "/pysssss/text-file/{$source.value}",
                    then: [
                      {
                        type: "set",
                        target: "$this.options.values",
                        value: "$result",
                      },
                      {
                        type: "validate-combo",
                      },
                      {
                        type: "set",
                        target: "$this.disabled",
                        value: false,
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "LoadText|pysssss",
    display_name: "Load Text 🐍",
    description: "",
    category: "utils",
    output_node: false,
  },
  "SaveText|pysssss": {
    input: {
      required: {
        root_dir: [["input", "output", "temp"], {}],
        file: [
          "STRING",
          {
            default: "file.txt",
          },
        ],
        append: [["append", "overwrite", "new only"], {}],
        insert: [
          "BOOLEAN",
          {
            default: true,
            label_on: "new line",
            label_off: "none",
            "pysssss.binding": [
              {
                source: "append",
                callback: [
                  {
                    type: "if",
                    condition: [
                      {
                        left: "$source.value",
                        op: "eq",
                        right: '"append"',
                      },
                    ],
                    true: [
                      {
                        type: "set",
                        target: "$this.disabled",
                        value: false,
                      },
                    ],
                    false: [
                      {
                        type: "set",
                        target: "$this.disabled",
                        value: true,
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
        text: [
          "STRING",
          {
            forceInput: true,
            multiline: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "SaveText|pysssss",
    display_name: "Save Text 🐍",
    description: "",
    category: "utils",
    output_node: true,
  },
  SAMLoader: {
    input: {
      required: {
        model_name: [["sams.safetensors", "ESAM"]],
        device_mode: [["AUTO", "Prefer GPU", "CPU"]],
      },
    },
    output: ["SAM_MODEL"],
    output_is_list: [false],
    output_name: ["SAM_MODEL"],
    name: "SAMLoader",
    display_name: "SAMLoader (Impact)",
    description: "",
    category: "ImpactPack",
    output_node: false,
  },
  CLIPSegDetectorProvider: {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
          },
        ],
        blur: [
          "FLOAT",
          {
            min: 0,
            max: 15,
            step: 0.1,
            default: 7,
          },
        ],
        threshold: [
          "FLOAT",
          {
            min: 0,
            max: 1,
            step: 0.05,
            default: 0.4,
          },
        ],
        dilation_factor: [
          "INT",
          {
            min: 0,
            max: 10,
            step: 1,
            default: 4,
          },
        ],
      },
    },
    output: ["BBOX_DETECTOR"],
    output_is_list: [false],
    output_name: ["BBOX_DETECTOR"],
    name: "CLIPSegDetectorProvider",
    display_name: "CLIPSegDetectorProvider",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ONNXDetectorProvider: {
    input: {
      required: {
        model_name: [[]],
      },
    },
    output: ["BBOX_DETECTOR"],
    output_is_list: [false],
    output_name: ["BBOX_DETECTOR"],
    name: "ONNXDetectorProvider",
    display_name: "ONNXDetectorProvider",
    description: "",
    category: "ImpactPack",
    output_node: false,
  },
  BitwiseAndMaskForEach: {
    input: {
      required: {
        base_segs: ["SEGS"],
        mask_segs: ["SEGS"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "BitwiseAndMaskForEach",
    display_name: "Pixelwise(SEGS & SEGS)",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  SubtractMaskForEach: {
    input: {
      required: {
        base_segs: ["SEGS"],
        mask_segs: ["SEGS"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "SubtractMaskForEach",
    display_name: "Pixelwise(SEGS - SEGS)",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  DetailerForEach: {
    input: {
      required: {
        image: ["IMAGE"],
        segs: ["SEGS"],
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        detailer_hook: ["DETAILER_HOOK"],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "DetailerForEach",
    display_name: "Detailer (SEGS)",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  DetailerForEachDebug: {
    input: {
      required: {
        image: ["IMAGE"],
        segs: ["SEGS"],
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        detailer_hook: ["DETAILER_HOOK"],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE", "IMAGE", "IMAGE"],
    output_is_list: [false, true, true, true, true],
    output_name: [
      "image",
      "cropped",
      "cropped_refined",
      "cropped_refined_alpha",
      "cnet_images",
    ],
    name: "DetailerForEachDebug",
    display_name: "DetailerDebug (SEGS)",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  DetailerForEachPipe: {
    input: {
      required: {
        image: ["IMAGE"],
        segs: ["SEGS"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        basic_pipe: ["BASIC_PIPE"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        refiner_ratio: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        detailer_hook: ["DETAILER_HOOK"],
        refiner_basic_pipe_opt: ["BASIC_PIPE"],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE", "SEGS", "BASIC_PIPE", "IMAGE"],
    output_is_list: [false, false, false, true],
    output_name: ["image", "segs", "basic_pipe", "cnet_images"],
    name: "DetailerForEachPipe",
    display_name: "Detailer (SEGS/pipe)",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  DetailerForEachDebugPipe: {
    input: {
      required: {
        image: ["IMAGE"],
        segs: ["SEGS"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        basic_pipe: ["BASIC_PIPE"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        refiner_ratio: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        detailer_hook: ["DETAILER_HOOK"],
        refiner_basic_pipe_opt: ["BASIC_PIPE"],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE", "SEGS", "BASIC_PIPE", "IMAGE", "IMAGE", "IMAGE", "IMAGE"],
    output_is_list: [false, false, false, true, true, true, true],
    output_name: [
      "image",
      "segs",
      "basic_pipe",
      "cropped",
      "cropped_refined",
      "cropped_refined_alpha",
      "cnet_images",
    ],
    name: "DetailerForEachDebugPipe",
    display_name: "DetailerDebug (SEGS/pipe)",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  DetailerForEachPipeForAnimateDiff: {
    input: {
      required: {
        image_frames: ["IMAGE"],
        segs: ["SEGS"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        basic_pipe: ["BASIC_PIPE"],
        refiner_ratio: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
          },
        ],
      },
      optional: {
        detailer_hook: ["DETAILER_HOOK"],
        refiner_basic_pipe_opt: ["BASIC_PIPE"],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE", "SEGS", "BASIC_PIPE", "IMAGE"],
    output_is_list: [false, false, false, true],
    output_name: ["image", "segs", "basic_pipe", "cnet_images"],
    name: "DetailerForEachPipeForAnimateDiff",
    display_name: "Detailer For AnimateDiff (SEGS/pipe)",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  SAMDetectorCombined: {
    input: {
      required: {
        sam_model: ["SAM_MODEL"],
        segs: ["SEGS"],
        image: ["IMAGE"],
        detection_hint: [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none",
          ],
        ],
        dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        threshold: [
          "FLOAT",
          {
            default: 0.93,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        mask_hint_use_negative: [["False", "Small", "Outter"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "SAMDetectorCombined",
    display_name: "SAMDetector (combined)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  SAMDetectorSegmented: {
    input: {
      required: {
        sam_model: ["SAM_MODEL"],
        segs: ["SEGS"],
        image: ["IMAGE"],
        detection_hint: [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none",
          ],
        ],
        dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        threshold: [
          "FLOAT",
          {
            default: 0.93,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        mask_hint_use_negative: [["False", "Small", "Outter"]],
      },
    },
    output: ["MASK", "MASK"],
    output_is_list: [false, false],
    output_name: ["combined_mask", "batch_masks"],
    name: "SAMDetectorSegmented",
    display_name: "SAMDetector (segmented)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  FaceDetailer: {
    input: {
      required: {
        image: ["IMAGE"],
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        bbox_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        bbox_crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
        sam_detection_hint: [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none",
          ],
        ],
        sam_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        sam_threshold: [
          "FLOAT",
          {
            default: 0.93,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sam_bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        sam_mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sam_mask_hint_use_negative: [["False", "Small", "Outter"]],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        bbox_detector: ["BBOX_DETECTOR"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        sam_model_opt: ["SAM_MODEL"],
        segm_detector_opt: ["SEGM_DETECTOR"],
        detailer_hook: ["DETAILER_HOOK"],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE", "MASK", "DETAILER_PIPE", "IMAGE"],
    output_is_list: [false, true, true, false, false, true],
    output_name: [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "mask",
      "detailer_pipe",
      "cnet_images",
    ],
    name: "FaceDetailer",
    display_name: "FaceDetailer",
    description: "",
    category: "ImpactPack/Simple",
    output_node: false,
  },
  FaceDetailerPipe: {
    input: {
      required: {
        image: ["IMAGE"],
        detailer_pipe: ["DETAILER_PIPE"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        bbox_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        bbox_crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
        sam_detection_hint: [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none",
          ],
        ],
        sam_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        sam_threshold: [
          "FLOAT",
          {
            default: 0.93,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sam_bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        sam_mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sam_mask_hint_use_negative: [["False", "Small", "Outter"]],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        refiner_ratio: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE", "MASK", "DETAILER_PIPE", "IMAGE"],
    output_is_list: [false, true, true, false, false, true],
    output_name: [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "mask",
      "detailer_pipe",
      "cnet_images",
    ],
    name: "FaceDetailerPipe",
    display_name: "FaceDetailer (pipe)",
    description: "",
    category: "ImpactPack/Simple",
    output_node: false,
  },
  MaskDetailerPipe: {
    input: {
      required: {
        image: ["IMAGE"],
        mask: ["MASK"],
        basic_pipe: ["BASIC_PIPE"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "mask bbox",
            label_off: "crop region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 1024,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        mask_mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "masked only",
            label_off: "whole",
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        refiner_ratio: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 100,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        refiner_basic_pipe_opt: ["BASIC_PIPE"],
        detailer_hook: ["DETAILER_HOOK"],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE", "BASIC_PIPE", "BASIC_PIPE"],
    output_is_list: [false, true, true, false, false],
    output_name: [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "basic_pipe",
      "refiner_basic_pipe_opt",
    ],
    name: "MaskDetailerPipe",
    display_name: "MaskDetailer (pipe)",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  ToDetailerPipe: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        bbox_detector: ["BBOX_DETECTOR"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        "Select to add Wildcard": [["Select the Wildcard to add to the text"]],
      },
      optional: {
        sam_model_opt: ["SAM_MODEL"],
        segm_detector_opt: ["SEGM_DETECTOR"],
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["DETAILER_PIPE"],
    output_is_list: [false],
    output_name: ["detailer_pipe"],
    name: "ToDetailerPipe",
    display_name: "ToDetailerPipe",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  ToDetailerPipeSDXL: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        refiner_model: ["MODEL"],
        refiner_clip: ["CLIP"],
        refiner_positive: ["CONDITIONING"],
        refiner_negative: ["CONDITIONING"],
        bbox_detector: ["BBOX_DETECTOR"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        "Select to add Wildcard": [["Select the Wildcard to add to the text"]],
      },
      optional: {
        sam_model_opt: ["SAM_MODEL"],
        segm_detector_opt: ["SEGM_DETECTOR"],
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["DETAILER_PIPE"],
    output_is_list: [false],
    output_name: ["detailer_pipe"],
    name: "ToDetailerPipeSDXL",
    display_name: "ToDetailerPipeSDXL",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  FromDetailerPipe: {
    input: {
      required: {
        detailer_pipe: ["DETAILER_PIPE"],
      },
    },
    output: [
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook",
    ],
    name: "FromDetailerPipe",
    display_name: "FromDetailerPipe",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  FromDetailerPipe_v2: {
    input: {
      required: {
        detailer_pipe: ["DETAILER_PIPE"],
      },
    },
    output: [
      "DETAILER_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "detailer_pipe",
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook",
    ],
    name: "FromDetailerPipe_v2",
    display_name: "FromDetailerPipe_v2",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  FromDetailerPipeSDXL: {
    input: {
      required: {
        detailer_pipe: ["DETAILER_PIPE"],
      },
    },
    output: [
      "DETAILER_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK",
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "detailer_pipe",
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook",
      "refiner_model",
      "refiner_clip",
      "refiner_positive",
      "refiner_negative",
    ],
    name: "FromDetailerPipeSDXL",
    display_name: "FromDetailer (SDXL/pipe)",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  ToBasicPipe: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
      },
    },
    output: ["BASIC_PIPE"],
    output_is_list: [false],
    output_name: ["basic_pipe"],
    name: "ToBasicPipe",
    display_name: "ToBasicPipe",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  FromBasicPipe: {
    input: {
      required: {
        basic_pipe: ["BASIC_PIPE"],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["model", "clip", "vae", "positive", "negative"],
    name: "FromBasicPipe",
    display_name: "FromBasicPipe",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  FromBasicPipe_v2: {
    input: {
      required: {
        basic_pipe: ["BASIC_PIPE"],
      },
    },
    output: [
      "BASIC_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
    ],
    output_is_list: [false, false, false, false, false, false],
    output_name: ["basic_pipe", "model", "clip", "vae", "positive", "negative"],
    name: "FromBasicPipe_v2",
    display_name: "FromBasicPipe_v2",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  BasicPipeToDetailerPipe: {
    input: {
      required: {
        basic_pipe: ["BASIC_PIPE"],
        bbox_detector: ["BBOX_DETECTOR"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        "Select to add Wildcard": [["Select the Wildcard to add to the text"]],
      },
      optional: {
        sam_model_opt: ["SAM_MODEL"],
        segm_detector_opt: ["SEGM_DETECTOR"],
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["DETAILER_PIPE"],
    output_is_list: [false],
    output_name: ["detailer_pipe"],
    name: "BasicPipeToDetailerPipe",
    display_name: "BasicPipe -> DetailerPipe",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  BasicPipeToDetailerPipeSDXL: {
    input: {
      required: {
        base_basic_pipe: ["BASIC_PIPE"],
        refiner_basic_pipe: ["BASIC_PIPE"],
        bbox_detector: ["BBOX_DETECTOR"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        "Select to add Wildcard": [["Select the Wildcard to add to the text"]],
      },
      optional: {
        sam_model_opt: ["SAM_MODEL"],
        segm_detector_opt: ["SEGM_DETECTOR"],
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["DETAILER_PIPE"],
    output_is_list: [false],
    output_name: ["detailer_pipe"],
    name: "BasicPipeToDetailerPipeSDXL",
    display_name: "BasicPipe -> DetailerPipe (SDXL)",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  DetailerPipeToBasicPipe: {
    input: {
      required: {
        detailer_pipe: ["DETAILER_PIPE"],
      },
    },
    output: ["BASIC_PIPE", "BASIC_PIPE"],
    output_is_list: [false, false],
    output_name: ["base_basic_pipe", "refiner_basic_pipe"],
    name: "DetailerPipeToBasicPipe",
    display_name: "DetailerPipe -> BasicPipe",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  EditBasicPipe: {
    input: {
      required: {
        basic_pipe: ["BASIC_PIPE"],
      },
      optional: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
      },
    },
    output: ["BASIC_PIPE"],
    output_is_list: [false],
    output_name: ["basic_pipe"],
    name: "EditBasicPipe",
    display_name: "Edit BasicPipe",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  EditDetailerPipe: {
    input: {
      required: {
        detailer_pipe: ["DETAILER_PIPE"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        "Select to add Wildcard": [["Select the Wildcard to add to the text"]],
      },
      optional: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        bbox_detector: ["BBOX_DETECTOR"],
        sam_model: ["SAM_MODEL"],
        segm_detector: ["SEGM_DETECTOR"],
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["DETAILER_PIPE"],
    output_is_list: [false],
    output_name: ["detailer_pipe"],
    name: "EditDetailerPipe",
    display_name: "Edit DetailerPipe",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  EditDetailerPipeSDXL: {
    input: {
      required: {
        detailer_pipe: ["DETAILER_PIPE"],
        wildcard: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        "Select to add Wildcard": [["Select the Wildcard to add to the text"]],
      },
      optional: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        refiner_model: ["MODEL"],
        refiner_clip: ["CLIP"],
        refiner_positive: ["CONDITIONING"],
        refiner_negative: ["CONDITIONING"],
        bbox_detector: ["BBOX_DETECTOR"],
        sam_model: ["SAM_MODEL"],
        segm_detector: ["SEGM_DETECTOR"],
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["DETAILER_PIPE"],
    output_is_list: [false],
    output_name: ["detailer_pipe"],
    name: "EditDetailerPipeSDXL",
    display_name: "Edit DetailerPipe (SDXL)",
    description: "",
    category: "ImpactPack/Pipe",
    output_node: false,
  },
  LatentPixelScale: {
    input: {
      required: {
        samples: ["LATENT"],
        scale_method: [["nearest-exact", "bilinear", "lanczos", "area"]],
        scale_factor: [
          "FLOAT",
          {
            default: 1.5,
            min: 0.1,
            max: 10000,
            step: 0.1,
          },
        ],
        vae: ["VAE"],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
      },
      optional: {
        upscale_model_opt: ["UPSCALE_MODEL"],
      },
    },
    output: ["LATENT", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["LATENT", "IMAGE"],
    name: "LatentPixelScale",
    display_name: "Latent Scale (on Pixel Space)",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  PixelKSampleUpscalerProvider: {
    input: {
      required: {
        scale_method: [["nearest-exact", "bilinear", "lanczos", "area"]],
        model: ["MODEL"],
        vae: ["VAE"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        tile_size: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 4096,
            step: 64,
          },
        ],
      },
      optional: {
        upscale_model_opt: ["UPSCALE_MODEL"],
        pk_hook_opt: ["PK_HOOK"],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["UPSCALER"],
    output_is_list: [false],
    output_name: ["UPSCALER"],
    name: "PixelKSampleUpscalerProvider",
    display_name: "PixelKSampleUpscalerProvider",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  PixelKSampleUpscalerProviderPipe: {
    input: {
      required: {
        scale_method: [["nearest-exact", "bilinear", "lanczos", "area"]],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        basic_pipe: ["BASIC_PIPE"],
        tile_size: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 4096,
            step: 64,
          },
        ],
      },
      optional: {
        upscale_model_opt: ["UPSCALE_MODEL"],
        pk_hook_opt: ["PK_HOOK"],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["UPSCALER"],
    output_is_list: [false],
    output_name: ["UPSCALER"],
    name: "PixelKSampleUpscalerProviderPipe",
    display_name: "PixelKSampleUpscalerProviderPipe",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  IterativeLatentUpscale: {
    input: {
      required: {
        samples: ["LATENT"],
        upscale_factor: [
          "FLOAT",
          {
            default: 1.5,
            min: 1,
            max: 10000,
            step: 0.1,
          },
        ],
        steps: [
          "INT",
          {
            default: 3,
            min: 1,
            max: 10000,
            step: 1,
          },
        ],
        temp_prefix: [
          "STRING",
          {
            default: "",
          },
        ],
        upscaler: ["UPSCALER"],
        step_mode: [
          ["simple", "geometric"],
          {
            default: "simple",
          },
        ],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["LATENT", "VAE"],
    output_is_list: [false, false],
    output_name: ["latent", "vae"],
    name: "IterativeLatentUpscale",
    display_name: "Iterative Upscale (Latent/on Pixel Space)",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  IterativeImageUpscale: {
    input: {
      required: {
        pixels: ["IMAGE"],
        upscale_factor: [
          "FLOAT",
          {
            default: 1.5,
            min: 1,
            max: 10000,
            step: 0.1,
          },
        ],
        steps: [
          "INT",
          {
            default: 3,
            min: 1,
            max: 10000,
            step: 1,
          },
        ],
        temp_prefix: [
          "STRING",
          {
            default: "",
          },
        ],
        upscaler: ["UPSCALER"],
        vae: ["VAE"],
        step_mode: [
          ["simple", "geometric"],
          {
            default: "simple",
          },
        ],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "IterativeImageUpscale",
    display_name: "Iterative Upscale (Image)",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  PixelTiledKSampleUpscalerProvider: {
    input: {
      required: {
        scale_method: [["nearest-exact", "bilinear", "lanczos", "area"]],
        model: ["MODEL"],
        vae: ["VAE"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        tile_width: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 16384,
            step: 64,
          },
        ],
        tile_height: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 16384,
            step: 64,
          },
        ],
        tiling_strategy: [["random", "padded", "simple"]],
      },
      optional: {
        upscale_model_opt: ["UPSCALE_MODEL"],
        pk_hook_opt: ["PK_HOOK"],
        tile_cnet_opt: ["CONTROL_NET"],
        tile_cnet_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["UPSCALER"],
    output_is_list: [false],
    output_name: ["UPSCALER"],
    name: "PixelTiledKSampleUpscalerProvider",
    display_name: "PixelTiledKSampleUpscalerProvider",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  PixelTiledKSampleUpscalerProviderPipe: {
    input: {
      required: {
        scale_method: [["nearest-exact", "bilinear", "lanczos", "area"]],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        tile_width: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 16384,
            step: 64,
          },
        ],
        tile_height: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 16384,
            step: 64,
          },
        ],
        tiling_strategy: [["random", "padded", "simple"]],
        basic_pipe: ["BASIC_PIPE"],
      },
      optional: {
        upscale_model_opt: ["UPSCALE_MODEL"],
        pk_hook_opt: ["PK_HOOK"],
        tile_cnet_opt: ["CONTROL_NET"],
        tile_cnet_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["UPSCALER"],
    output_is_list: [false],
    output_name: ["UPSCALER"],
    name: "PixelTiledKSampleUpscalerProviderPipe",
    display_name: "PixelTiledKSampleUpscalerProviderPipe",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  TwoSamplersForMaskUpscalerProvider: {
    input: {
      required: {
        scale_method: [["nearest-exact", "bilinear", "lanczos", "area"]],
        full_sample_schedule: [
          [
            "none",
            "interleave1",
            "interleave2",
            "interleave3",
            "last1",
            "last2",
            "interleave1+last1",
            "interleave2+last1",
            "interleave3+last1",
          ],
        ],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        base_sampler: ["KSAMPLER"],
        mask_sampler: ["KSAMPLER"],
        mask: ["MASK"],
        vae: ["VAE"],
        tile_size: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 4096,
            step: 64,
          },
        ],
      },
      optional: {
        full_sampler_opt: ["KSAMPLER"],
        upscale_model_opt: ["UPSCALE_MODEL"],
        pk_hook_base_opt: ["PK_HOOK"],
        pk_hook_mask_opt: ["PK_HOOK"],
        pk_hook_full_opt: ["PK_HOOK"],
      },
    },
    output: ["UPSCALER"],
    output_is_list: [false],
    output_name: ["UPSCALER"],
    name: "TwoSamplersForMaskUpscalerProvider",
    display_name: "TwoSamplersForMask Upscaler Provider",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  TwoSamplersForMaskUpscalerProviderPipe: {
    input: {
      required: {
        scale_method: [["nearest-exact", "bilinear", "lanczos", "area"]],
        full_sample_schedule: [
          [
            "none",
            "interleave1",
            "interleave2",
            "interleave3",
            "last1",
            "last2",
            "interleave1+last1",
            "interleave2+last1",
            "interleave3+last1",
          ],
        ],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        base_sampler: ["KSAMPLER"],
        mask_sampler: ["KSAMPLER"],
        mask: ["MASK"],
        basic_pipe: ["BASIC_PIPE"],
        tile_size: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 4096,
            step: 64,
          },
        ],
      },
      optional: {
        full_sampler_opt: ["KSAMPLER"],
        upscale_model_opt: ["UPSCALE_MODEL"],
        pk_hook_base_opt: ["PK_HOOK"],
        pk_hook_mask_opt: ["PK_HOOK"],
        pk_hook_full_opt: ["PK_HOOK"],
      },
    },
    output: ["UPSCALER"],
    output_is_list: [false],
    output_name: ["UPSCALER"],
    name: "TwoSamplersForMaskUpscalerProviderPipe",
    display_name: "TwoSamplersForMask Upscaler Provider (pipe)",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  PixelKSampleHookCombine: {
    input: {
      required: {
        hook1: ["PK_HOOK"],
        hook2: ["PK_HOOK"],
      },
    },
    output: ["PK_HOOK"],
    output_is_list: [false],
    output_name: ["PK_HOOK"],
    name: "PixelKSampleHookCombine",
    display_name: "PixelKSampleHookCombine",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  DenoiseScheduleHookProvider: {
    input: {
      required: {
        schedule_for_iteration: [["simple"]],
        target_denoise: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["PK_HOOK"],
    output_is_list: [false],
    output_name: ["PK_HOOK"],
    name: "DenoiseScheduleHookProvider",
    display_name: "DenoiseScheduleHookProvider",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  StepsScheduleHookProvider: {
    input: {
      required: {
        schedule_for_iteration: [["simple"]],
        target_steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
      },
    },
    output: ["PK_HOOK"],
    output_is_list: [false],
    output_name: ["PK_HOOK"],
    name: "StepsScheduleHookProvider",
    display_name: "StepsScheduleHookProvider",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  CfgScheduleHookProvider: {
    input: {
      required: {
        schedule_for_iteration: [["simple"]],
        target_cfg: [
          "FLOAT",
          {
            default: 3,
            min: 0,
            max: 100,
          },
        ],
      },
    },
    output: ["PK_HOOK"],
    output_is_list: [false],
    output_name: ["PK_HOOK"],
    name: "CfgScheduleHookProvider",
    display_name: "CfgScheduleHookProvider",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  NoiseInjectionHookProvider: {
    input: {
      required: {
        schedule_for_iteration: [["simple"]],
        source: [["CPU", "GPU"]],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        start_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 200,
            step: 0.01,
          },
        ],
        end_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 200,
            step: 0.01,
          },
        ],
      },
    },
    output: ["PK_HOOK"],
    output_is_list: [false],
    output_name: ["PK_HOOK"],
    name: "NoiseInjectionHookProvider",
    display_name: "NoiseInjectionHookProvider",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  UnsamplerHookProvider: {
    input: {
      required: {
        model: ["MODEL"],
        steps: [
          "INT",
          {
            default: 25,
            min: 1,
            max: 10000,
          },
        ],
        start_end_at_step: [
          "INT",
          {
            default: 21,
            min: 0,
            max: 10000,
          },
        ],
        end_end_at_step: [
          "INT",
          {
            default: 24,
            min: 0,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        normalize: [["disable", "enable"]],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        schedule_for_iteration: [["simple"]],
      },
    },
    output: ["PK_HOOK"],
    output_is_list: [false],
    output_name: ["PK_HOOK"],
    name: "UnsamplerHookProvider",
    display_name: "UnsamplerHookProvider",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  CoreMLDetailerHookProvider: {
    input: {
      required: {
        mode: [["512x512", "768x768", "512x768", "768x512"]],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "CoreMLDetailerHookProvider",
    display_name: "CoreMLDetailerHookProvider",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  PreviewDetailerHookProvider: {
    input: {
      required: {
        quality: [
          "INT",
          {
            default: 95,
            min: 20,
            max: 100,
          },
        ],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["DETAILER_HOOK", "UPSCALER_HOOK"],
    output_is_list: [false, false],
    output_name: ["DETAILER_HOOK", "UPSCALER_HOOK"],
    name: "PreviewDetailerHookProvider",
    display_name: "PreviewDetailerHookProvider",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  DetailerHookCombine: {
    input: {
      required: {
        hook1: ["DETAILER_HOOK"],
        hook2: ["DETAILER_HOOK"],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "DetailerHookCombine",
    display_name: "DetailerHookCombine",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  NoiseInjectionDetailerHookProvider: {
    input: {
      required: {
        schedule_for_cycle: [["skip_start", "from_start"]],
        source: [["CPU", "GPU"]],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        start_strength: [
          "FLOAT",
          {
            default: 2,
            min: 0,
            max: 200,
            step: 0.01,
          },
        ],
        end_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 200,
            step: 0.01,
          },
        ],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "NoiseInjectionDetailerHookProvider",
    display_name: "NoiseInjectionDetailerHookProvider",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  UnsamplerDetailerHookProvider: {
    input: {
      required: {
        model: ["MODEL"],
        steps: [
          "INT",
          {
            default: 25,
            min: 1,
            max: 10000,
          },
        ],
        start_end_at_step: [
          "INT",
          {
            default: 21,
            min: 0,
            max: 10000,
          },
        ],
        end_end_at_step: [
          "INT",
          {
            default: 24,
            min: 0,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        normalize: [["disable", "enable"]],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        schedule_for_cycle: [["skip_start", "from_start"]],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "UnsamplerDetailerHookProvider",
    display_name: "UnsamplerDetailerHookProvider",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  DenoiseSchedulerDetailerHookProvider: {
    input: {
      required: {
        schedule_for_cycle: [["simple"]],
        target_denoise: [
          "FLOAT",
          {
            default: 0.3,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "DenoiseSchedulerDetailerHookProvider",
    display_name: "DenoiseSchedulerDetailerHookProvider",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  SEGSOrderedFilterDetailerHookProvider: {
    input: {
      required: {
        target: [["area(=w*h)", "width", "height", "x1", "y1", "x2", "y2"]],
        order: [
          "BOOLEAN",
          {
            default: true,
            label_on: "descending",
            label_off: "ascending",
          },
        ],
        take_start: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
        take_count: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "SEGSOrderedFilterDetailerHookProvider",
    display_name: "SEGSOrderedFilterDetailerHookProvider",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  SEGSRangeFilterDetailerHookProvider: {
    input: {
      required: {
        target: [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "length_percent",
          ],
        ],
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "inside",
            label_off: "outside",
          },
        ],
        min_value: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
        max_value: [
          "INT",
          {
            default: 67108864,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "SEGSRangeFilterDetailerHookProvider",
    display_name: "SEGSRangeFilterDetailerHookProvider",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  SEGSLabelFilterDetailerHookProvider: {
    input: {
      required: {
        segs: ["SEGS"],
        preset: [
          [
            "all",
            "hand",
            "face",
            "mouth",
            "eyes",
            "eyebrows",
            "pupils",
            "left_eyebrow",
            "left_eye",
            "left_pupil",
            "right_eyebrow",
            "right_eye",
            "right_pupil",
            "short_sleeved_shirt",
            "long_sleeved_shirt",
            "short_sleeved_outwear",
            "long_sleeved_outwear",
            "vest",
            "sling",
            "shorts",
            "trousers",
            "skirt",
            "short_sleeved_dress",
            "long_sleeved_dress",
            "vest_dress",
            "sling_dress",
            "person",
            "bicycle",
            "car",
            "motorcycle",
            "airplane",
            "bus",
            "train",
            "truck",
            "boat",
            "traffic light",
            "fire hydrant",
            "stop sign",
            "parking meter",
            "bench",
            "bird",
            "cat",
            "dog",
            "horse",
            "sheep",
            "cow",
            "elephant",
            "bear",
            "zebra",
            "giraffe",
            "backpack",
            "umbrella",
            "handbag",
            "tie",
            "suitcase",
            "frisbee",
            "skis",
            "snowboard",
            "sports ball",
            "kite",
            "baseball bat",
            "baseball glove",
            "skateboard",
            "surfboard",
            "tennis racket",
            "bottle",
            "wine glass",
            "cup",
            "fork",
            "knife",
            "spoon",
            "bowl",
            "banana",
            "apple",
            "sandwich",
            "orange",
            "broccoli",
            "carrot",
            "hot dog",
            "pizza",
            "donut",
            "cake",
            "chair",
            "couch",
            "potted plant",
            "bed",
            "dining table",
            "toilet",
            "tv",
            "laptop",
            "mouse",
            "remote",
            "keyboard",
            "cell phone",
            "microwave",
            "oven",
            "toaster",
            "sink",
            "refrigerator",
            "book",
            "clock",
            "vase",
            "scissors",
            "teddy bear",
            "hair drier",
            "toothbrush",
          ],
        ],
        labels: [
          "STRING",
          {
            multiline: true,
            placeholder:
              "List the types of segments to be allowed, separated by commas",
          },
        ],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "SEGSLabelFilterDetailerHookProvider",
    display_name: "SEGSLabelFilterDetailerHookProvider",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  VariationNoiseDetailerHookProvider: {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        strength: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["DETAILER_HOOK"],
    output_is_list: [false],
    output_name: ["DETAILER_HOOK"],
    name: "VariationNoiseDetailerHookProvider",
    display_name: "VariationNoiseDetailerHookProvider",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  BitwiseAndMask: {
    input: {
      required: {
        mask1: ["MASK"],
        mask2: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "BitwiseAndMask",
    display_name: "Pixelwise(MASK & MASK)",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  SubtractMask: {
    input: {
      required: {
        mask1: ["MASK"],
        mask2: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "SubtractMask",
    display_name: "Pixelwise(MASK - MASK)",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  AddMask: {
    input: {
      required: {
        mask1: ["MASK"],
        mask2: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "AddMask",
    display_name: "Pixelwise(MASK + MASK)",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  ImpactSegsAndMask: {
    input: {
      required: {
        segs: ["SEGS"],
        mask: ["MASK"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactSegsAndMask",
    display_name: "Pixelwise(SEGS & MASK)",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  ImpactSegsAndMaskForEach: {
    input: {
      required: {
        segs: ["SEGS"],
        masks: ["MASK"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactSegsAndMaskForEach",
    display_name: "Pixelwise(SEGS & MASKS ForEach)",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  EmptySegs: {
    input: {
      required: {},
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "EmptySegs",
    display_name: "EmptySegs",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  MediaPipeFaceMeshToSEGS: {
    input: {
      required: {
        image: ["IMAGE"],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        bbox_fill: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        crop_min_size: [
          "INT",
          {
            min: 10,
            max: 16384,
            step: 1,
            default: 50,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 1,
          },
        ],
        dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        face: [
          "BOOLEAN",
          {
            default: true,
            label_on: "Enabled",
            label_off: "Disabled",
          },
        ],
        mouth: [
          "BOOLEAN",
          {
            default: false,
            label_on: "Enabled",
            label_off: "Disabled",
          },
        ],
        left_eyebrow: [
          "BOOLEAN",
          {
            default: false,
            label_on: "Enabled",
            label_off: "Disabled",
          },
        ],
        left_eye: [
          "BOOLEAN",
          {
            default: false,
            label_on: "Enabled",
            label_off: "Disabled",
          },
        ],
        left_pupil: [
          "BOOLEAN",
          {
            default: false,
            label_on: "Enabled",
            label_off: "Disabled",
          },
        ],
        right_eyebrow: [
          "BOOLEAN",
          {
            default: false,
            label_on: "Enabled",
            label_off: "Disabled",
          },
        ],
        right_eye: [
          "BOOLEAN",
          {
            default: false,
            label_on: "Enabled",
            label_off: "Disabled",
          },
        ],
        right_pupil: [
          "BOOLEAN",
          {
            default: false,
            label_on: "Enabled",
            label_off: "Disabled",
          },
        ],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "MediaPipeFaceMeshToSEGS",
    display_name: "MediaPipe FaceMesh to SEGS",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  MaskToSEGS: {
    input: {
      required: {
        mask: ["MASK"],
        combined: [
          "BOOLEAN",
          {
            default: false,
            label_on: "True",
            label_off: "False",
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        bbox_fill: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        contour_fill: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "MaskToSEGS",
    display_name: "MASK to SEGS",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  MaskToSEGS_for_AnimateDiff: {
    input: {
      required: {
        mask: ["MASK"],
        combined: [
          "BOOLEAN",
          {
            default: false,
            label_on: "True",
            label_off: "False",
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        bbox_fill: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        contour_fill: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "MaskToSEGS_for_AnimateDiff",
    display_name: "MASK to SEGS for AnimateDiff",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  ToBinaryMask: {
    input: {
      required: {
        mask: ["MASK"],
        threshold: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 255,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ToBinaryMask",
    display_name: "ToBinaryMask",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  MasksToMaskList: {
    input: {
      required: {
        masks: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [true],
    output_name: ["MASK"],
    name: "MasksToMaskList",
    display_name: "Masks to Mask List",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  MaskListToMaskBatch: {
    input: {
      required: {
        mask: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskListToMaskBatch",
    display_name: "Mask List to Masks",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  ImageListToImageBatch: {
    input: {
      required: {
        images: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageListToImageBatch",
    display_name: "Image List to Image Batch",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  SetDefaultImageForSEGS: {
    input: {
      required: {
        segs: ["SEGS"],
        image: ["IMAGE"],
        override: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "SetDefaultImageForSEGS",
    display_name: "Set Default Image for SEGS",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  RemoveImageFromSEGS: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "RemoveImageFromSEGS",
    display_name: "Remove Image from SEGS",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  BboxDetectorSEGS: {
    input: {
      required: {
        bbox_detector: ["BBOX_DETECTOR"],
        image: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        labels: [
          "STRING",
          {
            multiline: true,
            default: "all",
            placeholder:
              "List the types of segments to be allowed, separated by commas",
          },
        ],
      },
      optional: {
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "BboxDetectorSEGS",
    display_name: "BBOX Detector (SEGS)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  SegmDetectorSEGS: {
    input: {
      required: {
        segm_detector: ["SEGM_DETECTOR"],
        image: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        labels: [
          "STRING",
          {
            multiline: true,
            default: "all",
            placeholder:
              "List the types of segments to be allowed, separated by commas",
          },
        ],
      },
      optional: {
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "SegmDetectorSEGS",
    display_name: "SEGM Detector (SEGS)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  ONNXDetectorSEGS: {
    input: {
      required: {
        bbox_detector: ["BBOX_DETECTOR"],
        image: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        labels: [
          "STRING",
          {
            multiline: true,
            default: "all",
            placeholder:
              "List the types of segments to be allowed, separated by commas",
          },
        ],
      },
      optional: {
        detailer_hook: ["DETAILER_HOOK"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ONNXDetectorSEGS",
    display_name: "ONNX Detector (SEGS/legacy) - use BBOXDetector",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  ImpactSimpleDetectorSEGS_for_AD: {
    input: {
      required: {
        bbox_detector: ["BBOX_DETECTOR"],
        image_frames: ["IMAGE"],
        bbox_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_dilation: [
          "INT",
          {
            default: 0,
            min: -255,
            max: 255,
            step: 1,
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        sub_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sub_dilation: [
          "INT",
          {
            default: 0,
            min: -255,
            max: 255,
            step: 1,
          },
        ],
        sub_bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        sam_mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        masking_mode: [
          ["Pivot SEGS", "Combine neighboring frames", "Don't combine"],
        ],
        segs_pivot: [["Combined mask", "1st frame mask"]],
        sam_model_opt: ["SAM_MODEL"],
        segm_detector_opt: ["SEGM_DETECTOR"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactSimpleDetectorSEGS_for_AD",
    display_name: "Simple Detector for AnimateDiff (SEGS)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  ImpactSimpleDetectorSEGS: {
    input: {
      required: {
        bbox_detector: ["BBOX_DETECTOR"],
        image: ["IMAGE"],
        bbox_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        sub_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sub_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        sub_bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        sam_mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        post_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        sam_model_opt: ["SAM_MODEL"],
        segm_detector_opt: ["SEGM_DETECTOR"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactSimpleDetectorSEGS",
    display_name: "Simple Detector (SEGS)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  ImpactSimpleDetectorSEGSPipe: {
    input: {
      required: {
        detailer_pipe: ["DETAILER_PIPE"],
        image: ["IMAGE"],
        bbox_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        sub_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        sub_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        sub_bbox_expansion: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 1,
          },
        ],
        sam_mask_hint_threshold: [
          "FLOAT",
          {
            default: 0.7,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        post_dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactSimpleDetectorSEGSPipe",
    display_name: "Simple Detector (SEGS/pipe)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  ImpactControlNetApplySEGS: {
    input: {
      required: {
        segs: ["SEGS"],
        control_net: ["CONTROL_NET"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
      optional: {
        segs_preprocessor: ["SEGS_PREPROCESSOR"],
        control_image: ["IMAGE"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactControlNetApplySEGS",
    display_name: "ControlNetApply (SEGS)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactControlNetApplyAdvancedSEGS: {
    input: {
      required: {
        segs: ["SEGS"],
        control_net: ["CONTROL_NET"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        segs_preprocessor: ["SEGS_PREPROCESSOR"],
        control_image: ["IMAGE"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactControlNetApplyAdvancedSEGS",
    display_name: "ControlNetApplyAdvanced (SEGS)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactControlNetClearSEGS: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactControlNetClearSEGS",
    display_name: "ImpactControlNetClearSEGS",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactIPAdapterApplySEGS: {
    input: {
      required: {
        segs: ["SEGS"],
        ipadapter_pipe: ["IPADAPTER_PIPE"],
        weight: [
          "FLOAT",
          {
            default: 0.7,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        noise: [
          "FLOAT",
          {
            default: 0.4,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        weight_type: [
          ["original", "linear", "channel penalty"],
          {
            default: "channel penalty",
          },
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 0.9,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        unfold_batch: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        faceid_v2: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        weight_v2: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        context_crop_factor: [
          "FLOAT",
          {
            default: 1.2,
            min: 1,
            max: 100,
            step: 0.1,
          },
        ],
        reference_image: ["IMAGE"],
      },
      optional: {
        combine_embeds: [
          ["concat", "add", "subtract", "average", "norm average"],
        ],
        neg_image: ["IMAGE"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactIPAdapterApplySEGS",
    display_name: "IPAdapterApply (SEGS)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactDecomposeSEGS: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["SEGS_HEADER", "SEG_ELT"],
    output_is_list: [false, true],
    output_name: ["SEGS_HEADER", "SEG_ELT"],
    name: "ImpactDecomposeSEGS",
    display_name: "Decompose (SEGS)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactAssembleSEGS: {
    input: {
      required: {
        seg_header: ["SEGS_HEADER"],
        seg_elt: ["SEG_ELT"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactAssembleSEGS",
    display_name: "Assemble (SEGS)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactFrom_SEG_ELT: {
    input: {
      required: {
        seg_elt: ["SEG_ELT"],
      },
    },
    output: [
      "SEG_ELT",
      "IMAGE",
      "MASK",
      "SEG_ELT_crop_region",
      "SEG_ELT_bbox",
      "SEG_ELT_control_net_wrapper",
      "FLOAT",
      "STRING",
    ],
    output_is_list: [false, false, false, false, false, false, false, false],
    output_name: [
      "seg_elt",
      "cropped_image",
      "cropped_mask",
      "crop_region",
      "bbox",
      "control_net_wrapper",
      "confidence",
      "label",
    ],
    name: "ImpactFrom_SEG_ELT",
    display_name: "From SEG_ELT",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactEdit_SEG_ELT: {
    input: {
      required: {
        seg_elt: ["SEG_ELT"],
      },
      optional: {
        cropped_image_opt: ["IMAGE"],
        cropped_mask_opt: ["MASK"],
        crop_region_opt: ["SEG_ELT_crop_region"],
        bbox_opt: ["SEG_ELT_bbox"],
        control_net_wrapper_opt: ["SEG_ELT_control_net_wrapper"],
        confidence_opt: [
          "FLOAT",
          {
            min: 0,
            max: 1,
            step: 0.1,
            forceInput: true,
          },
        ],
        label_opt: [
          "STRING",
          {
            multiline: false,
            forceInput: true,
          },
        ],
      },
    },
    output: ["SEG_ELT"],
    output_is_list: [false],
    output_name: ["SEG_ELT"],
    name: "ImpactEdit_SEG_ELT",
    display_name: "Edit SEG_ELT",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactDilate_Mask_SEG_ELT: {
    input: {
      required: {
        seg_elt: ["SEG_ELT"],
        dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
      },
    },
    output: ["SEG_ELT"],
    output_is_list: [false],
    output_name: ["SEG_ELT"],
    name: "ImpactDilate_Mask_SEG_ELT",
    display_name: "Dilate Mask (SEG_ELT)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactDilateMask: {
    input: {
      required: {
        mask: ["MASK"],
        dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ImpactDilateMask",
    display_name: "Dilate Mask",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactGaussianBlurMask: {
    input: {
      required: {
        mask: ["MASK"],
        kernel_size: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        sigma: [
          "FLOAT",
          {
            default: 10,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ImpactGaussianBlurMask",
    display_name: "Gaussian Blur Mask",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactDilateMaskInSEGS: {
    input: {
      required: {
        segs: ["SEGS"],
        dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactDilateMaskInSEGS",
    display_name: "Dilate Mask (SEGS)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactGaussianBlurMaskInSEGS: {
    input: {
      required: {
        segs: ["SEGS"],
        kernel_size: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        sigma: [
          "FLOAT",
          {
            default: 10,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactGaussianBlurMaskInSEGS",
    display_name: "Gaussian Blur Mask (SEGS)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactScaleBy_BBOX_SEG_ELT: {
    input: {
      required: {
        seg: ["SEG_ELT"],
        scale_by: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 8,
            step: 0.01,
          },
        ],
      },
    },
    output: ["SEG_ELT"],
    output_is_list: [false],
    output_name: ["SEG_ELT"],
    name: "ImpactScaleBy_BBOX_SEG_ELT",
    display_name: "ScaleBy BBOX (SEG_ELT)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactFrom_SEG_ELT_bbox: {
    input: {
      required: {
        bbox: ["SEG_ELT_bbox"],
      },
    },
    output: ["INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["left", "top", "right", "bottom"],
    name: "ImpactFrom_SEG_ELT_bbox",
    display_name: "From SEG_ELT bbox",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactFrom_SEG_ELT_crop_region: {
    input: {
      required: {
        crop_region: ["SEG_ELT_crop_region"],
      },
    },
    output: ["INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["left", "top", "right", "bottom"],
    name: "ImpactFrom_SEG_ELT_crop_region",
    display_name: "From SEG_ELT crop_region",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactCount_Elts_in_SEGS: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "ImpactCount_Elts_in_SEGS",
    display_name: "Count Elts in SEGS",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  BboxDetectorCombined_v2: {
    input: {
      required: {
        bbox_detector: ["BBOX_DETECTOR"],
        image: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        dilation: [
          "INT",
          {
            default: 4,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "BboxDetectorCombined_v2",
    display_name: "BBOX Detector (combined)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  SegmDetectorCombined_v2: {
    input: {
      required: {
        segm_detector: ["SEGM_DETECTOR"],
        image: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        dilation: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "SegmDetectorCombined_v2",
    display_name: "SEGM Detector (combined)",
    description: "",
    category: "ImpactPack/Detector",
    output_node: false,
  },
  SegsToCombinedMask: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "SegsToCombinedMask",
    display_name: "SEGS to MASK (combined)",
    description: "",
    category: "ImpactPack/Operation",
    output_node: false,
  },
  KSamplerProvider: {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        basic_pipe: ["BASIC_PIPE"],
      },
      optional: {
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["KSAMPLER"],
    output_is_list: [false],
    output_name: ["KSAMPLER"],
    name: "KSamplerProvider",
    display_name: "KSamplerProvider",
    description: "",
    category: "ImpactPack/Sampler",
    output_node: false,
  },
  TwoSamplersForMask: {
    input: {
      required: {
        latent_image: ["LATENT"],
        base_sampler: ["KSAMPLER"],
        mask_sampler: ["KSAMPLER"],
        mask: ["MASK"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "TwoSamplersForMask",
    display_name: "TwoSamplersForMask",
    description: "",
    category: "ImpactPack/Sampler",
    output_node: false,
  },
  TiledKSamplerProvider: {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        tile_width: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 16384,
            step: 64,
          },
        ],
        tile_height: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 16384,
            step: 64,
          },
        ],
        tiling_strategy: [["random", "padded", "simple"]],
        basic_pipe: ["BASIC_PIPE"],
      },
    },
    output: ["KSAMPLER"],
    output_is_list: [false],
    output_name: ["KSAMPLER"],
    name: "TiledKSamplerProvider",
    display_name: "TiledKSamplerProvider",
    description: "",
    category: "ImpactPack/Sampler",
    output_node: false,
  },
  KSamplerAdvancedProvider: {
    input: {
      required: {
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        sigma_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        basic_pipe: ["BASIC_PIPE"],
      },
      optional: {
        sampler_opt: ["SAMPLER"],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["KSAMPLER_ADVANCED"],
    output_is_list: [false],
    output_name: ["KSAMPLER_ADVANCED"],
    name: "KSamplerAdvancedProvider",
    display_name: "KSamplerAdvancedProvider",
    description: "",
    category: "ImpactPack/Sampler",
    output_node: false,
  },
  TwoAdvancedSamplersForMask: {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        samples: ["LATENT"],
        base_sampler: ["KSAMPLER_ADVANCED"],
        mask_sampler: ["KSAMPLER_ADVANCED"],
        mask: ["MASK"],
        overlap_factor: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 10000,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "TwoAdvancedSamplersForMask",
    display_name: "TwoAdvancedSamplersForMask",
    description: "",
    category: "ImpactPack/Sampler",
    output_node: false,
  },
  PreviewBridge: {
    input: {
      required: {
        images: ["IMAGE"],
        image: [
          "STRING",
          {
            default: "",
          },
        ],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "PreviewBridge",
    display_name: "Preview Bridge (Image)",
    description: "",
    category: "ImpactPack/Util",
    output_node: true,
  },
  PreviewBridgeLatent: {
    input: {
      required: {
        latent: ["LATENT"],
        image: [
          "STRING",
          {
            default: "",
          },
        ],
        preview_method: [
          [
            "Latent2RGB-SD3",
            "Latent2RGB-SDXL",
            "Latent2RGB-SD15",
            "Latent2RGB-SD-X4",
            "Latent2RGB-Playground-2.5",
            "Latent2RGB-SC-Prior",
            "Latent2RGB-SC-B",
            "TAESD3",
            "TAESDXL",
            "TAESD15",
          ],
        ],
      },
      optional: {
        vae_opt: ["VAE"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["LATENT", "MASK"],
    output_is_list: [false, false],
    output_name: ["LATENT", "MASK"],
    name: "PreviewBridgeLatent",
    display_name: "Preview Bridge (Latent)",
    description: "",
    category: "ImpactPack/Util",
    output_node: true,
  },
  ImageSender: {
    input: {
      required: {
        images: ["IMAGE"],
        filename_prefix: [
          "STRING",
          {
            default: "ImgSender",
          },
        ],
        link_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "ImageSender",
    display_name: "Image Sender",
    description: "",
    category: "ImpactPack/Util",
    output_node: true,
  },
  ImageReceiver: {
    input: {
      required: {
        image: [["example.png"]],
        link_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
        save_to_workflow: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        image_data: [
          "STRING",
          {
            multiline: false,
          },
        ],
        trigger_always: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enable",
            label_off: "disable",
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "ImageReceiver",
    display_name: "Image Receiver",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  LatentSender: {
    input: {
      required: {
        samples: ["LATENT"],
        filename_prefix: [
          "STRING",
          {
            default: "latents/LatentSender",
          },
        ],
        link_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
        preview_method: [
          ["Latent2RGB-SDXL", "Latent2RGB-SD15", "TAESDXL", "TAESD15"],
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "LatentSender",
    display_name: "LatentSender",
    description: "",
    category: "ImpactPack/Util",
    output_node: true,
  },
  LatentReceiver: {
    input: {
      required: {
        latent: [[]],
        link_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
        trigger_always: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enable",
            label_off: "disable",
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "LatentReceiver",
    display_name: "LatentReceiver",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImageMaskSwitch: {
    input: {
      required: {
        select: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4,
            step: 1,
          },
        ],
        images1: ["IMAGE"],
      },
      optional: {
        mask1_opt: ["MASK"],
        images2_opt: ["IMAGE"],
        mask2_opt: ["MASK"],
        images3_opt: ["IMAGE"],
        mask3_opt: ["MASK"],
        images4_opt: ["IMAGE"],
        mask4_opt: ["MASK"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "ImageMaskSwitch",
    display_name: "Switch (images, mask)",
    description: "",
    category: "ImpactPack/Util",
    output_node: true,
  },
  LatentSwitch: {
    input: {
      required: {
        select: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 999999,
            step: 1,
          },
        ],
        sel_mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "select_on_prompt",
            label_off: "select_on_execution",
            forceInput: false,
          },
        ],
      },
      optional: {
        input1: ["*"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: ["*", "STRING", "INT"],
    output_is_list: [false, false, false],
    output_name: ["selected_value", "selected_label", "selected_index"],
    name: "LatentSwitch",
    display_name: "Switch (latent/legacy)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  SEGSSwitch: {
    input: {
      required: {
        select: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 999999,
            step: 1,
          },
        ],
        sel_mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "select_on_prompt",
            label_off: "select_on_execution",
            forceInput: false,
          },
        ],
      },
      optional: {
        input1: ["*"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: ["*", "STRING", "INT"],
    output_is_list: [false, false, false],
    output_name: ["selected_value", "selected_label", "selected_index"],
    name: "SEGSSwitch",
    display_name: "Switch (SEGS/legacy)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSwitch: {
    input: {
      required: {
        select: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 999999,
            step: 1,
          },
        ],
        sel_mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "select_on_prompt",
            label_off: "select_on_execution",
            forceInput: false,
          },
        ],
      },
      optional: {
        input1: ["*"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: ["*", "STRING", "INT"],
    output_is_list: [false, false, false],
    output_name: ["selected_value", "selected_label", "selected_index"],
    name: "ImpactSwitch",
    display_name: "Switch (Any)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactInversedSwitch: {
    input: {
      required: {
        select: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 999999,
            step: 1,
          },
        ],
        input: ["*"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["*"],
    name: "ImpactInversedSwitch",
    display_name: "Inversed Switch (Any)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactWildcardProcessor: {
    input: {
      required: {
        wildcard_text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        populated_text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "Populate",
            label_off: "Fixed",
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        "Select to add Wildcard": [["Select the Wildcard to add to the text"]],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "ImpactWildcardProcessor",
    display_name: "ImpactWildcardProcessor",
    description: "",
    category: "ImpactPack/Prompt",
    output_node: false,
  },
  ImpactWildcardEncode: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        wildcard_text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        populated_text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "Populate",
            label_off: "Fixed",
          },
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        "Select to add Wildcard": [["Select the Wildcard to add to the text"]],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "CONDITIONING", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["model", "clip", "conditioning", "populated_text"],
    name: "ImpactWildcardEncode",
    display_name: "ImpactWildcardEncode",
    description: "",
    category: "ImpactPack/Prompt",
    output_node: false,
  },
  SEGSUpscaler: {
    input: {
      required: {
        image: ["IMAGE"],
        segs: ["SEGS"],
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        rescale_factor: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 100,
            step: 0.01,
          },
        ],
        resampling_method: [["lanczos", "nearest", "bilinear", "bicubic"]],
        supersample: [["true", "false"]],
        rounding_modulus: [
          "INT",
          {
            default: 8,
            min: 8,
            max: 1024,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
      },
      optional: {
        upscale_model_opt: ["UPSCALE_MODEL"],
        upscaler_hook_opt: ["UPSCALER_HOOK"],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "SEGSUpscaler",
    display_name: "Upscaler (SEGS)",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  SEGSUpscalerPipe: {
    input: {
      required: {
        image: ["IMAGE"],
        segs: ["SEGS"],
        basic_pipe: ["BASIC_PIPE"],
        rescale_factor: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 100,
            step: 0.01,
          },
        ],
        resampling_method: [["lanczos", "nearest", "bilinear", "bicubic"]],
        supersample: [["true", "false"]],
        rounding_modulus: [
          "INT",
          {
            default: 8,
            min: 8,
            max: 1024,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
      },
      optional: {
        upscale_model_opt: ["UPSCALE_MODEL"],
        upscaler_hook_opt: ["UPSCALER_HOOK"],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "SEGSUpscalerPipe",
    display_name: "Upscaler (SEGS/pipe)",
    description: "",
    category: "ImpactPack/Upscale",
    output_node: false,
  },
  SEGSDetailer: {
    input: {
      required: {
        image: ["IMAGE"],
        segs: ["SEGS"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 768,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        noise_mask: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        force_inpaint: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        basic_pipe: ["BASIC_PIPE"],
        refiner_ratio: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 100,
          },
        ],
        cycle: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
      optional: {
        refiner_basic_pipe_opt: ["BASIC_PIPE"],
        inpaint_model: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["SEGS", "IMAGE"],
    output_is_list: [false, true],
    output_name: ["segs", "cnet_images"],
    name: "SEGSDetailer",
    display_name: "SEGSDetailer",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  SEGSPaste: {
    input: {
      required: {
        image: ["IMAGE"],
        segs: ["SEGS"],
        feather: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        alpha: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
      optional: {
        ref_image_opt: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "SEGSPaste",
    display_name: "SEGSPaste",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  SEGSPreview: {
    input: {
      required: {
        segs: ["SEGS"],
        alpha_mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enable",
            label_off: "disable",
          },
        ],
        min_alpha: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        fallback_image_opt: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [true],
    output_name: ["IMAGE"],
    name: "SEGSPreview",
    display_name: "SEGSPreview",
    description: "",
    category: "ImpactPack/Util",
    output_node: true,
  },
  SEGSPreviewCNet: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [true],
    output_name: ["IMAGE"],
    name: "SEGSPreviewCNet",
    display_name: "SEGSPreview (CNET Image)",
    description: "",
    category: "ImpactPack/Util",
    output_node: true,
  },
  SEGSToImageList: {
    input: {
      required: {
        segs: ["SEGS"],
      },
      optional: {
        fallback_image_opt: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [true],
    output_name: ["IMAGE"],
    name: "SEGSToImageList",
    display_name: "SEGSToImageList",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSEGSToMaskList: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["MASK"],
    output_is_list: [true],
    output_name: ["MASK"],
    name: "ImpactSEGSToMaskList",
    display_name: "SEGS to Mask List",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSEGSToMaskBatch: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ImpactSEGSToMaskBatch",
    display_name: "SEGS to Mask Batch",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSEGSConcat: {
    input: {
      required: {
        segs1: ["SEGS"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactSEGSConcat",
    display_name: "SEGS Concat",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSEGSPicker: {
    input: {
      required: {
        picks: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: false,
            "pysssss.autocomplete": false,
          },
        ],
        segs: ["SEGS"],
      },
      optional: {
        fallback_image_opt: ["IMAGE"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactSEGSPicker",
    display_name: "Picker (SEGS)",
    description: "",
    category: "ImpactPack/Util",
    output_node: true,
  },
  ImpactMakeTileSEGS: {
    input: {
      required: {
        images: ["IMAGE"],
        bbox_size: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
            step: 8,
          },
        ],
        crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
        min_overlap: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 512,
            step: 1,
          },
        ],
        filter_segs_dilation: [
          "INT",
          {
            default: 20,
            min: -255,
            max: 255,
            step: 1,
          },
        ],
        mask_irregularity: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        irregular_mask_mode: [
          [
            "Reuse fast",
            "Reuse quality",
            "All random fast",
            "All random quality",
          ],
        ],
      },
      optional: {
        filter_in_segs_opt: ["SEGS"],
        filter_out_segs_opt: ["SEGS"],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactMakeTileSEGS",
    display_name: "Make Tile SEGS",
    description: "",
    category: "ImpactPack/__for_testing",
    output_node: false,
  },
  SEGSDetailerForAnimateDiff: {
    input: {
      required: {
        image_frames: ["IMAGE"],
        segs: ["SEGS"],
        guide_size: [
          "FLOAT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        guide_size_for: [
          "BOOLEAN",
          {
            default: true,
            label_on: "bbox",
            label_off: "crop_region",
          },
        ],
        max_size: [
          "FLOAT",
          {
            default: 768,
            min: 64,
            max: 16384,
            step: 8,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.0001,
            max: 1,
            step: 0.01,
          },
        ],
        basic_pipe: ["BASIC_PIPE"],
        refiner_ratio: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
          },
        ],
      },
      optional: {
        refiner_basic_pipe_opt: ["BASIC_PIPE"],
        noise_mask_feather: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["SEGS", "IMAGE"],
    output_is_list: [false, true],
    output_name: ["segs", "cnet_images"],
    name: "SEGSDetailerForAnimateDiff",
    display_name: "SEGSDetailer For AnimateDiff (SEGS/pipe)",
    description: "",
    category: "ImpactPack/Detailer",
    output_node: false,
  },
  ImpactKSamplerBasicPipe: {
    input: {
      required: {
        basic_pipe: ["BASIC_PIPE"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        latent_image: ["LATENT"],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["BASIC_PIPE", "LATENT", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["BASIC_PIPE", "LATENT", "VAE"],
    name: "ImpactKSamplerBasicPipe",
    display_name: "KSampler (pipe)",
    description: "",
    category: "ImpactPack/sampling",
    output_node: false,
  },
  ImpactKSamplerAdvancedBasicPipe: {
    input: {
      required: {
        basic_pipe: ["BASIC_PIPE"],
        add_noise: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enable",
            label_off: "disable",
          },
        ],
        noise_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
          ],
        ],
        latent_image: ["LATENT"],
        start_at_step: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10000,
          },
        ],
        end_at_step: [
          "INT",
          {
            default: 10000,
            min: 0,
            max: 10000,
          },
        ],
        return_with_leftover_noise: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enable",
            label_off: "disable",
          },
        ],
      },
      optional: {
        scheduler_func_opt: ["SCHEDULER_FUNC"],
      },
    },
    output: ["BASIC_PIPE", "LATENT", "VAE"],
    output_is_list: [false, false, false],
    output_name: ["BASIC_PIPE", "LATENT", "VAE"],
    name: "ImpactKSamplerAdvancedBasicPipe",
    display_name: "KSampler (Advanced/pipe)",
    description: "",
    category: "ImpactPack/sampling",
    output_node: false,
  },
  ReencodeLatent: {
    input: {
      required: {
        samples: ["LATENT"],
        tile_mode: [
          ["None", "Both", "Decode(input) only", "Encode(output) only"],
        ],
        input_vae: ["VAE"],
        output_vae: ["VAE"],
        tile_size: [
          "INT",
          {
            default: 512,
            min: 320,
            max: 4096,
            step: 64,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "ReencodeLatent",
    display_name: "Reencode Latent",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ReencodeLatentPipe: {
    input: {
      required: {
        samples: ["LATENT"],
        tile_mode: [
          ["None", "Both", "Decode(input) only", "Encode(output) only"],
        ],
        input_basic_pipe: ["BASIC_PIPE"],
        output_basic_pipe: ["BASIC_PIPE"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "ReencodeLatentPipe",
    display_name: "Reencode Latent (pipe)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactImageBatchToImageList: {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [true],
    output_name: ["IMAGE"],
    name: "ImpactImageBatchToImageList",
    display_name: "Image batch to Image List",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactMakeImageList: {
    input: {
      required: {
        image1: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [true],
    output_name: ["IMAGE"],
    name: "ImpactMakeImageList",
    display_name: "Make Image List",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactMakeImageBatch: {
    input: {
      required: {
        image1: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImpactMakeImageBatch",
    display_name: "Make Image Batch",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  RegionalSampler: {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        seed_2nd: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        seed_2nd_mode: [
          [
            "ignore",
            "fixed",
            "seed+seed_2nd",
            "seed-seed_2nd",
            "increment",
            "decrement",
            "randomize",
          ],
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        base_only_steps: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 10000,
          },
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        samples: ["LATENT"],
        base_sampler: ["KSAMPLER_ADVANCED"],
        regional_prompts: ["REGIONAL_PROMPTS"],
        overlap_factor: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 10000,
          },
        ],
        restore_latent: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        additional_mode: [
          ["DISABLE", "ratio additional", "ratio between"],
          {
            default: "ratio between",
          },
        ],
        additional_sampler: [
          [
            "AUTO",
            "euler",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_fast",
            "dpmpp_2m",
            "ddpm",
          ],
        ],
        additional_sigma_ratio: [
          "FLOAT",
          {
            default: 0.3,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "RegionalSampler",
    display_name: "RegionalSampler",
    description: "",
    category: "ImpactPack/Regional",
    output_node: false,
  },
  RegionalSamplerAdvanced: {
    input: {
      required: {
        add_noise: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        noise_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        start_at_step: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10000,
          },
        ],
        end_at_step: [
          "INT",
          {
            default: 10000,
            min: 0,
            max: 10000,
          },
        ],
        overlap_factor: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 10000,
          },
        ],
        restore_latent: [
          "BOOLEAN",
          {
            default: true,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        return_with_leftover_noise: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        latent_image: ["LATENT"],
        base_sampler: ["KSAMPLER_ADVANCED"],
        regional_prompts: ["REGIONAL_PROMPTS"],
        additional_mode: [
          ["DISABLE", "ratio additional", "ratio between"],
          {
            default: "ratio between",
          },
        ],
        additional_sampler: [
          [
            "AUTO",
            "euler",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_fast",
            "dpmpp_2m",
            "ddpm",
          ],
        ],
        additional_sigma_ratio: [
          "FLOAT",
          {
            default: 0.3,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "RegionalSamplerAdvanced",
    display_name: "RegionalSamplerAdvanced",
    description: "",
    category: "ImpactPack/Regional",
    output_node: false,
  },
  CombineRegionalPrompts: {
    input: {
      required: {
        regional_prompts1: ["REGIONAL_PROMPTS"],
      },
    },
    output: ["REGIONAL_PROMPTS"],
    output_is_list: [false],
    output_name: ["REGIONAL_PROMPTS"],
    name: "CombineRegionalPrompts",
    display_name: "CombineRegionalPrompts",
    description: "",
    category: "ImpactPack/Regional",
    output_node: false,
  },
  RegionalPrompt: {
    input: {
      required: {
        mask: ["MASK"],
        advanced_sampler: ["KSAMPLER_ADVANCED"],
      },
      optional: {
        variation_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        variation_strength: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        variation_method: [["linear", "slerp"]],
      },
    },
    output: ["REGIONAL_PROMPTS"],
    output_is_list: [false],
    output_name: ["REGIONAL_PROMPTS"],
    name: "RegionalPrompt",
    display_name: "RegionalPrompt",
    description: "",
    category: "ImpactPack/Regional",
    output_node: false,
  },
  ImpactCombineConditionings: {
    input: {
      required: {
        conditioning1: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ImpactCombineConditionings",
    display_name: "Combine Conditionings",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactConcatConditionings: {
    input: {
      required: {
        conditioning1: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ImpactConcatConditionings",
    display_name: "Concat Conditionings",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSEGSLabelAssign: {
    input: {
      required: {
        segs: ["SEGS"],
        labels: [
          "STRING",
          {
            multiline: true,
            placeholder:
              "List the label to be assigned in order of segs, separated by commas",
          },
        ],
      },
    },
    output: ["SEGS"],
    output_is_list: [false],
    output_name: ["SEGS"],
    name: "ImpactSEGSLabelAssign",
    display_name: "SEGS Assign (label)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSEGSLabelFilter: {
    input: {
      required: {
        segs: ["SEGS"],
        preset: [
          [
            "all",
            "hand",
            "face",
            "mouth",
            "eyes",
            "eyebrows",
            "pupils",
            "left_eyebrow",
            "left_eye",
            "left_pupil",
            "right_eyebrow",
            "right_eye",
            "right_pupil",
            "short_sleeved_shirt",
            "long_sleeved_shirt",
            "short_sleeved_outwear",
            "long_sleeved_outwear",
            "vest",
            "sling",
            "shorts",
            "trousers",
            "skirt",
            "short_sleeved_dress",
            "long_sleeved_dress",
            "vest_dress",
            "sling_dress",
            "person",
            "bicycle",
            "car",
            "motorcycle",
            "airplane",
            "bus",
            "train",
            "truck",
            "boat",
            "traffic light",
            "fire hydrant",
            "stop sign",
            "parking meter",
            "bench",
            "bird",
            "cat",
            "dog",
            "horse",
            "sheep",
            "cow",
            "elephant",
            "bear",
            "zebra",
            "giraffe",
            "backpack",
            "umbrella",
            "handbag",
            "tie",
            "suitcase",
            "frisbee",
            "skis",
            "snowboard",
            "sports ball",
            "kite",
            "baseball bat",
            "baseball glove",
            "skateboard",
            "surfboard",
            "tennis racket",
            "bottle",
            "wine glass",
            "cup",
            "fork",
            "knife",
            "spoon",
            "bowl",
            "banana",
            "apple",
            "sandwich",
            "orange",
            "broccoli",
            "carrot",
            "hot dog",
            "pizza",
            "donut",
            "cake",
            "chair",
            "couch",
            "potted plant",
            "bed",
            "dining table",
            "toilet",
            "tv",
            "laptop",
            "mouse",
            "remote",
            "keyboard",
            "cell phone",
            "microwave",
            "oven",
            "toaster",
            "sink",
            "refrigerator",
            "book",
            "clock",
            "vase",
            "scissors",
            "teddy bear",
            "hair drier",
            "toothbrush",
          ],
        ],
        labels: [
          "STRING",
          {
            multiline: true,
            placeholder:
              "List the types of segments to be allowed, separated by commas",
          },
        ],
      },
    },
    output: ["SEGS", "SEGS"],
    output_is_list: [false, false],
    output_name: ["filtered_SEGS", "remained_SEGS"],
    name: "ImpactSEGSLabelFilter",
    display_name: "SEGS Filter (label)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSEGSRangeFilter: {
    input: {
      required: {
        segs: ["SEGS"],
        target: [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "length_percent",
            "confidence(0-100)",
          ],
        ],
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "inside",
            label_off: "outside",
          },
        ],
        min_value: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
        max_value: [
          "INT",
          {
            default: 67108864,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
      },
    },
    output: ["SEGS", "SEGS"],
    output_is_list: [false, false],
    output_name: ["filtered_SEGS", "remained_SEGS"],
    name: "ImpactSEGSRangeFilter",
    display_name: "SEGS Filter (range)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactSEGSOrderedFilter: {
    input: {
      required: {
        segs: ["SEGS"],
        target: [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "confidence",
          ],
        ],
        order: [
          "BOOLEAN",
          {
            default: true,
            label_on: "descending",
            label_off: "ascending",
          },
        ],
        take_start: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
        take_count: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
      },
    },
    output: ["SEGS", "SEGS"],
    output_is_list: [false, false],
    output_name: ["filtered_SEGS", "remained_SEGS"],
    name: "ImpactSEGSOrderedFilter",
    display_name: "SEGS Filter (ordered)",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactCompare: {
    input: {
      required: {
        cmp: [
          ["a = b", "a <> b", "a > b", "a < b", "a >= b", "a <= b", "tt", "ff"],
        ],
        a: ["*"],
        b: ["*"],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "ImpactCompare",
    display_name: "ImpactCompare",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactConditionalBranch: {
    input: {
      required: {
        cond: ["BOOLEAN"],
        tt_value: ["*"],
        ff_value: ["*"],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["*"],
    name: "ImpactConditionalBranch",
    display_name: "ImpactConditionalBranch",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactConditionalBranchSelMode: {
    input: {
      required: {
        cond: ["BOOLEAN"],
        sel_mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "select_on_prompt",
            label_off: "select_on_execution",
          },
        ],
      },
      optional: {
        tt_value: ["*"],
        ff_value: ["*"],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["*"],
    name: "ImpactConditionalBranchSelMode",
    display_name: "ImpactConditionalBranchSelMode",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactIfNone: {
    input: {
      required: {},
      optional: {
        signal: ["*"],
        any_input: ["*"],
      },
    },
    output: ["*", "BOOLEAN"],
    output_is_list: [false, false],
    output_name: ["signal_opt", "bool"],
    name: "ImpactIfNone",
    display_name: "ImpactIfNone",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactConvertDataType: {
    input: {
      required: {
        value: ["*"],
      },
    },
    output: ["STRING", "FLOAT", "INT", "BOOLEAN"],
    output_is_list: [false, false, false, false],
    output_name: ["STRING", "FLOAT", "INT", "BOOLEAN"],
    name: "ImpactConvertDataType",
    display_name: "ImpactConvertDataType",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactLogicalOperators: {
    input: {
      required: {
        operator: [["and", "or", "xor"]],
        bool_a: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
        bool_b: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "ImpactLogicalOperators",
    display_name: "ImpactLogicalOperators",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactInt: {
    input: {
      required: {
        value: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "ImpactInt",
    display_name: "ImpactInt",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactFloat: {
    input: {
      required: {
        value: [
          "FLOAT",
          {
            default: 1,
            min: -3.402823466e38,
            max: 3.402823466e38,
          },
        ],
      },
    },
    output: ["FLOAT"],
    output_is_list: [false],
    output_name: ["FLOAT"],
    name: "ImpactFloat",
    display_name: "ImpactFloat",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactValueSender: {
    input: {
      required: {
        value: ["*"],
        link_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
      },
      optional: {
        signal_opt: ["*"],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["signal"],
    name: "ImpactValueSender",
    display_name: "ImpactValueSender",
    description: "",
    category: "ImpactPack/Logic",
    output_node: true,
  },
  ImpactValueReceiver: {
    input: {
      required: {
        typ: [["STRING", "INT", "FLOAT", "BOOLEAN"]],
        value: [
          "STRING",
          {
            default: "",
          },
        ],
        link_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9223372036854776000,
            step: 1,
          },
        ],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["*"],
    name: "ImpactValueReceiver",
    display_name: "ImpactValueReceiver",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactImageInfo: {
    input: {
      required: {
        value: ["IMAGE"],
      },
    },
    output: ["INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["batch", "height", "width", "channel"],
    name: "ImpactImageInfo",
    display_name: "ImpactImageInfo",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: false,
  },
  ImpactLatentInfo: {
    input: {
      required: {
        value: ["LATENT"],
      },
    },
    output: ["INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["batch", "height", "width", "channel"],
    name: "ImpactLatentInfo",
    display_name: "ImpactLatentInfo",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: false,
  },
  ImpactMinMax: {
    input: {
      required: {
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "max",
            label_off: "min",
          },
        ],
        a: ["*"],
        b: ["*"],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "ImpactMinMax",
    display_name: "ImpactMinMax",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: false,
  },
  ImpactNeg: {
    input: {
      required: {
        value: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "ImpactNeg",
    display_name: "ImpactNeg",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactConditionalStopIteration: {
    input: {
      required: {
        cond: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "ImpactConditionalStopIteration",
    display_name: "ImpactConditionalStopIteration",
    description: "",
    category: "ImpactPack/Logic",
    output_node: true,
  },
  ImpactStringSelector: {
    input: {
      required: {
        strings: [
          "STRING",
          {
            multiline: true,
          },
        ],
        multiline: [
          "BOOLEAN",
          {
            default: false,
            label_on: "enabled",
            label_off: "disabled",
          },
        ],
        select: [
          "INT",
          {
            min: 0,
            max: 9223372036854776000,
            step: 1,
            default: 0,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "ImpactStringSelector",
    display_name: "String Selector",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  StringListToString: {
    input: {
      required: {
        join_with: [
          "STRING",
          {
            default: "\\n",
          },
        ],
        string_list: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "StringListToString",
    display_name: "String List to String",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  WildcardPromptFromString: {
    input: {
      required: {
        string: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        delimiter: [
          "STRING",
          {
            multiline: false,
            default: "\\n",
          },
        ],
        prefix_all: [
          "STRING",
          {
            multiline: false,
          },
        ],
        postfix_all: [
          "STRING",
          {
            multiline: false,
          },
        ],
        restrict_to_tags: [
          "STRING",
          {
            multiline: false,
          },
        ],
        exclude_tags: [
          "STRING",
          {
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["wildcard", "segs_labels"],
    name: "WildcardPromptFromString",
    display_name: "Wildcard Prompt from String",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  RemoveNoiseMask: {
    input: {
      required: {
        samples: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "RemoveNoiseMask",
    display_name: "Remove Noise Mask",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  ImpactLogger: {
    input: {
      required: {
        data: ["*", ""],
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
        unique_id: "UNIQUE_ID",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "ImpactLogger",
    display_name: "ImpactLogger",
    description: "",
    category: "ImpactPack/Debug",
    output_node: true,
  },
  ImpactDummyInput: {
    input: {
      required: {},
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["*"],
    name: "ImpactDummyInput",
    display_name: "ImpactDummyInput",
    description: "",
    category: "ImpactPack/Debug",
    output_node: false,
  },
  ImpactQueueTrigger: {
    input: {
      required: {
        signal: ["*"],
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "Trigger",
            label_off: "Don't trigger",
          },
        ],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["signal_opt"],
    name: "ImpactQueueTrigger",
    display_name: "Queue Trigger",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: true,
  },
  ImpactQueueTriggerCountdown: {
    input: {
      required: {
        count: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        total: [
          "INT",
          {
            default: 10,
            min: 1,
            max: 18446744073709552000,
          },
        ],
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "Trigger",
            label_off: "Don't trigger",
          },
        ],
      },
      optional: {
        signal: ["*"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["*", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["signal_opt", "count", "total"],
    name: "ImpactQueueTriggerCountdown",
    display_name: "Queue Trigger (Countdown)",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: true,
  },
  ImpactSetWidgetValue: {
    input: {
      required: {
        signal: ["*"],
        node_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        widget_name: [
          "STRING",
          {
            multiline: false,
          },
        ],
      },
      optional: {
        boolean_value: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
        int_value: [
          "INT",
          {
            forceInput: true,
          },
        ],
        float_value: [
          "FLOAT",
          {
            forceInput: true,
          },
        ],
        string_value: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["signal_opt"],
    name: "ImpactSetWidgetValue",
    display_name: "Set Widget Value",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: true,
  },
  ImpactNodeSetMuteState: {
    input: {
      required: {
        signal: ["*"],
        node_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        set_state: [
          "BOOLEAN",
          {
            default: true,
            label_on: "active",
            label_off: "mute",
          },
        ],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["signal_opt"],
    name: "ImpactNodeSetMuteState",
    display_name: "Set Mute State",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: true,
  },
  ImpactControlBridge: {
    input: {
      required: {
        value: ["*"],
        mode: [
          "BOOLEAN",
          {
            default: true,
            label_on: "Active",
            label_off: "Mute/Bypass",
          },
        ],
        behavior: [
          "BOOLEAN",
          {
            default: true,
            label_on: "Mute",
            label_off: "Bypass",
          },
        ],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["value"],
    name: "ImpactControlBridge",
    display_name: "Control Bridge",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: true,
  },
  ImpactIsNotEmptySEGS: {
    input: {
      required: {
        segs: ["SEGS"],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "ImpactIsNotEmptySEGS",
    display_name: "SEGS isn't Empty",
    description: "",
    category: "ImpactPack/Logic",
    output_node: false,
  },
  ImpactSleep: {
    input: {
      required: {
        signal: ["*"],
        seconds: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 3600,
          },
        ],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["signal_opt"],
    name: "ImpactSleep",
    display_name: "Sleep",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: true,
  },
  ImpactRemoteBoolean: {
    input: {
      required: {
        node_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        widget_name: [
          "STRING",
          {
            multiline: false,
          },
        ],
        value: [
          "BOOLEAN",
          {
            default: true,
            label_on: "True",
            label_off: "False",
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "ImpactRemoteBoolean",
    display_name: "Remote Boolean (on prompt)",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: true,
  },
  ImpactRemoteInt: {
    input: {
      required: {
        node_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        widget_name: [
          "STRING",
          {
            multiline: false,
          },
        ],
        value: [
          "INT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "ImpactRemoteInt",
    display_name: "Remote Int (on prompt)",
    description: "",
    category: "ImpactPack/Logic/_for_test",
    output_node: true,
  },
  ImpactHFTransformersClassifierProvider: {
    input: {
      required: {
        preset_repo_id: [
          [
            "rizvandwiki/gender-classification-2",
            "NTQAI/pedestrian_gender_recognition",
            "Leilab/gender_class",
            "ProjectPersonal/GenderClassifier",
            "crangana/trained-gender",
            "cledoux42/GenderNew_v002",
            "ivensamdh/genderage2",
            "Manual repo id",
          ],
        ],
        manual_repo_id: [
          "STRING",
          {
            multiline: false,
          },
        ],
        device_mode: [["AUTO", "Prefer GPU", "CPU"]],
      },
    },
    output: ["TRANSFORMERS_CLASSIFIER"],
    output_is_list: [false],
    output_name: ["TRANSFORMERS_CLASSIFIER"],
    name: "ImpactHFTransformersClassifierProvider",
    display_name: "HF Transformers Classifier Provider",
    description: "",
    category: "ImpactPack/HuggingFace",
    output_node: false,
  },
  ImpactSEGSClassify: {
    input: {
      required: {
        classifier: ["TRANSFORMERS_CLASSIFIER"],
        segs: ["SEGS"],
        preset_expr: [
          [
            "#Female > #Male",
            "#Female < #Male",
            "female > 0.5",
            "male > 0.5",
            "Age16to25 > 0.1",
            "Age50to69 > 0.1",
            "Manual expr",
          ],
        ],
        manual_expr: [
          "STRING",
          {
            multiline: false,
          },
        ],
      },
      optional: {
        ref_image_opt: ["IMAGE"],
      },
    },
    output: ["SEGS", "SEGS", "STRING"],
    output_is_list: [false, false, true],
    output_name: ["filtered_SEGS", "remained_SEGS", "detected_labels"],
    name: "ImpactSEGSClassify",
    display_name: "SEGS Classify",
    description: "",
    category: "ImpactPack/HuggingFace",
    output_node: false,
  },
  ImpactSchedulerAdapter: {
    input: {
      required: {
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
          {
            defaultInput: true,
          },
        ],
        extra_scheduler: [
          ["None", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]"],
        ],
      },
    },
    output: [
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "AYS SDXL",
        "AYS SD1",
        "AYS SVD",
        "GITS[coeff=1.2]",
      ],
    ],
    output_is_list: [false],
    output_name: ["scheduler"],
    name: "ImpactSchedulerAdapter",
    display_name: "Impact Scheduler Adapter",
    description: "",
    category: "ImpactPack/Util",
    output_node: false,
  },
  GITSSchedulerFuncProvider: {
    input: {
      required: {
        coeff: [
          "FLOAT",
          {
            default: 1.2,
            min: 0.8,
            max: 1.5,
            step: 0.05,
          },
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["SCHEDULER_FUNC"],
    output_is_list: [false],
    output_name: ["SCHEDULER_FUNC"],
    name: "GITSSchedulerFuncProvider",
    display_name: "GITSScheduler Func Provider",
    description: "",
    category: "ImpactPack/sampling",
    output_node: false,
  },
  UltralyticsDetectorProvider: {
    input: {
      required: {
        model_name: [
          [
            "bbox/ultralytics@bbox.safetensors",
            "segm/ultralytics@segm.safetensors",
          ],
        ],
      },
    },
    output: ["BBOX_DETECTOR", "SEGM_DETECTOR"],
    output_is_list: [false, false],
    output_name: ["BBOX_DETECTOR", "SEGM_DETECTOR"],
    name: "UltralyticsDetectorProvider",
    display_name: "UltralyticsDetectorProvider",
    description: "",
    category: "ImpactPack",
    output_node: false,
  },
  INTConstant: {
    input: {
      required: {
        value: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["value"],
    name: "INTConstant",
    display_name: "INT Constant",
    description: "",
    category: "KJNodes/constants",
    output_node: false,
  },
  FloatConstant: {
    input: {
      required: {
        value: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
            step: 0.001,
          },
        ],
      },
    },
    output: ["FLOAT"],
    output_is_list: [false],
    output_name: ["value"],
    name: "FloatConstant",
    display_name: "Float Constant",
    description: "",
    category: "KJNodes/constants",
    output_node: false,
  },
  StringConstant: {
    input: {
      required: {
        string: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "StringConstant",
    display_name: "String Constant",
    description: "",
    category: "KJNodes/constants",
    output_node: false,
  },
  StringConstantMultiline: {
    input: {
      required: {
        string: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
        strip_newlines: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "StringConstantMultiline",
    display_name: "String Constant Multiline",
    description: "",
    category: "KJNodes/constants",
    output_node: false,
  },
  ConditioningMultiCombine: {
    input: {
      required: {
        inputcount: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 20,
            step: 1,
          },
        ],
        conditioning_1: ["CONDITIONING"],
        conditioning_2: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING", "INT"],
    output_is_list: [false, false],
    output_name: ["combined", "inputcount"],
    name: "ConditioningMultiCombine",
    display_name: "Conditioning Multi Combine",
    description: "\nCombines multiple conditioning nodes into one\n",
    category: "KJNodes/masking/conditioning",
    output_node: false,
  },
  ConditioningSetMaskAndCombine: {
    input: {
      required: {
        positive_1: ["CONDITIONING"],
        negative_1: ["CONDITIONING"],
        positive_2: ["CONDITIONING"],
        negative_2: ["CONDITIONING"],
        mask_1: ["MASK"],
        mask_2: ["MASK"],
        mask_1_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_2_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["combined_positive", "combined_negative"],
    name: "ConditioningSetMaskAndCombine",
    display_name: "ConditioningSetMaskAndCombine",
    description:
      "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    category: "KJNodes/masking/conditioning",
    output_node: false,
  },
  ConditioningSetMaskAndCombine3: {
    input: {
      required: {
        positive_1: ["CONDITIONING"],
        negative_1: ["CONDITIONING"],
        positive_2: ["CONDITIONING"],
        negative_2: ["CONDITIONING"],
        positive_3: ["CONDITIONING"],
        negative_3: ["CONDITIONING"],
        mask_1: ["MASK"],
        mask_2: ["MASK"],
        mask_3: ["MASK"],
        mask_1_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_2_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_3_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["combined_positive", "combined_negative"],
    name: "ConditioningSetMaskAndCombine3",
    display_name: "ConditioningSetMaskAndCombine3",
    description:
      "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    category: "KJNodes/masking/conditioning",
    output_node: false,
  },
  ConditioningSetMaskAndCombine4: {
    input: {
      required: {
        positive_1: ["CONDITIONING"],
        negative_1: ["CONDITIONING"],
        positive_2: ["CONDITIONING"],
        negative_2: ["CONDITIONING"],
        positive_3: ["CONDITIONING"],
        negative_3: ["CONDITIONING"],
        positive_4: ["CONDITIONING"],
        negative_4: ["CONDITIONING"],
        mask_1: ["MASK"],
        mask_2: ["MASK"],
        mask_3: ["MASK"],
        mask_4: ["MASK"],
        mask_1_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_2_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_3_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_4_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["combined_positive", "combined_negative"],
    name: "ConditioningSetMaskAndCombine4",
    display_name: "ConditioningSetMaskAndCombine4",
    description:
      "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    category: "KJNodes/masking/conditioning",
    output_node: false,
  },
  ConditioningSetMaskAndCombine5: {
    input: {
      required: {
        positive_1: ["CONDITIONING"],
        negative_1: ["CONDITIONING"],
        positive_2: ["CONDITIONING"],
        negative_2: ["CONDITIONING"],
        positive_3: ["CONDITIONING"],
        negative_3: ["CONDITIONING"],
        positive_4: ["CONDITIONING"],
        negative_4: ["CONDITIONING"],
        positive_5: ["CONDITIONING"],
        negative_5: ["CONDITIONING"],
        mask_1: ["MASK"],
        mask_2: ["MASK"],
        mask_3: ["MASK"],
        mask_4: ["MASK"],
        mask_5: ["MASK"],
        mask_1_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_2_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_3_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_4_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        mask_5_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        set_cond_area: [["default", "mask bounds"]],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["combined_positive", "combined_negative"],
    name: "ConditioningSetMaskAndCombine5",
    display_name: "ConditioningSetMaskAndCombine5",
    description:
      "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    category: "KJNodes/masking/conditioning",
    output_node: false,
  },
  CondPassThrough: {
    input: {
      required: {
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false],
    output_name: ["positive", "negative"],
    name: "CondPassThrough",
    display_name: "CondPassThrough",
    description:
      "\n    Simply passes through the positive and negative conditioning,\n    workaround for Set node not allowing bypassed inputs.\n",
    category: "KJNodes/misc",
    output_node: false,
  },
  DownloadAndLoadCLIPSeg: {
    input: {
      required: {
        model: [
          ["Kijai/clipseg-rd64-refined-fp16", "CIDAS/clipseg-rd64-refined"],
          {
            default: "clipseg-rd64-refined-fp16",
          },
        ],
      },
    },
    output: ["CLIPSEGMODEL"],
    output_is_list: [false],
    output_name: ["clipseg_model"],
    name: "DownloadAndLoadCLIPSeg",
    display_name: "(Down)load CLIPSeg",
    description:
      "\nDownloads and loads CLIPSeg model with huggingface_hub,  \nto ComfyUI/models/clip_seg\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  BatchCLIPSeg: {
    input: {
      required: {
        images: ["IMAGE"],
        text: [
          "STRING",
          {
            multiline: false,
          },
        ],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        binary_mask: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        combine_mask: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        use_cuda: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
      optional: {
        blur_sigma: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.1,
          },
        ],
        opt_model: ["CLIPSEGMODEL"],
        prev_mask: [
          "MASK",
          {
            default: null,
          },
        ],
        image_bg_level: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["MASK", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["Mask", "Image"],
    name: "BatchCLIPSeg",
    display_name: "Batch CLIPSeg",
    description: "\nSegments an image or batch of images using CLIPSeg.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  ColorToMask: {
    input: {
      required: {
        images: ["IMAGE"],
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        red: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        green: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        blue: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        threshold: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        per_batch: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ColorToMask",
    display_name: "Color To Mask",
    description:
      "\nConverts chosen RGB value to a mask.  \nWith batch inputs, the **per_batch**  \ncontrols the number of images processed at once.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  CreateGradientMask: {
    input: {
      required: {
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        frames: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        width: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "CreateGradientMask",
    display_name: "Create Gradient Mask",
    description: "",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  CreateTextMask: {
    input: {
      required: {
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        frames: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        text_x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        text_y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        font_size: [
          "INT",
          {
            default: 32,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
        font_color: [
          "STRING",
          {
            default: "white",
          },
        ],
        text: [
          "STRING",
          {
            default: "HELLO!",
            multiline: true,
          },
        ],
        font: [
          ["FreeMono.ttf", "FreeMonoBoldOblique.otf", "TTNorms-Black.otf"],
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        start_rotation: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 359,
            step: 1,
          },
        ],
        end_rotation: [
          "INT",
          {
            default: 0,
            min: -359,
            max: 359,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "CreateTextMask",
    display_name: "Create Text Mask",
    description:
      "\nCreates a text image and mask.  \nLooks for fonts from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n  \nIf start_rotation and/or end_rotation are different values,  \ncreates animation between them.\n",
    category: "KJNodes/text",
    output_node: false,
  },
  CreateAudioMask: {
    input: {
      required: {
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        frames: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 255,
            step: 1,
          },
        ],
        scale: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 2,
            step: 0.01,
          },
        ],
        audio_path: [
          "STRING",
          {
            default: "audio.wav",
          },
        ],
        width: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "CreateAudioMask",
    display_name: "Create Audio Mask",
    description: "",
    category: "KJNodes/deprecated",
    output_node: false,
  },
  CreateFadeMask: {
    input: {
      required: {
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        frames: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 255,
            step: 1,
          },
        ],
        width: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        interpolation: [["linear", "ease_in", "ease_out", "ease_in_out"]],
        start_level: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        midpoint_level: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        end_level: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        midpoint_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "CreateFadeMask",
    display_name: "Create Fade Mask",
    description: "",
    category: "KJNodes/deprecated",
    output_node: false,
  },
  CreateFadeMaskAdvanced: {
    input: {
      required: {
        points_string: [
          "STRING",
          {
            default: "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
            multiline: true,
          },
        ],
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        frames: [
          "INT",
          {
            default: 16,
            min: 2,
            max: 255,
            step: 1,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        interpolation: [["linear", "ease_in", "ease_out", "ease_in_out"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "CreateFadeMaskAdvanced",
    display_name: "Create Fade Mask Advanced",
    description:
      "\nCreate a batch of masks interpolated between given frames and values. \nUses same syntax as Fizz' BatchValueSchedule.\nFirst value is the frame index (not that this starts from 0, not 1) \nand the second value inside the brackets is the float value of the mask in range 0.0 - 1.0  \n\nFor example the default values:  \n0:(0.0)  \n7:(1.0)  \n15:(0.0)  \n  \nWould create a mask batch fo 16 frames, starting from black, \ninterpolating with the chosen curve to fully white at the 8th frame, \nand interpolating from that to fully black at the 16th frame.\n",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  CreateFluidMask: {
    input: {
      required: {
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        frames: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        width: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        inflow_count: [
          "INT",
          {
            default: 3,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        inflow_velocity: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        inflow_radius: [
          "INT",
          {
            default: 8,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        inflow_padding: [
          "INT",
          {
            default: 50,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        inflow_duration: [
          "INT",
          {
            default: 60,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "CreateFluidMask",
    display_name: "Create Fluid Mask",
    description: "",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  CreateShapeMask: {
    input: {
      required: {
        shape: [
          ["circle", "square", "triangle"],
          {
            default: "circle",
          },
        ],
        frames: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        location_x: [
          "INT",
          {
            default: 256,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        location_y: [
          "INT",
          {
            default: 256,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        grow: [
          "INT",
          {
            default: 0,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        frame_width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        frame_height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        shape_width: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
        shape_height: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK", "MASK"],
    output_is_list: [false, false],
    output_name: ["mask", "mask_inverted"],
    name: "CreateShapeMask",
    display_name: "Create Shape Mask",
    description:
      "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \nGrow value is the amount to grow the shape on each frame, creating animated masks.\n",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  CreateVoronoiMask: {
    input: {
      required: {
        frames: [
          "INT",
          {
            default: 16,
            min: 2,
            max: 4096,
            step: 1,
          },
        ],
        num_points: [
          "INT",
          {
            default: 15,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        line_width: [
          "INT",
          {
            default: 4,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        speed: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        frame_width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        frame_height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK", "MASK"],
    output_is_list: [false, false],
    output_name: ["mask", "mask_inverted"],
    name: "CreateVoronoiMask",
    display_name: "Create Voronoi Mask",
    description: "",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  CreateMagicMask: {
    input: {
      required: {
        frames: [
          "INT",
          {
            default: 16,
            min: 2,
            max: 4096,
            step: 1,
          },
        ],
        depth: [
          "INT",
          {
            default: 12,
            min: 1,
            max: 500,
            step: 1,
          },
        ],
        distortion: [
          "FLOAT",
          {
            default: 1.5,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
        seed: [
          "INT",
          {
            default: 123,
            min: 0,
            max: 99999999,
            step: 1,
          },
        ],
        transitions: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 20,
            step: 1,
          },
        ],
        frame_width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        frame_height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK", "MASK"],
    output_is_list: [false, false],
    output_name: ["mask", "mask_inverted"],
    name: "CreateMagicMask",
    display_name: "Create Magic Mask",
    description: "",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  GetMaskSizeAndCount: {
    input: {
      required: {
        mask: ["MASK"],
      },
    },
    output: ["MASK", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["mask", "width", "height", "count"],
    name: "GetMaskSizeAndCount",
    display_name: "Get Mask Size & Count",
    description:
      "\nReturns the width, height and batch size of the mask,  \nand passes it through unchanged.  \n\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  GrowMaskWithBlur: {
    input: {
      required: {
        mask: ["MASK"],
        expand: [
          "INT",
          {
            default: 0,
            min: -16384,
            max: 16384,
            step: 1,
          },
        ],
        incremental_expandrate: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.1,
          },
        ],
        tapered_corners: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        flip_input: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        blur_radius: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.1,
          },
        ],
        lerp_alpha: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        decay_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        fill_holes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["MASK", "MASK"],
    output_is_list: [false, false],
    output_name: ["mask", "mask_inverted"],
    name: "GrowMaskWithBlur",
    display_name: "Grow Mask With Blur",
    description:
      "\n# GrowMaskWithBlur\n- mask: Input mask or mask batch\n- expand: Expand or contract mask or mask batch by a given amount\n- incremental_expandrate: increase expand rate by a given amount per frame\n- tapered_corners: use tapered corners\n- flip_input: flip input mask\n- blur_radius: value higher than 0 will blur the mask\n- lerp_alpha: alpha value for interpolation between frames\n- decay_factor: decay value for interpolation between frames\n- fill_holes: fill holes in the mask (slow)",
    category: "KJNodes/masking",
    output_node: false,
  },
  MaskBatchMulti: {
    input: {
      required: {
        inputcount: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 1000,
            step: 1,
          },
        ],
        mask_1: ["MASK"],
        mask_2: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["masks"],
    name: "MaskBatchMulti",
    display_name: "Mask Batch Multi",
    description:
      "\nCreates an image batch from multiple masks.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  OffsetMask: {
    input: {
      required: {
        mask: ["MASK"],
        x: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 16384,
            step: 1,
            display: "number",
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 16384,
            step: 1,
            display: "number",
          },
        ],
        angle: [
          "INT",
          {
            default: 0,
            min: -360,
            max: 360,
            step: 1,
            display: "number",
          },
        ],
        duplication_factor: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
            step: 1,
            display: "number",
          },
        ],
        roll: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        incremental: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        padding_mode: [
          ["empty", "border", "reflection"],
          {
            default: "empty",
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["mask"],
    name: "OffsetMask",
    display_name: "Offset Mask",
    description:
      "\nOffsets the mask by the specified amount.  \n - mask: Input mask or mask batch\n - x: Horizontal offset\n - y: Vertical offset\n - angle: Angle in degrees\n - roll: roll edge wrapping\n - duplication_factor: Number of times to duplicate the mask to form a batch\n - border padding_mode: Padding mode for the mask\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  RemapMaskRange: {
    input: {
      required: {
        mask: ["MASK"],
        min: [
          "FLOAT",
          {
            default: 0,
            min: -10,
            max: 1,
            step: 0.01,
          },
        ],
        max: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["mask"],
    name: "RemapMaskRange",
    display_name: "Remap Mask Range",
    description: "\nSets new min and max values for the mask.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  ResizeMask: {
    input: {
      required: {
        mask: ["MASK"],
        width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
            display: "number",
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
            display: "number",
          },
        ],
        keep_proportions: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["MASK", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["mask", "width", "height"],
    name: "ResizeMask",
    display_name: "Resize Mask",
    description:
      "\nResizes the mask or batch of masks to the specified width and height.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  RoundMask: {
    input: {
      required: {
        mask: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "RoundMask",
    display_name: "Round Mask",
    description:
      '\nRounds the mask or batch of masks to a binary mask.  \n<img src="https://github.com/kijai/ComfyUI-KJNodes/assets/40791699/52c85202-f74e-4b96-9dac-c8bda5ddcc40" width="300" height="250" alt="RoundMask example">\n\n',
    category: "KJNodes/masking",
    output_node: false,
  },
  AddLabel: {
    input: {
      required: {
        image: ["IMAGE"],
        text_x: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        text_y: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 48,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        font_size: [
          "INT",
          {
            default: 32,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        font_color: [
          "STRING",
          {
            default: "white",
          },
        ],
        label_color: [
          "STRING",
          {
            default: "black",
          },
        ],
        font: [
          ["FreeMono.ttf", "FreeMonoBoldOblique.otf", "TTNorms-Black.otf"],
        ],
        text: [
          "STRING",
          {
            default: "Text",
          },
        ],
        direction: [
          ["up", "down", "left", "right", "overlay"],
          {
            default: "up",
          },
        ],
      },
      optional: {
        caption: [
          "STRING",
          {
            default: "",
            forceInput: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "AddLabel",
    display_name: "Add Label",
    description:
      "\nCreates a new with the given text, and concatenates it to  \neither above or below the input image.  \nNote that this changes the input image's height!  \nFonts are loaded from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n",
    category: "KJNodes/text",
    output_node: false,
  },
  ColorMatch: {
    input: {
      required: {
        image_ref: ["IMAGE"],
        image_target: ["IMAGE"],
        method: [
          ["mkl", "hm", "reinhard", "mvgd", "hm-mvgd-hm", "hm-mkl-hm"],
          {
            default: "mkl",
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "ColorMatch",
    display_name: "Color Match",
    description:
      "\ncolor-matcher enables color transfer across images which comes in handy for automatic  \ncolor-grading of photographs, paintings and film sequences as well as light-field  \nand stopmotion corrections.  \n\nThe methods behind the mappings are based on the approach from Reinhard et al.,  \nthe Monge-Kantorovich Linearization (MKL) as proposed by Pitie et al. and our analytical solution  \nto a Multi-Variate Gaussian Distribution (MVGD) transfer in conjunction with classical histogram   \nmatching. As shown below our HM-MVGD-HM compound outperforms existing methods.   \nhttps://github.com/hahnec/color-matcher/\n\n",
    category: "KJNodes/image",
    output_node: false,
  },
  CrossFadeImages: {
    input: {
      required: {
        images_1: ["IMAGE"],
        images_2: ["IMAGE"],
        interpolation: [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out",
          ],
        ],
        transition_start_index: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        transitioning_frames: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        start_level: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        end_level: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "CrossFadeImages",
    display_name: "Cross Fade Images",
    description: "",
    category: "KJNodes/image",
    output_node: false,
  },
  GetImagesFromBatchIndexed: {
    input: {
      required: {
        images: ["IMAGE"],
        indexes: [
          "STRING",
          {
            default: "0, 1, 2",
            multiline: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "GetImagesFromBatchIndexed",
    display_name: "Get Images From Batch Indexed",
    description:
      "\nSelects and returns the images at the specified indices as an image batch.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  GetImageRangeFromBatch: {
    input: {
      required: {
        images: ["IMAGE"],
        start_index: [
          "INT",
          {
            default: 0,
            min: -1,
            max: 4096,
            step: 1,
          },
        ],
        num_frames: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
      optional: {
        masks: ["MASK"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "GetImageRangeFromBatch",
    display_name: "Get Image Range From Batch",
    description:
      "\nCreates a new batch using images from the input,  \nbatch, starting from start_index.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  GetImageSizeAndCount: {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["image", "width", "height", "count"],
    name: "GetImageSizeAndCount",
    display_name: "Get Image Size & Count",
    description:
      "\nReturns width, height and batch size of the image,  \nand passes it through unchanged.  \n\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  ImageAndMaskPreview: {
    input: {
      required: {
        mask_opacity: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        mask_color: [
          "STRING",
          {
            default: "255, 255, 255",
          },
        ],
        pass_through: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        image: ["IMAGE"],
        mask: ["MASK"],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["composite"],
    name: "ImageAndMaskPreview",
    display_name: "ImageAndMaskPreview",
    description:
      "\nPreview an image or a mask, when both inputs are used  \ncomposites the mask on top of the image.\nwith pass_through on the preview is disabled and the  \ncomposite is returned from the composite slot instead,  \nthis allows for the preview to be passed for video combine  \nnodes for example.\n",
    category: "KJNodes",
    output_node: true,
  },
  ImageAddMulti: {
    input: {
      required: {
        inputcount: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 1000,
            step: 1,
          },
        ],
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
        blending: [
          ["add", "subtract", "multiply", "difference"],
          {
            default: "add",
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "ImageAddMulti",
    display_name: "Image Add Multi",
    description:
      "\nAdd blends multiple images together.    \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImageBatchMulti: {
    input: {
      required: {
        inputcount: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 1000,
            step: 1,
          },
        ],
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "ImageBatchMulti",
    display_name: "Image Batch Multi",
    description:
      "\nCreates an image batch from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImageBatchRepeatInterleaving: {
    input: {
      required: {
        images: ["IMAGE"],
        repeats: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageBatchRepeatInterleaving",
    display_name: "ImageBatchRepeatInterleaving",
    description:
      "\nRepeats each image in a batch by the specified number of times.  \nExample batch of 5 images: 0, 1 ,2, 3, 4  \nwith repeats 2 becomes batch of 10 images: 0, 0, 1, 1, 2, 2, 3, 3, 4, 4  \n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImageBatchTestPattern: {
    input: {
      required: {
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 255,
            step: 1,
          },
        ],
        start_from: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        text_x: [
          "INT",
          {
            default: 256,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        text_y: [
          "INT",
          {
            default: 256,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        font: [
          ["FreeMono.ttf", "FreeMonoBoldOblique.otf", "TTNorms-Black.otf"],
        ],
        font_size: [
          "INT",
          {
            default: 255,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageBatchTestPattern",
    display_name: "Image Batch Test Pattern",
    description: "",
    category: "KJNodes/text",
    output_node: false,
  },
  ImageConcanate: {
    input: {
      required: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
        direction: [
          ["right", "down", "left", "up"],
          {
            default: "right",
          },
        ],
        match_image_size: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageConcanate",
    display_name: "Image Concatenate",
    description:
      "\nConcatenates the image2 to image1 in the specified direction.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImageConcatMulti: {
    input: {
      required: {
        inputcount: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 1000,
            step: 1,
          },
        ],
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
        direction: [
          ["right", "down", "left", "up"],
          {
            default: "right",
          },
        ],
        match_image_size: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "ImageConcatMulti",
    display_name: "Image Concatenate Multi",
    description:
      "\nCreates an image from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImageGrabPIL: {
    input: {
      required: {
        x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        num_frames: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 255,
            step: 1,
          },
        ],
        delay: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "ImageGrabPIL",
    display_name: "Image Grab PIL",
    description:
      "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
    category: "KJNodes/experimental",
    output_node: false,
  },
  ImageGridComposite2x2: {
    input: {
      required: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
        image3: ["IMAGE"],
        image4: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageGridComposite2x2",
    display_name: "Image Grid Composite 2x2",
    description: "\nConcatenates the 4 input images into a 2x2 grid. \n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImageGridComposite3x3: {
    input: {
      required: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
        image3: ["IMAGE"],
        image4: ["IMAGE"],
        image5: ["IMAGE"],
        image6: ["IMAGE"],
        image7: ["IMAGE"],
        image8: ["IMAGE"],
        image9: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageGridComposite3x3",
    display_name: "Image Grid Composite 3x3",
    description: "\nConcatenates the 9 input images into a 3x3 grid. \n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImageNormalize_Neg1_To_1: {
    input: {
      required: {
        images: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageNormalize_Neg1_To_1",
    display_name: "Image Normalize -1 to 1",
    description: "\nNormalize the images to be in the range [-1, 1]  \n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImagePass: {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImagePass",
    display_name: "ImagePass",
    description: "\nPasses the image through without modifying it.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImagePadForOutpaintMasked: {
    input: {
      required: {
        image: ["IMAGE"],
        left: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        top: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        right: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        bottom: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        feathering: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "ImagePadForOutpaintMasked",
    display_name: "Image Pad For Outpaint Masked",
    description: "",
    category: "image",
    output_node: false,
  },
  ImagePadForOutpaintTargetSize: {
    input: {
      required: {
        image: ["IMAGE"],
        target_width: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        target_height: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        feathering: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 1,
          },
        ],
        upscale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "lanczos"],
        ],
      },
      optional: {
        mask: ["MASK"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "ImagePadForOutpaintTargetSize",
    display_name: "Image Pad For Outpaint Target Size",
    description: "",
    category: "image",
    output_node: false,
  },
  ImageResizeKJ: {
    input: {
      required: {
        image: ["IMAGE"],
        width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        upscale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "lanczos"],
        ],
        keep_proportion: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        divisible_by: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 512,
            step: 1,
          },
        ],
      },
      optional: {
        width_input: [
          "INT",
          {
            forceInput: true,
          },
        ],
        height_input: [
          "INT",
          {
            forceInput: true,
          },
        ],
        get_image_size: ["IMAGE"],
      },
    },
    output: ["IMAGE", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "width", "height"],
    name: "ImageResizeKJ",
    display_name: "Resize Image",
    description:
      "\nResizes the image to the specified width and height.  \nSize can be retrieved from the inputs, and the final scale  \nis  determined in this order of importance:  \n- get_image_size  \n- width_input and height_input  \n- width and height widgets  \n  \nKeep proportions keeps the aspect ratio of the image, by  \nhighest dimension.  \n",
    category: "KJNodes/image",
    output_node: false,
  },
  ImageUpscaleWithModelBatched: {
    input: {
      required: {
        upscale_model: ["UPSCALE_MODEL"],
        images: ["IMAGE"],
        per_batch: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageUpscaleWithModelBatched",
    display_name: "Image Upscale With Model Batched",
    description:
      "\nSame as ComfyUI native model upscaling node,  \nbut allows setting sub-batches for reduced VRAM usage.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  InsertImagesToBatchIndexed: {
    input: {
      required: {
        original_images: ["IMAGE"],
        images_to_insert: ["IMAGE"],
        indexes: [
          "STRING",
          {
            default: "0, 1, 2",
            multiline: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "InsertImagesToBatchIndexed",
    display_name: "Insert Images To Batch Indexed",
    description:
      "\nInserts images at the specified indices into the original image batch.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  LoadAndResizeImage: {
    input: {
      required: {
        image: [
          ["example.png"],
          {
            image_upload: true,
          },
        ],
        resize: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        repeat: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        keep_proportion: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        divisible_by: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 512,
            step: 1,
          },
        ],
        mask_channel: [["alpha", "red", "green", "blue"]],
      },
    },
    output: ["IMAGE", "MASK", "INT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["image", "mask", "width", "height"],
    name: "LoadAndResizeImage",
    display_name: "Load & Resize Image",
    description: "",
    category: "KJNodes/image",
    output_node: false,
  },
  MergeImageChannels: {
    input: {
      required: {
        red: ["IMAGE"],
        green: ["IMAGE"],
        blue: ["IMAGE"],
      },
      optional: {
        mask: [
          "MASK",
          {
            default: null,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "MergeImageChannels",
    display_name: "Merge Image Channels",
    description: "\nMerges channel data into an image.  \n",
    category: "KJNodes/image",
    output_node: false,
  },
  PreviewAnimation: {
    input: {
      required: {
        fps: [
          "FLOAT",
          {
            default: 8,
            min: 0.01,
            max: 1000,
            step: 0.01,
          },
        ],
      },
      optional: {
        images: ["IMAGE"],
        masks: ["MASK"],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "PreviewAnimation",
    display_name: "Preview Animation",
    description: "",
    category: "KJNodes/image",
    output_node: true,
  },
  RemapImageRange: {
    input: {
      required: {
        image: ["IMAGE"],
        min: [
          "FLOAT",
          {
            default: 0,
            min: -10,
            max: 1,
            step: 0.01,
          },
        ],
        max: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        clamp: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "RemapImageRange",
    display_name: "Remap Image Range",
    description: "\nRemaps the image values to the specified range. \n",
    category: "KJNodes/image",
    output_node: false,
  },
  ReverseImageBatch: {
    input: {
      required: {
        images: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ReverseImageBatch",
    display_name: "Reverse Image Batch",
    description: "\nReverses the order of the images in a batch.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  ReplaceImagesInBatch: {
    input: {
      required: {
        original_images: ["IMAGE"],
        replacement_images: ["IMAGE"],
        start_index: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ReplaceImagesInBatch",
    display_name: "Replace Images In Batch",
    description:
      "\nReplaces the images in a batch, starting from the specified start index,  \nwith the replacement images.\n",
    category: "KJNodes/image",
    output_node: false,
  },
  SaveImageWithAlpha: {
    input: {
      required: {
        images: ["IMAGE"],
        mask: ["MASK"],
        filename_prefix: [
          "STRING",
          {
            default: "ComfyUI",
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "SaveImageWithAlpha",
    display_name: "Save Image With Alpha",
    description:
      "\nSaves an image and mask as .PNG with the mask as the alpha channel. \n",
    category: "KJNodes/image",
    output_node: true,
  },
  SplitImageChannels: {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE", "MASK"],
    output_is_list: [false, false, false, false],
    output_name: ["red", "green", "blue", "mask"],
    name: "SplitImageChannels",
    display_name: "Split Image Channels",
    description:
      "\nSplits image channels into images where the selected channel  \nis repeated for all channels, and the alpha as a mask. \n",
    category: "KJNodes/image",
    output_node: false,
  },
  BatchCropFromMask: {
    input: {
      required: {
        original_images: ["IMAGE"],
        masks: ["MASK"],
        crop_size_mult: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.001,
          },
        ],
        bbox_smooth_alpha: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE", "BBOX", "INT", "INT"],
    output_is_list: [false, false, false, false, false],
    output_name: [
      "original_images",
      "cropped_images",
      "bboxes",
      "width",
      "height",
    ],
    name: "BatchCropFromMask",
    display_name: "Batch Crop From Mask",
    description: "",
    category: "KJNodes/masking",
    output_node: false,
  },
  BatchCropFromMaskAdvanced: {
    input: {
      required: {
        original_images: ["IMAGE"],
        masks: ["MASK"],
        crop_size_mult: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        bbox_smooth_alpha: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: [
      "IMAGE",
      "IMAGE",
      "MASK",
      "IMAGE",
      "MASK",
      "BBOX",
      "BBOX",
      "INT",
      "INT",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "original_images",
      "cropped_images",
      "cropped_masks",
      "combined_crop_image",
      "combined_crop_masks",
      "bboxes",
      "combined_bounding_box",
      "bbox_width",
      "bbox_height",
    ],
    name: "BatchCropFromMaskAdvanced",
    display_name: "Batch Crop From Mask Advanced",
    description: "",
    category: "KJNodes/masking",
    output_node: false,
  },
  FilterZeroMasksAndCorrespondingImages: {
    input: {
      required: {
        masks: ["MASK"],
      },
      optional: {
        original_images: ["IMAGE"],
      },
    },
    output: ["MASK", "IMAGE", "IMAGE", "INDEXES"],
    output_is_list: [false, false, false, false],
    output_name: [
      "non_zero_masks_out",
      "non_zero_mask_images_out",
      "zero_mask_images_out",
      "zero_mask_images_out_indexes",
    ],
    name: "FilterZeroMasksAndCorrespondingImages",
    display_name: "FilterZeroMasksAndCorrespondingImages",
    description:
      "\nFilter out all the empty (i.e. all zero) mask in masks  \nAlso filter out all the corresponding images in original_images by indexes if provide  \n  \noriginal_images (optional): If provided, need have same length as masks.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  InsertImageBatchByIndexes: {
    input: {
      required: {
        images: ["IMAGE"],
        images_to_insert: ["IMAGE"],
        insert_indexes: ["INDEXES"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images_after_insert"],
    name: "InsertImageBatchByIndexes",
    display_name: "Insert Image Batch By Indexes",
    description:
      "\nThis node is designed to be use with node FilterZeroMasksAndCorrespondingImages\nIt inserts the images_to_insert into images according to insert_indexes\n\nReturns:\n    images_after_insert: updated original images with origonal sequence order\n",
    category: "KJNodes/image",
    output_node: false,
  },
  BatchUncrop: {
    input: {
      required: {
        original_images: ["IMAGE"],
        cropped_images: ["IMAGE"],
        bboxes: ["BBOX"],
        border_blending: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        crop_rescale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        border_top: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        border_bottom: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        border_left: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        border_right: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "BatchUncrop",
    display_name: "Batch Uncrop",
    description: "",
    category: "KJNodes/masking",
    output_node: false,
  },
  BatchUncropAdvanced: {
    input: {
      required: {
        original_images: ["IMAGE"],
        cropped_images: ["IMAGE"],
        cropped_masks: ["MASK"],
        combined_crop_mask: ["MASK"],
        bboxes: ["BBOX"],
        border_blending: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        crop_rescale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        use_combined_mask: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        use_square_mask: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
      optional: {
        combined_bounding_box: [
          "BBOX",
          {
            default: null,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "BatchUncropAdvanced",
    display_name: "Batch Uncrop Advanced",
    description: "",
    category: "KJNodes/masking",
    output_node: false,
  },
  SplitBboxes: {
    input: {
      required: {
        bboxes: ["BBOX"],
        index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 99999999,
            step: 1,
          },
        ],
      },
    },
    output: ["BBOX", "BBOX"],
    output_is_list: [false, false],
    output_name: ["bboxes_a", "bboxes_b"],
    name: "SplitBboxes",
    display_name: "Split Bboxes",
    description:
      "\nSplits the specified bbox list at the given index into two lists.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  BboxToInt: {
    input: {
      required: {
        bboxes: ["BBOX"],
        index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 99999999,
            step: 1,
          },
        ],
      },
    },
    output: ["INT", "INT", "INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false, false, false],
    output_name: ["x_min", "y_min", "width", "height", "center_x", "center_y"],
    name: "BboxToInt",
    display_name: "Bbox To Int",
    description:
      "\nReturns selected index from bounding box list as integers.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  BboxVisualize: {
    input: {
      required: {
        images: ["IMAGE"],
        bboxes: ["BBOX"],
        line_width: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "BboxVisualize",
    display_name: "Bbox Visualize",
    description: "\nVisualizes the specified bbox on the image.\n",
    category: "KJNodes/masking",
    output_node: false,
  },
  GenerateNoise: {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
        seed: [
          "INT",
          {
            default: 123,
            min: 0,
            max: 18446744073709552000,
            step: 1,
          },
        ],
        multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 4096,
            step: 0.01,
          },
        ],
        constant_batch_noise: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        normalize: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        model: ["MODEL"],
        sigmas: ["SIGMAS"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "GenerateNoise",
    display_name: "Generate Noise",
    description:
      "\nGenerates noise for injection or to be used as empty latents on samplers with add_noise off.\n",
    category: "KJNodes/noise",
    output_node: false,
  },
  FlipSigmasAdjusted: {
    input: {
      required: {
        sigmas: ["SIGMAS"],
        divide_by_last_sigma: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        divide_by: [
          "FLOAT",
          {
            default: 1,
            min: 1,
            max: 255,
            step: 0.01,
          },
        ],
        offset_by: [
          "INT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 1,
          },
        ],
      },
    },
    output: ["SIGMAS", "STRING"],
    output_is_list: [false, false],
    output_name: ["SIGMAS", "sigmas_string"],
    name: "FlipSigmasAdjusted",
    display_name: "Flip Sigmas Adjusted",
    description: "",
    category: "KJNodes/noise",
    output_node: false,
  },
  InjectNoiseToLatent: {
    input: {
      required: {
        latents: ["LATENT"],
        strength: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 200,
            step: 0.0001,
          },
        ],
        noise: ["LATENT"],
        normalize: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        average: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
        mix_randn_amount: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1000,
            step: 0.001,
          },
        ],
        seed: [
          "INT",
          {
            default: 123,
            min: 0,
            max: 18446744073709552000,
            step: 1,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "InjectNoiseToLatent",
    display_name: "Inject Noise To Latent",
    description: "",
    category: "KJNodes/noise",
    output_node: false,
  },
  CustomSigmas: {
    input: {
      required: {
        sigmas_string: [
          "STRING",
          {
            default:
              "14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029",
            multiline: true,
          },
        ],
        interpolate_to_steps: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "CustomSigmas",
    display_name: "Custom Sigmas",
    description:
      "\nCreates a sigmas tensor from a string of comma separated values.  \nExamples: \n   \nNvidia's optimized AYS 10 step schedule for SD 1.5:  \n14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029  \nSDXL:   \n14.615, 6.315, 3.771, 2.181, 1.342, 0.862, 0.555, 0.380, 0.234, 0.113, 0.029  \nSVD:  \n700.00, 54.5, 15.886, 7.977, 4.248, 1.789, 0.981, 0.403, 0.173, 0.034, 0.002  \n",
    category: "KJNodes/noise",
    output_node: false,
  },
  WidgetToString: {
    input: {
      required: {
        id: [
          "INT",
          {
            default: 0,
          },
        ],
        widget_name: [
          "STRING",
          {
            multiline: false,
          },
        ],
        return_all: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      hidden: {
        extra_pnginfo: "EXTRA_PNGINFO",
        prompt: "PROMPT",
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "WidgetToString",
    display_name: "Widget To String",
    description:
      "\nSelects a node and it's specified widget and outputs the value as a string.  \nTo see node id's, enable node id display from Manager badge menu.\n",
    category: "KJNodes/text",
    output_node: false,
  },
  DummyLatentOut: {
    input: {
      required: {
        latent: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "DummyLatentOut",
    display_name: "Dummy Latent Out",
    description:
      "\nDoes nothing, used to trigger generic workflow output.    \nA way to get previews in the UI without saving anything to disk.\n",
    category: "KJNodes/misc",
    output_node: true,
  },
  GetLatentsFromBatchIndexed: {
    input: {
      required: {
        latents: ["LATENT"],
        indexes: [
          "STRING",
          {
            default: "0, 1, 2",
            multiline: true,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "GetLatentsFromBatchIndexed",
    display_name: "Get Latents From Batch Indexed",
    description:
      "\nSelects and returns the latents at the specified indices as an latent batch.\n",
    category: "KJNodes",
    output_node: false,
  },
  ScaleBatchPromptSchedule: {
    input: {
      required: {
        input_str: [
          "STRING",
          {
            forceInput: true,
            default: "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
          },
        ],
        old_frame_count: [
          "INT",
          {
            forceInput: true,
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        new_frame_count: [
          "INT",
          {
            forceInput: true,
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "ScaleBatchPromptSchedule",
    display_name: "Scale Batch Prompt Schedule",
    description:
      "\nScales a batch schedule from Fizz' nodes BatchPromptSchedule\nto a different frame count.\n",
    category: "KJNodes",
    output_node: false,
  },
  CameraPoseVisualizer: {
    input: {
      required: {
        pose_file_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        base_xval: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
        zval: [
          "FLOAT",
          {
            default: 0.3,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
        scale: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 10,
            step: 0.01,
          },
        ],
        use_exact_fx: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        relative_c2w: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        use_viewer: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        cameractrl_poses: [
          "CAMERACTRL_POSES",
          {
            default: null,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "CameraPoseVisualizer",
    display_name: "Camera Pose Visualizer",
    description:
      "\nVisualizes the camera poses, from Animatediff-Evolved CameraCtrl Pose  \nor a .txt file with RealEstate camera intrinsics and coordinates, in a 3D plot. \n",
    category: "KJNodes/misc",
    output_node: false,
  },
  JoinStrings: {
    input: {
      required: {
        string1: [
          "STRING",
          {
            default: "",
            forceInput: true,
          },
        ],
        string2: [
          "STRING",
          {
            default: "",
            forceInput: true,
          },
        ],
        delimiter: [
          "STRING",
          {
            default: " ",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "JoinStrings",
    display_name: "Join Strings",
    description: "",
    category: "KJNodes/constants",
    output_node: false,
  },
  JoinStringMulti: {
    input: {
      required: {
        inputcount: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 1000,
            step: 1,
          },
        ],
        string_1: [
          "STRING",
          {
            default: "",
            forceInput: true,
          },
        ],
        string_2: [
          "STRING",
          {
            default: "",
            forceInput: true,
          },
        ],
        delimiter: [
          "STRING",
          {
            default: " ",
            multiline: false,
          },
        ],
        return_list: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["string"],
    name: "JoinStringMulti",
    display_name: "Join String Multi",
    description:
      "\nCreates single string, or a list of strings, from  \nmultiple input strings.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    category: "KJNodes",
    output_node: false,
  },
  SomethingToString: {
    input: {
      required: {
        input: ["*", {}],
      },
      optional: {
        prefix: [
          "STRING",
          {
            default: "",
          },
        ],
        suffix: [
          "STRING",
          {
            default: "",
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "SomethingToString",
    display_name: "Something To String",
    description: "\nConverts any type to a string.\n",
    category: "KJNodes/text",
    output_node: false,
  },
  Sleep: {
    input: {
      required: {
        input: ["*", {}],
        minutes: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1439,
          },
        ],
        seconds: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 59.99,
            step: 0.01,
          },
        ],
      },
    },
    output: ["*"],
    output_is_list: [false],
    output_name: ["*"],
    name: "Sleep",
    display_name: "Sleep",
    description: "\nDelays the execution for the input amount of time.\n",
    category: "KJNodes/misc",
    output_node: false,
  },
  VRAM_Debug: {
    input: {
      required: {
        empty_cache: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        gc_collect: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        unload_all_models: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      optional: {
        any_input: ["*", {}],
        image_pass: ["IMAGE"],
        model_pass: ["MODEL"],
      },
    },
    output: ["*", "IMAGE", "MODEL", "INT", "INT"],
    output_is_list: [false, false, false, false, false],
    output_name: [
      "any_output",
      "image_pass",
      "model_pass",
      "freemem_before",
      "freemem_after",
    ],
    name: "VRAM_Debug",
    display_name: "VRAM Debug",
    description:
      "\nReturns the inputs unchanged, they are only used as triggers,  \nand performs comfy model management functions and garbage collection,  \nreports free VRAM before and after the operations.\n",
    category: "KJNodes/misc",
    output_node: false,
  },
  EmptyLatentImagePresets: {
    input: {
      required: {
        dimensions: [
          [
            "512 x 512",
            "768 x 512",
            "960 x 512",
            "1024 x 512",
            "1536 x 640",
            "1344 x 768",
            "1216 x 832",
            "1152 x 896",
            "1024 x 1024",
          ],
          {
            default: "512 x 512",
          },
        ],
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["LATENT", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["Latent", "Width", "Height"],
    name: "EmptyLatentImagePresets",
    display_name: "Empty Latent Image Presets",
    description: "",
    category: "KJNodes",
    output_node: false,
  },
  ModelPassThrough: {
    input: {
      required: {
        model: ["MODEL"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["model"],
    name: "ModelPassThrough",
    display_name: "ModelPass",
    description:
      "\n    Simply passes through the model,\n    workaround for Set node not allowing bypassed inputs.\n",
    category: "KJNodes/misc",
    output_node: false,
  },
  NormalizedAmplitudeToMask: {
    input: {
      required: {
        normalized_amp: ["NORMALIZED_AMPLITUDE"],
        width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        frame_offset: [
          "INT",
          {
            default: 0,
            min: -255,
            max: 255,
            step: 1,
          },
        ],
        location_x: [
          "INT",
          {
            default: 256,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        location_y: [
          "INT",
          {
            default: 256,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        size: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
        shape: [
          ["none", "circle", "square", "triangle"],
          {
            default: "none",
          },
        ],
        color: [
          ["white", "amplitude"],
          {
            default: "amplitude",
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "NormalizedAmplitudeToMask",
    display_name: "NormalizedAmplitudeToMask",
    description:
      "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates masks based on the normalized amplitude.\n",
    category: "KJNodes/audio",
    output_node: false,
  },
  NormalizedAmplitudeToFloatList: {
    input: {
      required: {
        normalized_amp: ["NORMALIZED_AMPLITUDE"],
      },
    },
    output: ["FLOAT"],
    output_is_list: [false],
    output_name: ["FLOAT"],
    name: "NormalizedAmplitudeToFloatList",
    display_name: "NormalizedAmplitudeToFloatList",
    description:
      "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates a list of floats from the normalized amplitude.\n",
    category: "KJNodes/audio",
    output_node: false,
  },
  OffsetMaskByNormalizedAmplitude: {
    input: {
      required: {
        normalized_amp: ["NORMALIZED_AMPLITUDE"],
        mask: ["MASK"],
        x: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 16384,
            step: 1,
            display: "number",
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 16384,
            step: 1,
            display: "number",
          },
        ],
        rotate: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        angle_multiplier: [
          "FLOAT",
          {
            default: 0,
            min: -1,
            max: 1,
            step: 0.001,
            display: "number",
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["mask"],
    name: "OffsetMaskByNormalizedAmplitude",
    display_name: "OffsetMaskByNormalizedAmplitude",
    description:
      "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nOffsets masks based on the normalized amplitude.\n",
    category: "KJNodes/audio",
    output_node: false,
  },
  ImageTransformByNormalizedAmplitude: {
    input: {
      required: {
        normalized_amp: ["NORMALIZED_AMPLITUDE"],
        zoom_scale: [
          "FLOAT",
          {
            default: 0,
            min: -1,
            max: 1,
            step: 0.001,
            display: "number",
          },
        ],
        x_offset: [
          "INT",
          {
            default: 0,
            min: -16383,
            max: 16384,
            step: 1,
            display: "number",
          },
        ],
        y_offset: [
          "INT",
          {
            default: 0,
            min: -16383,
            max: 16384,
            step: 1,
            display: "number",
          },
        ],
        cumulative: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageTransformByNormalizedAmplitude",
    display_name: "ImageTransformByNormalizedAmplitude",
    description:
      "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nTransforms image based on the normalized amplitude.\n",
    category: "KJNodes/audio",
    output_node: false,
  },
  SplineEditor: {
    input: {
      required: {
        points_store: [
          "STRING",
          {
            multiline: false,
          },
        ],
        coordinates: [
          "STRING",
          {
            multiline: false,
          },
        ],
        mask_width: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
            step: 8,
          },
        ],
        mask_height: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
            step: 8,
          },
        ],
        points_to_sample: [
          "INT",
          {
            default: 16,
            min: 2,
            max: 1000,
            step: 1,
          },
        ],
        sampling_method: [
          ["path", "time"],
          {
            default: "time",
          },
        ],
        interpolation: [
          [
            "cardinal",
            "monotone",
            "basis",
            "linear",
            "step-before",
            "step-after",
            "polar",
            "polar-reverse",
          ],
          {
            default: "cardinal",
          },
        ],
        tension: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        repeat_output: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        float_output_type: [
          ["list", "pandas series", "tensor"],
          {
            default: "list",
          },
        ],
      },
      optional: {
        min_value: [
          "FLOAT",
          {
            default: 0,
            min: -10000,
            max: 10000,
            step: 0.01,
          },
        ],
        max_value: [
          "FLOAT",
          {
            default: 1,
            min: -10000,
            max: 10000,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MASK", "STRING", "FLOAT", "INT", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["mask", "coord_str", "float", "count", "normalized_str"],
    name: "SplineEditor",
    display_name: "Spline Editor",
    description:
      "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create values for various   \n## schedules and/or mask batches.  \n\n**Shift + click** to add control point at end.\n**Ctrl + click** to add control point (subdivide) between two points.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end.  \n  \nRight click on canvas for context menu:  \nThese are purely visual options, doesn't affect the output:  \n - Toggle handles visibility\n - Display sample points: display the points to be returned.  \n\n**points_to_sample** value sets the number of samples  \nreturned from the **drawn spline itself**, this is independent from the  \nactual control points, so the interpolation type matters.  \nsampling_method: \n - time: samples along the time axis, used for schedules  \n - path: samples along the path itself, useful for coordinates  \n\noutput types:\n - mask batch  \n        example compatible nodes: anything that takes masks  \n - list of floats\n        example compatible nodes: IPAdapter weights  \n - pandas series\n        example compatible nodes: anything that takes Fizz'  \n        nodes Batch Value Schedule  \n - torch tensor  \n        example compatible nodes: unknown\n",
    category: "KJNodes/weights",
    output_node: false,
  },
  CreateShapeImageOnPath: {
    input: {
      required: {
        shape: [
          ["circle", "square", "triangle"],
          {
            default: "circle",
          },
        ],
        coordinates: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        frame_width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        frame_height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        shape_width: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
        shape_height: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
        shape_color: [
          "STRING",
          {
            default: "white",
          },
        ],
        bg_color: [
          "STRING",
          {
            default: "black",
          },
        ],
        blur_radius: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.1,
          },
        ],
        intensity: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 100,
            step: 0.01,
          },
        ],
      },
      optional: {
        size_multiplier: [
          "FLOAT",
          {
            default: [1],
            forceInput: true,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["image", "mask"],
    name: "CreateShapeImageOnPath",
    display_name: "Create Shape Image On Path",
    description:
      "\nCreates an image or batch of images with the specified shape.  \nLocations are center locations.  \n",
    category: "KJNodes/image",
    output_node: false,
  },
  CreateShapeMaskOnPath: {
    input: {
      required: {
        shape: [
          ["circle", "square", "triangle"],
          {
            default: "circle",
          },
        ],
        coordinates: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        frame_width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        frame_height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        shape_width: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
        shape_height: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
      },
      optional: {
        size_multiplier: [
          "FLOAT",
          {
            default: [1],
            forceInput: true,
          },
        ],
      },
    },
    output: ["MASK", "MASK"],
    output_is_list: [false, false],
    output_name: ["mask", "mask_inverted"],
    name: "CreateShapeMaskOnPath",
    display_name: "Create Shape Mask On Path",
    description:
      "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \n",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  CreateTextOnPath: {
    input: {
      required: {
        coordinates: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text: [
          "STRING",
          {
            default: "text",
            multiline: true,
          },
        ],
        frame_width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        frame_height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        font: [
          ["FreeMono.ttf", "FreeMonoBoldOblique.otf", "TTNorms-Black.otf"],
        ],
        font_size: [
          "INT",
          {
            default: 42,
          },
        ],
        alignment: [
          ["left", "center", "right"],
          {
            default: "center",
          },
        ],
        text_color: [
          "STRING",
          {
            default: "white",
          },
        ],
      },
      optional: {
        size_multiplier: [
          "FLOAT",
          {
            default: [1],
            forceInput: true,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK", "MASK"],
    output_is_list: [false, false, false],
    output_name: ["image", "mask", "mask_inverted"],
    name: "CreateTextOnPath",
    display_name: "Create Text On Path",
    description:
      "\nCreates a mask or batch of masks with the specified text.  \nLocations are center locations.  \n",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  CreateGradientFromCoords: {
    input: {
      required: {
        coordinates: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        frame_width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        frame_height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        start_color: [
          "STRING",
          {
            default: "white",
          },
        ],
        end_color: [
          "STRING",
          {
            default: "black",
          },
        ],
        multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 100,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "CreateGradientFromCoords",
    display_name: "Create Gradient From Coords",
    description: "\nCreates a gradient image from coordinates.    \n",
    category: "KJNodes/image",
    output_node: false,
  },
  GradientToFloat: {
    input: {
      required: {
        image: ["IMAGE"],
        steps: [
          "INT",
          {
            default: 10,
            min: 2,
            max: 10000,
            step: 1,
          },
        ],
      },
    },
    output: ["FLOAT", "FLOAT"],
    output_is_list: [false, false],
    output_name: ["float_x", "float_y"],
    name: "GradientToFloat",
    display_name: "Gradient To Float",
    description: "\nCalculates list of floats from image.    \n",
    category: "KJNodes/image",
    output_node: false,
  },
  WeightScheduleExtend: {
    input: {
      required: {
        input_values_1: [
          "FLOAT",
          {
            default: 0,
            forceInput: true,
          },
        ],
        input_values_2: [
          "FLOAT",
          {
            default: 0,
            forceInput: true,
          },
        ],
        output_type: [
          ["match_input", "list", "pandas series", "tensor"],
          {
            default: "match_input",
          },
        ],
      },
    },
    output: ["FLOAT"],
    output_is_list: [false],
    output_name: ["FLOAT"],
    name: "WeightScheduleExtend",
    display_name: "Weight Schedule Extend",
    description:
      "\nExtends, and converts if needed, different value lists/series  \n",
    category: "KJNodes/weights",
    output_node: false,
  },
  MaskOrImageToWeight: {
    input: {
      required: {
        output_type: [
          ["list", "pandas series", "tensor", "string"],
          {
            default: "list",
          },
        ],
      },
      optional: {
        images: ["IMAGE"],
        masks: ["MASK"],
      },
    },
    output: ["FLOAT", "STRING"],
    output_is_list: [false, false],
    output_name: ["FLOAT", "STRING"],
    name: "MaskOrImageToWeight",
    display_name: "Mask Or Image To Weight",
    description:
      "\nGets the mean values from mask or image batch  \nand returns that as the selected output type.   \n",
    category: "KJNodes/weights",
    output_node: false,
  },
  WeightScheduleConvert: {
    input: {
      required: {
        input_values: [
          "FLOAT",
          {
            default: 0,
            forceInput: true,
          },
        ],
        output_type: [
          ["match_input", "list", "pandas series", "tensor"],
          {
            default: "list",
          },
        ],
        invert: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        repeat: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 255,
            step: 1,
          },
        ],
      },
      optional: {
        remap_to_frames: [
          "INT",
          {
            default: 0,
          },
        ],
        interpolation_curve: [
          "FLOAT",
          {
            forceInput: true,
          },
        ],
        remap_values: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        remap_min: [
          "FLOAT",
          {
            default: 0,
            min: -100000,
            max: 100000,
            step: 0.01,
          },
        ],
        remap_max: [
          "FLOAT",
          {
            default: 1,
            min: -100000,
            max: 100000,
            step: 0.01,
          },
        ],
      },
    },
    output: ["FLOAT", "STRING", "INT"],
    output_is_list: [false, false, false],
    output_name: ["FLOAT", "STRING", "INT"],
    name: "WeightScheduleConvert",
    display_name: "Weight Schedule Convert",
    description: "\nConverts different value lists/series to another type.  \n",
    category: "KJNodes/weights",
    output_node: false,
  },
  FloatToMask: {
    input: {
      required: {
        input_values: [
          "FLOAT",
          {
            forceInput: true,
            default: 0,
          },
        ],
        width: [
          "INT",
          {
            default: 100,
            min: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 100,
            min: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "FloatToMask",
    display_name: "Float To Mask",
    description:
      "\nGenerates a batch of masks based on the input float values.\nThe batch size is determined by the length of the input float values.\nEach mask is generated with the specified width and height.\n",
    category: "KJNodes/masking/generate",
    output_node: false,
  },
  FloatToSigmas: {
    input: {
      required: {
        float_list: [
          "FLOAT",
          {
            default: 0,
            forceInput: true,
          },
        ],
      },
    },
    output: ["SIGMAS"],
    output_is_list: [false],
    output_name: ["SIGMAS"],
    name: "FloatToSigmas",
    display_name: "Float To Sigmas",
    description: "\nCreates a sigmas tensor from list of float values.  \n\n",
    category: "KJNodes/noise",
    output_node: false,
  },
  PlotCoordinates: {
    input: {
      required: {
        coordinates: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text: [
          "STRING",
          {
            default: "title",
            multiline: false,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
            step: 8,
          },
        ],
        bbox_width: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 8,
          },
        ],
        bbox_height: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 8,
          },
        ],
      },
      optional: {
        size_multiplier: [
          "FLOAT",
          {
            default: [1],
            forceInput: true,
          },
        ],
      },
    },
    output: ["IMAGE", "INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false, false],
    output_name: ["images", "width", "height", "bbox_width", "bbox_height"],
    name: "PlotCoordinates",
    display_name: "Plot Coordinates",
    description:
      "\nPlots coordinates to sequence of images using Matplotlib.  \n\n",
    category: "KJNodes/experimental",
    output_node: false,
  },
  InterpolateCoords: {
    input: {
      required: {
        coordinates: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        interpolation_curve: [
          "FLOAT",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["coordinates"],
    name: "InterpolateCoords",
    display_name: "Interpolate Coords",
    description: "\nInterpolates coordinates based on a curve.   \n",
    category: "KJNodes/experimental",
    output_node: false,
  },
  StabilityAPI_SD3: {
    input: {
      required: {
        prompt: [
          "STRING",
          {
            multiline: true,
          },
        ],
        n_prompt: [
          "STRING",
          {
            multiline: true,
          },
        ],
        seed: [
          "INT",
          {
            default: 123,
            min: 0,
            max: 4294967294,
            step: 1,
          },
        ],
        model: [
          ["sd3", "sd3-turbo"],
          {
            default: "sd3",
          },
        ],
        aspect_ratio: [
          ["1:1", "16:9", "21:9", "2:3", "3:2", "4:5", "5:4", "9:16", "9:21"],
          {
            default: "1:1",
          },
        ],
        output_format: [
          ["png", "jpeg"],
          {
            default: "jpeg",
          },
        ],
      },
      optional: {
        api_key: [
          "STRING",
          {
            multiline: true,
          },
        ],
        image: ["IMAGE"],
        img2img_strength: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        disable_metadata: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "StabilityAPI_SD3",
    display_name: "Stability API SD3",
    description:
      '\n## Calls StabilityAI API\n   \nAlthough you may have multiple keys in your account,  \nyou should use the same key for all requests to this API.  \n\nGet your API key here: https://platform.stability.ai/account/keys  \nRecommended to set the key in the config.json -file under this  \nnode packs folder.  \n# WARNING:  \nOtherwise the API key may get saved in the image metadata even  \nwith "disable_metadata" on if the workflow includes save nodes  \nseparate from this node.  \n   \nsd3 requires 6.5 credits per generation  \nsd3-turbo requires 4 credits per generation  \n\nIf no image is provided, mode is set to text-to-image  \n\n',
    category: "KJNodes/experimental",
    output_node: false,
  },
  SoundReactive: {
    input: {
      required: {
        sound_level: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 99999,
            step: 0.01,
          },
        ],
        start_range_hz: [
          "INT",
          {
            default: 150,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        end_range_hz: [
          "INT",
          {
            default: 2000,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        multiplier: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 99999,
            step: 0.01,
          },
        ],
        smoothing_factor: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        normalize: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["FLOAT", "INT"],
    output_is_list: [false, false],
    output_name: ["sound_level", "sound_level_int"],
    name: "SoundReactive",
    display_name: "Sound Reactive",
    description:
      "\nReacts to the sound level of the input.  \nUses your browsers sound input options and requires.  \nMeant to be used with realtime diffusion with autoqueue.\n",
    category: "KJNodes/audio",
    output_node: false,
  },
  StableZero123_BatchSchedule: {
    input: {
      required: {
        clip_vision: ["CLIP_VISION"],
        init_image: ["IMAGE"],
        vae: ["VAE"],
        width: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 256,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
        interpolation: [["linear", "ease_in", "ease_out", "ease_in_out"]],
        azimuth_points_string: [
          "STRING",
          {
            default: "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
            multiline: true,
          },
        ],
        elevation_points_string: [
          "STRING",
          {
            default: "0:(0.0),\n7:(0.0),\n15:(0.0)\n",
            multiline: true,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "StableZero123_BatchSchedule",
    display_name: "Stable Zero123 Batch Schedule",
    description: "",
    category: "KJNodes/experimental",
    output_node: false,
  },
  SV3D_BatchSchedule: {
    input: {
      required: {
        clip_vision: ["CLIP_VISION"],
        init_image: ["IMAGE"],
        vae: ["VAE"],
        width: [
          "INT",
          {
            default: 576,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 576,
            min: 16,
            max: 16384,
            step: 8,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 21,
            min: 1,
            max: 4096,
          },
        ],
        interpolation: [["linear", "ease_in", "ease_out", "ease_in_out"]],
        azimuth_points_string: [
          "STRING",
          {
            default: "0:(0.0),\n9:(180.0),\n20:(360.0)\n",
            multiline: true,
          },
        ],
        elevation_points_string: [
          "STRING",
          {
            default: "0:(0.0),\n9:(0.0),\n20:(0.0)\n",
            multiline: true,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["positive", "negative", "latent"],
    name: "SV3D_BatchSchedule",
    display_name: "SV3D Batch Schedule",
    description:
      "\nAllow scheduling of the azimuth and elevation conditions for SV3D.  \nNote that SV3D is still a video model and the schedule needs to always go forward  \nhttps://huggingface.co/stabilityai/sv3d\n",
    category: "KJNodes/experimental",
    output_node: false,
  },
  LoadResAdapterNormalization: {
    input: {
      required: {
        model: ["MODEL"],
        resadapter_path: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "LoadResAdapterNormalization",
    display_name: "LoadResAdapterNormalization",
    description: "",
    category: "KJNodes/experimental",
    output_node: false,
  },
  Superprompt: {
    input: {
      required: {
        instruction_prompt: [
          "STRING",
          {
            default: "Expand the following prompt to add more detail",
            multiline: true,
          },
        ],
        prompt: [
          "STRING",
          {
            default: "",
            multiline: true,
            forceInput: true,
          },
        ],
        max_new_tokens: [
          "INT",
          {
            default: 128,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Superprompt",
    display_name: "Superprompt",
    description:
      "\n# SuperPrompt\nA T5 model fine-tuned on the SuperPrompt dataset for  \nupsampling text prompts to more detailed descriptions.  \nMeant to be used as a pre-generation step for text-to-image  \nmodels that benefit from more detailed prompts.  \nhttps://huggingface.co/roborovski/superprompt-v1\n",
    category: "KJNodes/text",
    output_node: false,
  },
  GLIGENTextBoxApplyBatchCoords: {
    input: {
      required: {
        conditioning_to: ["CONDITIONING"],
        latents: ["LATENT"],
        clip: ["CLIP"],
        gligen_textbox_model: ["GLIGEN"],
        coordinates: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
        width: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 128,
            min: 8,
            max: 4096,
            step: 8,
          },
        ],
      },
      optional: {
        size_multiplier: [
          "FLOAT",
          {
            default: [1],
            forceInput: true,
          },
        ],
      },
    },
    output: ["CONDITIONING", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["conditioning", "coord_preview"],
    name: "GLIGENTextBoxApplyBatchCoords",
    display_name: "GLIGENTextBoxApplyBatchCoords",
    description:
      '\nThis node allows scheduling GLIGEN text box positions in a batch,  \nto be used with AnimateDiff-Evolved. Intended to pair with the  \nSpline Editor -node.  \n\nGLIGEN model can be downloaded through the Manage\'s "Install Models" menu.  \nOr directly from here:  \nhttps://huggingface.co/comfyanonymous/GLIGEN_pruned_safetensors/tree/main  \n  \nInputs:  \n- **latents** input is used to calculate batch size  \n- **clip** is your standard text encoder, use same as for the main prompt  \n- **gligen_textbox_model** connects to GLIGEN Loader  \n- **coordinates** takes a json string of points, directly compatible  \nwith the spline editor node.\n- **text** is the part of the prompt to set position for  \n- **width** and **height** are the size of the GLIGEN bounding box  \n  \nOutputs:\n- **conditioning** goes between to clip text encode and the sampler  \n- **coord_preview** is an optional preview of the coordinates and  \nbounding boxes.\n\n',
    category: "KJNodes/experimental",
    output_node: false,
  },
  Intrinsic_lora_sampling: {
    input: {
      required: {
        model: ["MODEL"],
        lora_name: [
          [
            "intrinsic_lora_sd15_albedo.safetensors",
            "intrinsic_lora_sd15_depth.safetensors",
            "intrinsic_lora_sd15_normal.safetensors",
            "intrinsic_lora_sd15_shading.safetensors",
            "intrinsic_loras.txt",
          ],
        ],
        task: [
          ["depth map", "surface normals", "albedo", "shading"],
          {
            default: "depth map",
          },
        ],
        text: [
          "STRING",
          {
            multiline: true,
            default: "",
          },
        ],
        clip: ["CLIP"],
        vae: ["VAE"],
        per_batch: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
      optional: {
        image: ["IMAGE"],
        optional_latent: ["LATENT"],
      },
    },
    output: ["IMAGE", "LATENT"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "LATENT"],
    name: "Intrinsic_lora_sampling",
    display_name: "Intrinsic Lora Sampling",
    description:
      "\nSampler to use the intrinsic loras:  \nhttps://github.com/duxiaodan/intrinsic-lora  \nThese LoRAs are tiny and thus included  \nwith this node pack.\n",
    category: "KJNodes",
    output_node: false,
  },
  CheckpointPerturbWeights: {
    input: {
      required: {
        model: ["MODEL"],
        joint_blocks: [
          "FLOAT",
          {
            default: 0.02,
            min: 0.001,
            max: 10,
            step: 0.001,
          },
        ],
        final_layer: [
          "FLOAT",
          {
            default: 0.02,
            min: 0.001,
            max: 10,
            step: 0.001,
          },
        ],
        rest_of_the_blocks: [
          "FLOAT",
          {
            default: 0.02,
            min: 0.001,
            max: 10,
            step: 0.001,
          },
        ],
        seed: [
          "INT",
          {
            default: 123,
            min: 0,
            max: 18446744073709552000,
            step: 1,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "CheckpointPerturbWeights",
    display_name: "CheckpointPerturbWeights",
    description: "",
    category: "KJNodes/experimental",
    output_node: true,
  },
  CreateInstanceDiffusionTracking: {
    input: {
      required: {
        coordinates: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        bbox_width: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        bbox_height: [
          "INT",
          {
            default: 512,
            min: 16,
            max: 4096,
            step: 1,
          },
        ],
        class_name: [
          "STRING",
          {
            default: "class_name",
          },
        ],
        class_id: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        prompt: [
          "STRING",
          {
            default: "prompt",
            multiline: true,
          },
        ],
      },
      optional: {
        size_multiplier: [
          "FLOAT",
          {
            default: [1],
            forceInput: true,
          },
        ],
        fit_in_frame: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["TRACKING", "STRING", "INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "tracking",
      "prompt",
      "width",
      "height",
      "bbox_width",
      "bbox_height",
    ],
    name: "CreateInstanceDiffusionTracking",
    display_name: "CreateInstanceDiffusionTracking",
    description:
      '\nCreates tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n  \nInstanceDiffusion prompt format:  \n"class_id.class_name": "prompt",  \nfor example:  \n"1.head": "((head))",  \n',
    category: "KJNodes/InstanceDiffusion",
    output_node: false,
  },
  AppendInstanceDiffusionTracking: {
    input: {
      required: {
        tracking_1: [
          "TRACKING",
          {
            forceInput: true,
          },
        ],
        tracking_2: [
          "TRACKING",
          {
            forceInput: true,
          },
        ],
      },
      optional: {
        prompt_1: [
          "STRING",
          {
            default: "",
            forceInput: true,
          },
        ],
        prompt_2: [
          "STRING",
          {
            default: "",
            forceInput: true,
          },
        ],
      },
    },
    output: ["TRACKING", "STRING"],
    output_is_list: [false, false],
    output_name: ["tracking", "prompt"],
    name: "AppendInstanceDiffusionTracking",
    display_name: "AppendInstanceDiffusionTracking",
    description:
      "\nAppends tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n\n",
    category: "KJNodes/InstanceDiffusion",
    output_node: false,
  },
  DrawInstanceDiffusionTracking: {
    input: {
      required: {
        image: ["IMAGE"],
        tracking: [
          "TRACKING",
          {
            forceInput: true,
          },
        ],
        box_line_width: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
        draw_text: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        font: [
          ["FreeMono.ttf", "FreeMonoBoldOblique.otf", "TTNorms-Black.otf"],
        ],
        font_size: [
          "INT",
          {
            default: 20,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "DrawInstanceDiffusionTracking",
    display_name: "DrawInstanceDiffusionTracking",
    description:
      "\nDraws the tracking data from  \nCreateInstanceDiffusionTracking -node.\n\n",
    category: "KJNodes/InstanceDiffusion",
    output_node: false,
  },
  SUPIR_Upscale: {
    input: {
      required: {
        supir_model: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        sdxl_model: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        image: ["IMAGE"],
        seed: [
          "INT",
          {
            default: 123,
            min: 0,
            max: 18446744073709552000,
            step: 1,
          },
        ],
        resize_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "lanczos"],
          {
            default: "lanczos",
          },
        ],
        scale_by: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 20,
            step: 0.01,
          },
        ],
        steps: [
          "INT",
          {
            default: 45,
            min: 3,
            max: 4096,
            step: 1,
          },
        ],
        restoration_scale: [
          "FLOAT",
          {
            default: -1,
            min: -1,
            max: 6,
            step: 1,
          },
        ],
        cfg_scale: [
          "FLOAT",
          {
            default: 4,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
        a_prompt: [
          "STRING",
          {
            multiline: true,
            default: "high quality, detailed",
          },
        ],
        n_prompt: [
          "STRING",
          {
            multiline: true,
            default: "bad quality, blurry, messy",
          },
        ],
        s_churn: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 40,
            step: 1,
          },
        ],
        s_noise: [
          "FLOAT",
          {
            default: 1.003,
            min: 1,
            max: 1.1,
            step: 0.001,
          },
        ],
        control_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.05,
          },
        ],
        cfg_scale_start: [
          "FLOAT",
          {
            default: 4,
            min: 0,
            max: 100,
            step: 0.05,
          },
        ],
        control_scale_start: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        color_fix_type: [
          ["None", "AdaIn", "Wavelet"],
          {
            default: "Wavelet",
          },
        ],
        keep_model_loaded: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        encoder_tile_size_pixels: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 64,
          },
        ],
        decoder_tile_size_latent: [
          "INT",
          {
            default: 64,
            min: 32,
            max: 8192,
            step: 64,
          },
        ],
      },
      optional: {
        captions: [
          "STRING",
          {
            forceInput: true,
            multiline: false,
            default: "",
          },
        ],
        diffusion_dtype: [
          ["fp16", "bf16", "fp32", "auto"],
          {
            default: "auto",
          },
        ],
        encoder_dtype: [
          ["bf16", "fp32", "auto"],
          {
            default: "auto",
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 128,
            step: 1,
          },
        ],
        use_tiled_sampling: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        sampler_tile_size: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 4096,
            step: 32,
          },
        ],
        sampler_tile_stride: [
          "INT",
          {
            default: 512,
            min: 32,
            max: 2048,
            step: 32,
          },
        ],
        fp8_unet: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        fp8_vae: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        sampler: [
          ["RestoreDPMPP2MSampler", "RestoreEDMSampler"],
          {
            default: "RestoreEDMSampler",
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["upscaled_image"],
    name: "SUPIR_Upscale",
    display_name: "SUPIR Upscale (Legacy)",
    description: "",
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_sample: {
    input: {
      required: {
        SUPIR_model: ["SUPIRMODEL"],
        latents: ["LATENT"],
        positive: ["SUPIR_cond_pos"],
        negative: ["SUPIR_cond_neg"],
        seed: [
          "INT",
          {
            default: 123,
            min: 0,
            max: 18446744073709552000,
            step: 1,
          },
        ],
        steps: [
          "INT",
          {
            default: 45,
            min: 3,
            max: 4096,
            step: 1,
          },
        ],
        cfg_scale_start: [
          "FLOAT",
          {
            default: 4,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
        cfg_scale_end: [
          "FLOAT",
          {
            default: 4,
            min: 0,
            max: 100,
            step: 0.01,
          },
        ],
        EDM_s_churn: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 40,
            step: 1,
          },
        ],
        s_noise: [
          "FLOAT",
          {
            default: 1.003,
            min: 1,
            max: 1.1,
            step: 0.001,
          },
        ],
        DPMPP_eta: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        control_scale_start: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.05,
          },
        ],
        control_scale_end: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.05,
          },
        ],
        restore_cfg: [
          "FLOAT",
          {
            default: -1,
            min: -1,
            max: 20,
            step: 0.05,
          },
        ],
        keep_model_loaded: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        sampler: [
          [
            "RestoreDPMPP2MSampler",
            "RestoreEDMSampler",
            "TiledRestoreDPMPP2MSampler",
            "TiledRestoreEDMSampler",
          ],
          {
            default: "RestoreEDMSampler",
          },
        ],
      },
      optional: {
        sampler_tile_size: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 4096,
            step: 32,
          },
        ],
        sampler_tile_stride: [
          "INT",
          {
            default: 512,
            min: 32,
            max: 2048,
            step: 32,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["latent"],
    name: "SUPIR_sample",
    display_name: "SUPIR Sampler",
    description:
      "\n- **latent:**\nLatent to sample from, when using SUPIR latent this is just for the noise shape,  \nit's actually not used otherwise here. Identical to feeding this comfy empty latent.  \nIf fed anything else it's used as it is, no noise is added.  \n- **cfg:**\nLinearly scaled CFG is always used, first step will use the cfg_scale_start value,  \nand that is interpolated to the cfg_scale_end value at last step.  \nTo disable scaling set these values to be the same.  \n- **EDM_s_churn:**\ncontrols the rate of adaptation of the diffusion process to changes in noise levels  \nover time. Has no effect with DPMPP samplers.  \n- **s_noise:**\nThis parameter directly controls the amount of noise added to the image at each  \nstep of the diffusion process.  \n- **DPMPP_eta:**\nScaling factor that influences the diffusion process by adjusting how the denoising  \nprocess adapts to changes in noise levels over time.\nNo effect with EDM samplers.  \n- **control_scale:**\nThe strenght of the SUPIR control model, scales linearly from start to end.  \nLower values allow more freedom from the input image.  \n- **restore_cfg:**\nControls the degree of restoration towards the original image during the diffusion   \nprocess. It allows for dome fine-tuning of the process.  \n- **samplers:**\nEDM samplers need lots of steps but generally have better quality.  \nDPMPP samplers work well with lower steps, good for lightning models.  \nTiled samplers enable tiled diffusion process, this is very slow but allows higher  \nresolutions to be used by saving VRAM.  Tile size should be chosen so the image  \nis evenly tiled.  Tile stride affects the overlap of the tiles.  Check the  \nSUPIR Tiles -node for preview to understand how the image is tiled.\n\n",
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_model_loader: {
    input: {
      required: {
        supir_model: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        sdxl_model: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        fp8_unet: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        diffusion_dtype: [
          ["fp16", "bf16", "fp32", "auto"],
          {
            default: "auto",
          },
        ],
      },
    },
    output: ["SUPIRMODEL", "SUPIRVAE"],
    output_is_list: [false, false],
    output_name: ["SUPIR_model", "SUPIR_VAE"],
    name: "SUPIR_model_loader",
    display_name: "SUPIR Model Loader (Legacy)",
    description:
      "\nOld loader, not recommended to be used.  \nLoads the SUPIR model and the selected SDXL model and merges them.\n",
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_first_stage: {
    input: {
      required: {
        SUPIR_VAE: ["SUPIRVAE"],
        image: ["IMAGE"],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        encoder_tile_size: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 64,
          },
        ],
        decoder_tile_size: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 64,
          },
        ],
        encoder_dtype: [
          ["bf16", "fp32", "auto"],
          {
            default: "auto",
          },
        ],
      },
    },
    output: ["SUPIRVAE", "IMAGE", "LATENT"],
    output_is_list: [false, false, false],
    output_name: ["SUPIR_VAE", "denoised_image", "denoised_latents"],
    name: "SUPIR_first_stage",
    display_name: "SUPIR First Stage (Denoiser)",
    description:
      '\nSUPIR "first stage" processing.\nEncodes and decodes the image using SUPIR\'s "denoise_encoder", purpose  \nis to fix compression artifacts and such, ends up blurring the image often  \nwhich is expected. Can be replaced with any other denoiser/blur or not used at all.\n',
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_encode: {
    input: {
      required: {
        SUPIR_VAE: ["SUPIRVAE"],
        image: ["IMAGE"],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        encoder_tile_size: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 64,
          },
        ],
        encoder_dtype: [
          ["bf16", "fp32", "auto"],
          {
            default: "auto",
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["latent"],
    name: "SUPIR_encode",
    display_name: "SUPIR Encode",
    description: "",
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_decode: {
    input: {
      required: {
        SUPIR_VAE: ["SUPIRVAE"],
        latents: ["LATENT"],
        use_tiled_vae: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        decoder_tile_size: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "SUPIR_decode",
    display_name: "SUPIR Decode",
    description: "",
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_conditioner: {
    input: {
      required: {
        SUPIR_model: ["SUPIRMODEL"],
        latents: ["LATENT"],
        positive_prompt: [
          "STRING",
          {
            multiline: true,
            default: "high quality, detailed",
          },
        ],
        negative_prompt: [
          "STRING",
          {
            multiline: true,
            default: "bad quality, blurry, messy",
          },
        ],
      },
      optional: {
        captions: [
          "STRING",
          {
            forceInput: true,
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["SUPIR_cond_pos", "SUPIR_cond_neg"],
    output_is_list: [false, false],
    output_name: ["positive", "negative"],
    name: "SUPIR_conditioner",
    display_name: "SUPIR Conditioner",
    description:
      "\nCreates the conditioning for the sampler.  \nCaption input is optional, when it receives a single caption, it's added to the positive prompt.\n    \nIf a list of caption is given for single input image, the captions need to match the number of tiles,  \nrefer to the SUPIR Tiles node.  \n  \nIf a list of captions is given and it matches the incoming image batch, each image uses corresponding caption.\n",
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_tiles: {
    input: {
      required: {
        image: ["IMAGE"],
        tile_size: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 64,
          },
        ],
        tile_stride: [
          "INT",
          {
            default: 256,
            min: 64,
            max: 8192,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["image_tiles", "tile_size", "tile_stride"],
    name: "SUPIR_tiles",
    display_name: "SUPIR Tiles",
    description:
      "\nTiles the image with same function as the Tiled samplers use.  \nUseful for previewing the tiling and generating captions per tile (WIP feature)\n",
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_model_loader_v2: {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        supir_model: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        fp8_unet: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        diffusion_dtype: [
          ["fp16", "bf16", "fp32", "auto"],
          {
            default: "auto",
          },
        ],
      },
      optional: {
        high_vram: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["SUPIRMODEL", "SUPIRVAE"],
    output_is_list: [false, false],
    output_name: ["SUPIR_model", "SUPIR_VAE"],
    name: "SUPIR_model_loader_v2",
    display_name: "SUPIR Model Loader (v2)",
    description:
      "\nLoads the SUPIR model and merges it with the SDXL model.  \n\nDiffusion type should be kept on auto, unless you have issues loading the model.  \nfp8_unet casts the unet weights to torch.float8_e4m3fn, which saves a lot of VRAM but has slight quality impact.  \nhigh_vram: uses Accelerate to load weights to GPU, slightly faster model loading.\n",
    category: "SUPIR",
    output_node: false,
  },
  SUPIR_model_loader_v2_clip: {
    input: {
      required: {
        model: ["MODEL"],
        clip_l: ["CLIP"],
        clip_g: ["CLIP"],
        vae: ["VAE"],
        supir_model: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        fp8_unet: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        diffusion_dtype: [
          ["fp16", "bf16", "fp32", "auto"],
          {
            default: "auto",
          },
        ],
      },
      optional: {
        high_vram: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["SUPIRMODEL", "SUPIRVAE"],
    output_is_list: [false, false],
    output_name: ["SUPIR_model", "SUPIR_VAE"],
    name: "SUPIR_model_loader_v2_clip",
    display_name: "SUPIR Model Loader (v2) (Clip)",
    description:
      "\nLoads the SUPIR model and merges it with the SDXL model.  \n\nDiffusion type should be kept on auto, unless you have issues loading the model.  \nfp8_unet casts the unet weights to torch.float8_e4m3fn, which saves a lot of VRAM but has slight quality impact.  \nhigh_vram: uses Accelerate to load weights to GPU, slightly faster model loading.\n",
    category: "SUPIR",
    output_node: false,
  },
  VHS_VideoCombine: {
    input: {
      required: {
        images: ["IMAGE"],
        frame_rate: [
          "FLOAT",
          {
            default: 8,
            min: 1,
            step: 1,
          },
        ],
        loop_count: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        filename_prefix: [
          "STRING",
          {
            default: "AnimateDiff",
          },
        ],
        format: [
          [
            "image/gif",
            "image/webp",
            "video/16bit-png",
            "video/ProRes",
            [
              "video/av1-webm",
              [
                ["pix_fmt", ["yuv420p10le", "yuv420p"]],
                [
                  "crf",
                  "INT",
                  {
                    default: 23,
                    min: 0,
                    max: 100,
                    step: 1,
                  },
                ],
                ["input_color_depth", ["8bit", "16bit"]],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    default: true,
                  },
                ],
              ],
            ],
            [
              "video/ffmpeg-gif",
              [
                [
                  "dither",
                  [
                    "bayer",
                    "heckbert",
                    "floyd_steinberg",
                    "sierra2",
                    "sierra2_4a",
                    "sierra3",
                    "burkes",
                    "atkinson",
                    "none",
                  ],
                  {
                    default: "sierra2_4a",
                  },
                  "[0:v] split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse=dither=$val",
                ],
              ],
            ],
            [
              "video/h264-mp4",
              [
                ["pix_fmt", ["yuv420p", "yuv420p10le"]],
                [
                  "crf",
                  "INT",
                  {
                    default: 19,
                    min: 0,
                    max: 100,
                    step: 1,
                  },
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    default: true,
                  },
                ],
              ],
            ],
            [
              "video/h265-mp4",
              [
                ["pix_fmt", ["yuv420p10le", "yuv420p"]],
                [
                  "crf",
                  "INT",
                  {
                    default: 22,
                    min: 0,
                    max: 100,
                    step: 1,
                  },
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    default: true,
                  },
                ],
              ],
            ],
            [
              "video/nvenc_h264-mp4",
              [
                ["pix_fmt", ["yuv420p", "yuv420p10le"]],
                [
                  "bitrate",
                  "INT",
                  {
                    default: 10,
                    min: 1,
                    max: 999,
                    step: 1,
                  },
                ],
                [
                  "megabit",
                  "BOOLEAN",
                  {
                    default: true,
                  },
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    default: true,
                  },
                ],
              ],
            ],
            [
              "video/nvenc_hevc-mp4",
              [
                ["pix_fmt", ["yuv420p", "yuv420p10le"]],
                [
                  "bitrate",
                  "INT",
                  {
                    default: 10,
                    min: 1,
                    max: 999,
                    step: 1,
                  },
                ],
                [
                  "megabit",
                  "BOOLEAN",
                  {
                    default: true,
                  },
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    default: true,
                  },
                ],
              ],
            ],
            [
              "video/webm",
              [
                [
                  "crf",
                  "INT",
                  {
                    default: 20,
                    min: 0,
                    max: 100,
                    step: 1,
                  },
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    default: true,
                  },
                ],
              ],
            ],
          ],
        ],
        pingpong: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        save_output: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
      optional: {
        audio: ["VHS_AUDIO"],
        meta_batch: ["VHS_BatchManager"],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["VHS_FILENAMES"],
    output_is_list: [false],
    output_name: ["Filenames"],
    name: "VHS_VideoCombine",
    display_name: "Video Combine 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: true,
  },
  VHS_LoadVideo: {
    input: {
      required: {
        video: [[]],
        force_rate: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 60,
            step: 1,
          },
        ],
        force_size: [
          [
            "Disabled",
            "Custom Height",
            "Custom Width",
            "Custom",
            "256x?",
            "?x256",
            "256x256",
            "512x?",
            "?x512",
            "512x512",
          ],
        ],
        custom_width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        custom_height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        frame_load_cap: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        skip_first_frames: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        select_every_nth: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
      optional: {
        meta_batch: ["VHS_BatchManager"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["IMAGE", "INT", "VHS_AUDIO", "VHS_VIDEOINFO"],
    output_is_list: [false, false, false, false],
    output_name: ["IMAGE", "frame_count", "audio", "video_info"],
    name: "VHS_LoadVideo",
    display_name: "Load Video (Upload) 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_LoadVideoPath: {
    input: {
      required: {
        video: [
          "STRING",
          {
            default: "X://insert/path/here.mp4",
            vhs_path_extensions: ["webm", "mp4", "mkv", "gif"],
          },
        ],
        force_rate: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 60,
            step: 1,
          },
        ],
        force_size: [
          [
            "Disabled",
            "Custom Height",
            "Custom Width",
            "Custom",
            "256x?",
            "?x256",
            "256x256",
            "512x?",
            "?x512",
            "512x512",
          ],
        ],
        custom_width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        custom_height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        frame_load_cap: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        skip_first_frames: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        select_every_nth: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
      optional: {
        meta_batch: ["VHS_BatchManager"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["IMAGE", "INT", "VHS_AUDIO", "VHS_VIDEOINFO"],
    output_is_list: [false, false, false, false],
    output_name: ["IMAGE", "frame_count", "audio", "video_info"],
    name: "VHS_LoadVideoPath",
    display_name: "Load Video (Path) 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_LoadImages: {
    input: {
      required: {
        directory: [[]],
      },
      optional: {
        image_load_cap: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        skip_first_images: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        select_every_nth: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
        meta_batch: ["VHS_BatchManager"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["IMAGE", "MASK", "INT"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "MASK", "INT"],
    name: "VHS_LoadImages",
    display_name: "Load Images (Upload) 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_LoadImagesPath: {
    input: {
      required: {
        directory: [
          "STRING",
          {
            default: "X://path/to/images",
            vhs_path_extensions: [],
          },
        ],
      },
      optional: {
        image_load_cap: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        skip_first_images: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9007199254740991,
            step: 1,
          },
        ],
        select_every_nth: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
        meta_batch: ["VHS_BatchManager"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["IMAGE", "MASK", "INT"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "MASK", "INT"],
    name: "VHS_LoadImagesPath",
    display_name: "Load Images (Path) 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_LoadAudio: {
    input: {
      required: {
        audio_file: [
          "STRING",
          {
            default: "input/",
            vhs_path_extensions: ["wav", "mp3", "ogg", "m4a", "flac"],
          },
        ],
      },
      optional: {
        seek_seconds: [
          "FLOAT",
          {
            default: 0,
            min: 0,
          },
        ],
      },
    },
    output: ["VHS_AUDIO"],
    output_is_list: [false],
    output_name: ["audio"],
    name: "VHS_LoadAudio",
    display_name: "Load Audio (Path)🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_LoadAudioUpload: {
    input: {
      required: {
        audio: [[]],
        start_time: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10000000,
            step: 0.01,
          },
        ],
        duration: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10000000,
            step: 0.01,
          },
        ],
      },
    },
    output: ["VHS_AUDIO"],
    output_is_list: [false],
    output_name: ["audio"],
    name: "VHS_LoadAudioUpload",
    display_name: "Load Audio (Upload)🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_PruneOutputs: {
    input: {
      required: {
        filenames: ["VHS_FILENAMES"],
        options: [["Intermediate", "Intermediate and Utility"]],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "VHS_PruneOutputs",
    display_name: "Prune Outputs 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: true,
  },
  VHS_BatchManager: {
    input: {
      required: {
        frames_per_batch: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 128,
            step: 1,
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["VHS_BatchManager"],
    output_is_list: [false],
    output_name: ["meta_batch"],
    name: "VHS_BatchManager",
    display_name: "Meta Batch Manager 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_VideoInfo: {
    input: {
      required: {
        video_info: ["VHS_VIDEOINFO"],
      },
    },
    output: [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "source_fps🟨",
      "source_frame_count🟨",
      "source_duration🟨",
      "source_width🟨",
      "source_height🟨",
      "loaded_fps🟦",
      "loaded_frame_count🟦",
      "loaded_duration🟦",
      "loaded_width🟦",
      "loaded_height🟦",
    ],
    name: "VHS_VideoInfo",
    display_name: "Video Info 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_VideoInfoSource: {
    input: {
      required: {
        video_info: ["VHS_VIDEOINFO"],
      },
    },
    output: ["FLOAT", "INT", "FLOAT", "INT", "INT"],
    output_is_list: [false, false, false, false, false],
    output_name: [
      "fps🟨",
      "frame_count🟨",
      "duration🟨",
      "width🟨",
      "height🟨",
    ],
    name: "VHS_VideoInfoSource",
    display_name: "Video Info (Source) 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_VideoInfoLoaded: {
    input: {
      required: {
        video_info: ["VHS_VIDEOINFO"],
      },
    },
    output: ["FLOAT", "INT", "FLOAT", "INT", "INT"],
    output_is_list: [false, false, false, false, false],
    output_name: [
      "fps🟦",
      "frame_count🟦",
      "duration🟦",
      "width🟦",
      "height🟦",
    ],
    name: "VHS_VideoInfoLoaded",
    display_name: "Video Info (Loaded) 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢",
    output_node: false,
  },
  VHS_SplitLatents: {
    input: {
      required: {
        latents: ["LATENT"],
        split_index: [
          "INT",
          {
            default: 0,
            step: 1,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["LATENT", "INT", "LATENT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["LATENT_A", "A_count", "LATENT_B", "B_count"],
    name: "VHS_SplitLatents",
    display_name: "Split Latent Batch 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/latent",
    output_node: false,
  },
  VHS_SplitImages: {
    input: {
      required: {
        images: ["IMAGE"],
        split_index: [
          "INT",
          {
            default: 0,
            step: 1,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["IMAGE", "INT", "IMAGE", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["IMAGE_A", "A_count", "IMAGE_B", "B_count"],
    name: "VHS_SplitImages",
    display_name: "Split Image Batch 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/image",
    output_node: false,
  },
  VHS_SplitMasks: {
    input: {
      required: {
        mask: ["MASK"],
        split_index: [
          "INT",
          {
            default: 0,
            step: 1,
            min: -9007199254740991,
            max: 9007199254740991,
          },
        ],
      },
    },
    output: ["MASK", "INT", "MASK", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["MASK_A", "A_count", "MASK_B", "B_count"],
    name: "VHS_SplitMasks",
    display_name: "Split Mask Batch 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/mask",
    output_node: false,
  },
  VHS_MergeLatents: {
    input: {
      required: {
        latents_A: ["LATENT"],
        latents_B: ["LATENT"],
        merge_strategy: [
          ["match A", "match B", "match smaller", "match larger"],
        ],
        scale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "bislerp"],
        ],
        crop: [["disabled", "center"]],
      },
    },
    output: ["LATENT", "INT"],
    output_is_list: [false, false],
    output_name: ["LATENT", "count"],
    name: "VHS_MergeLatents",
    display_name: "Merge Latent Batches 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/latent",
    output_node: false,
  },
  VHS_MergeImages: {
    input: {
      required: {
        images_A: ["IMAGE"],
        images_B: ["IMAGE"],
        merge_strategy: [
          ["match A", "match B", "match smaller", "match larger"],
        ],
        scale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "bislerp"],
        ],
        crop: [["disabled", "center"]],
      },
    },
    output: ["IMAGE", "INT"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "count"],
    name: "VHS_MergeImages",
    display_name: "Merge Image Batches 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/image",
    output_node: false,
  },
  VHS_MergeMasks: {
    input: {
      required: {
        mask_A: ["MASK"],
        mask_B: ["MASK"],
        merge_strategy: [
          ["match A", "match B", "match smaller", "match larger"],
        ],
        scale_method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "bislerp"],
        ],
        crop: [["disabled", "center"]],
      },
    },
    output: ["MASK", "INT"],
    output_is_list: [false, false],
    output_name: ["MASK", "count"],
    name: "VHS_MergeMasks",
    display_name: "Merge Mask Batches 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/mask",
    output_node: false,
  },
  VHS_SelectEveryNthLatent: {
    input: {
      required: {
        latents: ["LATENT"],
        select_every_nth: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
    },
    output: ["LATENT", "INT"],
    output_is_list: [false, false],
    output_name: ["LATENT", "count"],
    name: "VHS_SelectEveryNthLatent",
    display_name: "Select Every Nth Latent 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/latent",
    output_node: false,
  },
  VHS_SelectEveryNthImage: {
    input: {
      required: {
        images: ["IMAGE"],
        select_every_nth: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "INT"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "count"],
    name: "VHS_SelectEveryNthImage",
    display_name: "Select Every Nth Image 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/image",
    output_node: false,
  },
  VHS_SelectEveryNthMask: {
    input: {
      required: {
        mask: ["MASK"],
        select_every_nth: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK", "INT"],
    output_is_list: [false, false],
    output_name: ["MASK", "count"],
    name: "VHS_SelectEveryNthMask",
    display_name: "Select Every Nth Mask 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/mask",
    output_node: false,
  },
  VHS_GetLatentCount: {
    input: {
      required: {
        latents: ["LATENT"],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["count"],
    name: "VHS_GetLatentCount",
    display_name: "Get Latent Count 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/latent",
    output_node: false,
  },
  VHS_GetImageCount: {
    input: {
      required: {
        images: ["IMAGE"],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["count"],
    name: "VHS_GetImageCount",
    display_name: "Get Image Count 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/image",
    output_node: false,
  },
  VHS_GetMaskCount: {
    input: {
      required: {
        mask: ["MASK"],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["count"],
    name: "VHS_GetMaskCount",
    display_name: "Get Mask Count 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/mask",
    output_node: false,
  },
  VHS_DuplicateLatents: {
    input: {
      required: {
        latents: ["LATENT"],
        multiply_by: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
    },
    output: ["LATENT", "INT"],
    output_is_list: [false, false],
    output_name: ["LATENT", "count"],
    name: "VHS_DuplicateLatents",
    display_name: "Duplicate Latent Batch 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/latent",
    output_node: false,
  },
  VHS_DuplicateImages: {
    input: {
      required: {
        images: ["IMAGE"],
        multiply_by: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "INT"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "count"],
    name: "VHS_DuplicateImages",
    display_name: "Duplicate Image Batch 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/image",
    output_node: false,
  },
  VHS_DuplicateMasks: {
    input: {
      required: {
        mask: ["MASK"],
        multiply_by: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9007199254740991,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK", "INT"],
    output_is_list: [false, false],
    output_name: ["MASK", "count"],
    name: "VHS_DuplicateMasks",
    display_name: "Duplicate Mask Batch 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/mask",
    output_node: false,
  },
  VHS_VAEEncodeBatched: {
    input: {
      required: {
        pixels: ["IMAGE"],
        vae: ["VAE"],
        per_batch: [
          "INT",
          {
            default: 16,
            min: 1,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "VHS_VAEEncodeBatched",
    display_name: "VAE Encode Batched 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/batched nodes",
    output_node: false,
  },
  VHS_VAEDecodeBatched: {
    input: {
      required: {
        samples: ["LATENT"],
        vae: ["VAE"],
        per_batch: [
          "INT",
          {
            default: 16,
            min: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "VHS_VAEDecodeBatched",
    display_name: "VAE Decode Batched 🎥🅥🅗🅢",
    description: "",
    category: "Video Helper Suite 🎥🅥🅗🅢/batched nodes",
    output_node: false,
  },
  "WD14Tagger|pysssss": {
    input: {
      required: {
        image: ["IMAGE"],
        model: [
          [
            "wd-vit-tagger-v3",
            "wd-swinv2-tagger-v3",
            "wd-convnext-tagger-v3",
            "wd-v1-4-moat-tagger-v2",
            "wd-v1-4-convnextv2-tagger-v2",
            "wd-v1-4-convnext-tagger-v2",
            "wd-v1-4-convnext-tagger",
            "wd-v1-4-vit-tagger-v2",
            "wd-v1-4-swinv2-tagger-v2",
            "wd-v1-4-vit-tagger",
          ],
          {
            default: "wd-v1-4-moat-tagger-v2",
          },
        ],
        threshold: [
          "FLOAT",
          {
            default: 0.35,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        character_threshold: [
          "FLOAT",
          {
            default: 0.85,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        replace_underscore: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        trailing_comma: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        exclude_tags: [
          "STRING",
          {
            default: "",
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [true],
    output_name: ["STRING"],
    name: "WD14Tagger|pysssss",
    display_name: "WD14 Tagger 🐍",
    description: "",
    category: "image",
    output_node: true,
  },
  LayeredDiffusionApply: {
    input: {
      required: {
        model: ["MODEL"],
        config: [
          [
            "SDXL, Attention Injection",
            "SDXL, Conv Injection",
            "SD15, Attention Injection, attn_sharing",
          ],
        ],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "LayeredDiffusionApply",
    display_name: "Layer Diffuse Apply",
    description: "",
    category: "layer_diffuse",
    output_node: false,
  },
  LayeredDiffusionJointApply: {
    input: {
      required: {
        model: ["MODEL"],
        config: [["SD15, attn_sharing, Batch size (3N)"]],
      },
      optional: {
        fg_cond: ["CONDITIONING"],
        bg_cond: ["CONDITIONING"],
        blended_cond: ["CONDITIONING"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "LayeredDiffusionJointApply",
    display_name: "Layer Diffuse Joint Apply",
    description: "",
    category: "layer_diffuse",
    output_node: false,
  },
  LayeredDiffusionCondApply: {
    input: {
      required: {
        model: ["MODEL"],
        cond: ["CONDITIONING"],
        uncond: ["CONDITIONING"],
        latent: ["LATENT"],
        config: [["SDXL, Foreground", "SDXL, Background"]],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
      },
    },
    output: ["MODEL", "CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CONDITIONING", "CONDITIONING"],
    name: "LayeredDiffusionCondApply",
    display_name: "Layer Diffuse Cond Apply",
    description: "",
    category: "layer_diffuse",
    output_node: false,
  },
  LayeredDiffusionCondJointApply: {
    input: {
      required: {
        model: ["MODEL"],
        image: ["IMAGE"],
        config: [
          [
            "SD15, Foreground, attn_sharing, Batch size (2N)",
            "SD15, Background, attn_sharing, Batch size (2N)",
          ],
        ],
      },
      optional: {
        cond: ["CONDITIONING"],
        blended_cond: ["CONDITIONING"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "LayeredDiffusionCondJointApply",
    display_name: "Layer Diffuse Cond Joint Apply",
    description: "",
    category: "layer_diffuse",
    output_node: false,
  },
  LayeredDiffusionDiffApply: {
    input: {
      required: {
        model: ["MODEL"],
        cond: ["CONDITIONING"],
        uncond: ["CONDITIONING"],
        blended_latent: ["LATENT"],
        latent: ["LATENT"],
        config: [["SDXL, Foreground", "SDXL, Background"]],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
      },
    },
    output: ["MODEL", "CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CONDITIONING", "CONDITIONING"],
    name: "LayeredDiffusionDiffApply",
    display_name: "Layer Diffuse Diff Apply",
    description: "",
    category: "layer_diffuse",
    output_node: false,
  },
  LayeredDiffusionDecode: {
    input: {
      required: {
        samples: ["LATENT"],
        images: ["IMAGE"],
        sd_version: [
          ["SD15", "SDXL"],
          {
            default: "SDXL",
          },
        ],
        sub_batch_size: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "LayeredDiffusionDecode",
    display_name: "Layer Diffuse Decode",
    description: "",
    category: "layer_diffuse",
    output_node: false,
  },
  LayeredDiffusionDecodeRGBA: {
    input: {
      required: {
        samples: ["LATENT"],
        images: ["IMAGE"],
        sd_version: [
          ["SD15", "SDXL"],
          {
            default: "SDXL",
          },
        ],
        sub_batch_size: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "LayeredDiffusionDecodeRGBA",
    display_name: "Layer Diffuse Decode (RGBA)",
    description: "",
    category: "layer_diffuse",
    output_node: false,
  },
  LayeredDiffusionDecodeSplit: {
    input: {
      required: {
        samples: ["LATENT"],
        images: ["IMAGE"],
        frames: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 3,
            step: 1,
          },
        ],
        sd_version: [
          ["SD15", "SDXL"],
          {
            default: "SDXL",
          },
        ],
        sub_batch_size: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "IMAGE", "IMAGE"],
    name: "LayeredDiffusionDecodeSplit",
    display_name: "Layer Diffuse Decode (Split)",
    description: "",
    category: "layer_diffuse",
    output_node: false,
  },
  "CR Image Output": {
    input: {
      required: {
        images: ["IMAGE"],
        output_type: [["Preview", "Save", "UI (no batch)"]],
        filename_prefix: [
          "STRING",
          {
            default: "CR",
          },
        ],
        prefix_presets: [["None", "yyyyMMdd"]],
        file_format: [["png", "jpg", "webp", "tif"]],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
      optional: {
        trigger: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["trigger"],
    name: "CR Image Output",
    display_name: "💾 CR Image Output",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    output_node: true,
  },
  "CR Latent Batch Size": {
    input: {
      required: {
        latent: ["LATENT"],
        batch_size: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 999,
            step: 1,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "CR Latent Batch Size",
    display_name: "⚙️ CR Latent Batch Size",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    output_node: false,
  },
  "CR Conditioning Mixer": {
    input: {
      required: {
        conditioning_1: ["CONDITIONING"],
        conditioning_2: ["CONDITIONING"],
        mix_method: [["Combine", "Average", "Concatenate"]],
        average_strength: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING", "STRING"],
    output_is_list: [false, false],
    output_name: ["CONDITIONING", "show_help"],
    name: "CR Conditioning Mixer",
    display_name: "⚙️ CR Conditioning Mixer",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    output_node: false,
  },
  "CR Select Model": {
    input: {
      required: {
        ckpt_name1: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        ckpt_name2: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        ckpt_name3: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        ckpt_name4: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        ckpt_name5: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        select_model: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 5,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "STRING", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "ckpt_name", "show_help"],
    name: "CR Select Model",
    display_name: "🔮 CR Select Model",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    output_node: false,
  },
  "CR Seed": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["seed", "show_help"],
    name: "CR Seed",
    display_name: "🌱 CR Seed",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    output_node: true,
  },
  "CR Prompt Text": {
    input: {
      required: {
        prompt: [
          "STRING",
          {
            default: "prompt",
            multiline: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["prompt", "show_help"],
    name: "CR Prompt Text",
    display_name: "⚙️ CR Prompt Text",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    output_node: false,
  },
  "CR Combine Prompt": {
    input: {
      required: {},
      optional: {
        part1: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
        part2: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
        part3: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
        part4: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
        separator: [
          "STRING",
          {
            default: ",",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["prompt", "show_help"],
    name: "CR Combine Prompt",
    display_name: "⚙️ CR Combine Prompt",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    output_node: false,
  },
  "CR VAE Decode": {
    input: {
      required: {
        samples: ["LATENT"],
        vae: ["VAE"],
        tiled: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        circular: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR VAE Decode",
    display_name: "⚙️ CR VAE Decode",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    output_node: false,
  },
  "CR Text List": {
    input: {
      required: {
        multiline_text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        start_index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
          },
        ],
        max_rows: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 9999,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [true, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text List",
    display_name: "📜 CR Text List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Prompt List": {
    input: {
      required: {
        prepend_text: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        multiline_text: [
          "STRING",
          {
            multiline: true,
            default: "body_text",
          },
        ],
        append_text: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        start_index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
          },
        ],
        max_rows: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 9999,
          },
        ],
      },
    },
    output: ["STRING", "STRING", "STRING"],
    output_is_list: [true, true, false],
    output_name: ["prompt", "body_text", "show_help"],
    name: "CR Prompt List",
    display_name: "📜 CR Prompt List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Simple List": {
    input: {
      required: {
        list_values: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [true, false],
    output_name: ["LIST", "show_help"],
    name: "CR Simple List",
    display_name: "📜 CR Simple List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Float Range List": {
    input: {
      required: {
        start: [
          "FLOAT",
          {
            default: 0,
            min: -99999.99,
            max: 99999.99,
            step: 0.01,
          },
        ],
        end: [
          "FLOAT",
          {
            default: 1,
            min: -99999.99,
            max: 99999.99,
            step: 0.01,
          },
        ],
        step: [
          "FLOAT",
          {
            default: 1,
            min: -99999.99,
            max: 99999.99,
            step: 0.01,
          },
        ],
        operation: [["none", "sin", "cos", "tan"]],
        decimal_places: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 10,
          },
        ],
        ignore_first_value: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        max_values_per_loop: [
          "INT",
          {
            default: 128,
            min: 1,
            max: 99999,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 999,
          },
        ],
        ping_pong: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["FLOAT", "STRING"],
    output_is_list: [true, false],
    output_name: ["FLOAT", "show_help"],
    name: "CR Float Range List",
    display_name: "📜 CR Float Range List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Integer Range List": {
    input: {
      required: {
        start: [
          "INT",
          {
            default: 0,
            min: -99999,
            max: 99999,
          },
        ],
        end: [
          "INT",
          {
            default: 0,
            min: -99999,
            max: 99999,
          },
        ],
        step: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 999,
          },
        ],
        ping_pong: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [true, false],
    output_name: ["INT", "show_help"],
    name: "CR Integer Range List",
    display_name: "📜 CR Integer Range List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Load Text List": {
    input: {
      required: {
        input_file_path: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        file_name: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        file_extension: [["txt", "csv"]],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [true, false],
    output_name: ["STRING", "show_help"],
    name: "CR Load Text List",
    display_name: "📜 CR Load Text List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Binary To Bit List": {
    input: {
      required: {
        bit_string: [
          "STRING",
          {
            multiline: true,
            default: "",
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [true, false],
    output_name: ["STRING", "show_help"],
    name: "CR Binary To Bit List",
    display_name: "📜 CR Binary To Bit List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Text Cycler": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
            default: "",
          },
        ],
        repeats: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [true, false],
    output_name: ["STRING", "show_text"],
    name: "CR Text Cycler",
    display_name: "📜 CR Text Cycler",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Value Cycler": {
    input: {
      required: {
        values: [
          "STRING",
          {
            multiline: true,
            default: "",
          },
        ],
        repeats: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
      },
    },
    output: ["FLOAT", "INT", "STRING"],
    output_is_list: [true, true, false],
    output_name: ["FLOAT", "INT", "show_text"],
    name: "CR Value Cycler",
    display_name: "📜 CR Value Cycler",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List",
    output_node: false,
  },
  "CR Load Image List": {
    input: {
      required: {
        input_folder: [[]],
        start_index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
          },
        ],
        max_images: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 9999,
          },
        ],
      },
      optional: {
        input_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [true, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Load Image List",
    display_name: "⌨️ CR Load Image List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/⌨️ IO",
    output_node: false,
  },
  "CR Load Image List Plus": {
    input: {
      required: {
        input_folder: [[]],
        start_index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 99999,
          },
        ],
        max_images: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
      },
      optional: {
        input_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK", "INT", "STRING", "INT", "INT", "INT", "STRING"],
    output_is_list: [true, true, true, true, false, false, false, false],
    output_name: [
      "IMAGE",
      "MASK",
      "index",
      "filename",
      "width",
      "height",
      "list_length",
      "show_help",
    ],
    name: "CR Load Image List Plus",
    display_name: "⌨️ CR Load Image List Plus",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/⌨️ IO",
    output_node: false,
  },
  "CR Load GIF As List": {
    input: {
      required: {
        input_folder: [[]],
        gif_filename: [
          "STRING",
          {
            multiline: false,
            default: "text",
          },
        ],
        start_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 99999,
          },
        ],
        max_frames: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
      },
      optional: {
        input_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK", "STRING"],
    output_is_list: [true, true, false],
    output_name: ["IMAGE", "MASK", "show_help"],
    name: "CR Load GIF As List",
    display_name: "⌨️ CR Load GIF As List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/⌨️ IO",
    output_node: false,
  },
  "CR Font File List": {
    input: {
      required: {
        source_folder: [["system", "Comfyroll", "from folder"]],
        start_index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
          },
        ],
        max_rows: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 9999,
          },
        ],
      },
      optional: {
        folder_path: [
          "STRING",
          {
            default: "C:\\Windows\\Fonts",
            multiline: false,
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [true, false],
    output_name: ["LIST", "show_help"],
    name: "CR Font File List",
    display_name: "⌨️ CR Font File List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/⌨️ IO",
    output_node: false,
  },
  "CR Batch Images From List": {
    input: {
      required: {
        image_list: ["IMAGE"],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image_batch", "show_help"],
    name: "CR Batch Images From List",
    display_name: "🛠️ CR Batch Images From List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    output_node: false,
  },
  "CR Intertwine Lists": {
    input: {
      required: {
        list1: [
          "STRING",
          {
            multiline: true,
            default: "",
            forceInput: true,
          },
        ],
        list2: [
          "STRING",
          {
            multiline: true,
            default: "",
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [true, false],
    output_name: ["STRING", "show_help"],
    name: "CR Intertwine Lists",
    display_name: "🛠️ CR Intertwine Lists",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    output_node: false,
  },
  "CR Repeater": {
    input: {
      required: {
        input_data: ["*"],
        repeats: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [true, false],
    output_name: ["list", "show_help"],
    name: "CR Repeater",
    display_name: "🛠️ CR Repeater",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    output_node: false,
  },
  "CR XY Product": {
    input: {
      required: {
        text_x: [
          "STRING",
          {
            multiline: true,
          },
        ],
        text_y: [
          "STRING",
          {
            multiline: true,
          },
        ],
      },
    },
    output: ["*", "*", "STRING"],
    output_is_list: [true, true, false],
    output_name: ["x_values", "y_values", "show_help"],
    name: "CR XY Product",
    display_name: "🛠️ CR XY Product",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    output_node: false,
  },
  "CR Text List To String": {
    input: {
      required: {
        text_list: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text List To String",
    display_name: "🛠️ CR Text List To String",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    output_node: false,
  },
  "CR SD1.5 Aspect Ratio": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
          },
        ],
        aspect_ratio: [
          [
            "custom",
            "1:1 square 512x512",
            "1:1 square 1024x1024",
            "2:3 portrait 512x768",
            "3:4 portrait 512x682",
            "3:2 landscape 768x512",
            "4:3 landscape 682x512",
            "16:9 cinema 910x512",
            "1.85:1 cinema 952x512",
            "2:1 cinema 1024x512",
            "2.39:1 anamorphic 1224x512",
          ],
        ],
        swap_dimensions: [["Off", "On"]],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["INT", "INT", "FLOAT", "INT", "LATENT", "STRING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "width",
      "height",
      "upscale_factor",
      "batch_size",
      "empty_latent",
      "show_help",
    ],
    name: "CR SD1.5 Aspect Ratio",
    display_name: "🔳 CR SD1.5 Aspect Ratio",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    output_node: false,
  },
  "CR SDXL Aspect Ratio": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        aspect_ratio: [
          [
            "custom",
            "1:1 square 1024x1024",
            "3:4 portrait 896x1152",
            "5:8 portrait 832x1216",
            "9:16 portrait 768x1344",
            "9:21 portrait 640x1536",
            "4:3 landscape 1152x896",
            "3:2 landscape 1216x832",
            "16:9 landscape 1344x768",
            "21:9 landscape 1536x640",
          ],
        ],
        swap_dimensions: [["Off", "On"]],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["INT", "INT", "FLOAT", "INT", "LATENT", "STRING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "width",
      "height",
      "upscale_factor",
      "batch_size",
      "empty_latent",
      "show_help",
    ],
    name: "CR SDXL Aspect Ratio",
    display_name: "🔳 CR SDXL Aspect Ratio",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    output_node: false,
  },
  "CR Aspect Ratio": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        aspect_ratio: [
          [
            "custom",
            "SD1.5 - 1:1 square 512x512",
            "SD1.5 - 2:3 portrait 512x768",
            "SD1.5 - 3:4 portrait 512x682",
            "SD1.5 - 3:2 landscape 768x512",
            "SD1.5 - 4:3 landscape 682x512",
            "SD1.5 - 16:9 cinema 910x512",
            "SD1.5 - 1.85:1 cinema 952x512",
            "SD1.5 - 2:1 cinema 1024x512",
            "SDXL - 1:1 square 1024x1024",
            "SDXL - 3:4 portrait 896x1152",
            "SDXL - 5:8 portrait 832x1216",
            "SDXL - 9:16 portrait 768x1344",
            "SDXL - 9:21 portrait 640x1536",
            "SDXL - 4:3 landscape 1152x896",
            "SDXL - 3:2 landscape 1216x832",
            "SDXL - 16:9 landscape 1344x768",
            "SDXL - 21:9 landscape 1536x640",
          ],
        ],
        swap_dimensions: [["Off", "On"]],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        prescale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["INT", "INT", "FLOAT", "FLOAT", "INT", "LATENT", "STRING"],
    output_is_list: [false, false, false, false, false, false, false],
    output_name: [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help",
    ],
    name: "CR Aspect Ratio",
    display_name: "🔳 CR Aspect Ratio",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    output_node: false,
  },
  "CR Aspect Ratio Banners": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        aspect_ratio: [
          [
            "custom",
            "Large Rectangle - 336x280",
            "Medium Rectangle - 300x250",
            "Small Rectangle - 180x150",
            "Square - 250x250",
            "Small Square - 200x200",
            "Button - 125x125",
            "Half Page - 300x600",
            "Vertical Banner - 120x240",
            "Wide Skyscraper - 160x600",
            "Skyscraper - 120x600",
            "Billboard - 970x250",
            "Portrait - 300x1050",
            "Banner - 468x60",
            "Leaderboard - 728x90",
          ],
        ],
        swap_dimensions: [["Off", "On"]],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        prescale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["INT", "INT", "FLOAT", "FLOAT", "INT", "LATENT", "STRING"],
    output_is_list: [false, false, false, false, false, false, false],
    output_name: [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help",
    ],
    name: "CR Aspect Ratio Banners",
    display_name: "🔳 CR Aspect Ratio Banners",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    output_node: false,
  },
  "CR Aspect Ratio Social Media": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        aspect_ratio: [
          [
            "custom",
            "Instagram Portrait - 1080x1350",
            "Instagram Square - 1080x1080",
            "Instagram Landscape - 1080x608",
            "Instagram Stories/Reels - 1080x1920",
            "Facebook Landscape - 1080x1350",
            "Facebook Marketplace - 1200x1200",
            "Facebook Stories - 1080x1920",
            "TikTok - 1080x1920",
            "YouTube Banner - 2560×1440",
            "LinkedIn Profile Banner - 1584x396",
            "LinkedIn Page Cover - 1128x191",
            "LinkedIn Post - 1200x627",
            "Pinterest Pin Image - 1000x1500",
            "CivitAI Cover - 1600x400",
            "OpenArt App - 1500x1000",
          ],
        ],
        swap_dimensions: [["Off", "On"]],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        prescale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["INT", "INT", "FLOAT", "FLOAT", "INT", "LATENT", "STRING"],
    output_is_list: [false, false, false, false, false, false, false],
    output_name: [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help",
    ],
    name: "CR Aspect Ratio Social Media",
    display_name: "🔳 CR Aspect Ratio Social Media",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    output_node: false,
  },
  "CR_Aspect Ratio For Print": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 8192,
          },
        ],
        aspect_ratio: [
          [
            "A4 - 2480x3508",
            "A5 - 1748x2480",
            "A6 - 1240x1748",
            "A7 - 874x1240",
            "A8 - 614x874",
            "A9 - 437x614",
            "A10 - 307x437",
            "B4 - 2953x4169",
            "B5 - 2079x2953",
            "B6 - 1476x2079",
            "B7 - 1039x1476",
            "B8 - 732x1039",
            "B9 - 520x732",
            "B10 - 366x520",
            "C4 - 2705x3827",
            "C5 - 1913x2705",
            "C6 - 1346x1913",
            "C7 - 957x1346",
            "C8 - 673x957",
            "C9 - 472x673",
            "C10 - 331x472",
            "Letter (8.5 x 11 inches) - 2550x3300",
            "Legal (8.5 x 14 inches) - 2550x4200",
          ],
        ],
        swap_dimensions: [["Off", "On"]],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        prescale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 100,
            step: 0.1,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["INT", "INT", "FLOAT", "FLOAT", "INT", "LATENT", "STRING"],
    output_is_list: [false, false, false, false, false, false, false],
    output_name: [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help",
    ],
    name: "CR_Aspect Ratio For Print",
    display_name: "🔳 CR_Aspect Ratio For Print",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    output_node: false,
  },
  "CR Image Size": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
          },
        ],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 1,
            max: 2000,
          },
        ],
      },
    },
    output: ["INT", "INT", "FLOAT", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["Width", "Height", "upscale_factor", "show_help"],
    name: "CR Image Size",
    display_name: "CR Image Size (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💀 Legacy",
    output_node: false,
  },
  "CR Aspect Ratio SDXL": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 2048,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 64,
            max: 2048,
          },
        ],
        aspect_ratio: [
          [
            "custom",
            "1:1 square 1024x1024",
            "3:4 portrait 896x1152",
            "5:8 portrait 832x1216",
            "9:16 portrait 768x1344",
            "9:21 portrait 640x1536",
            "4:3 landscape 1152x896",
            "3:2 landscape 1216x832",
            "16:9 landscape 1344x768",
            "21:9 landscape 1536x640",
          ],
        ],
        swap_dimensions: [["Off", "On"]],
        upscale_factor1: [
          "FLOAT",
          {
            default: 1,
            min: 1,
            max: 2000,
          },
        ],
        upscale_factor2: [
          "FLOAT",
          {
            default: 1,
            min: 1,
            max: 2000,
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 64,
          },
        ],
      },
    },
    output: ["INT", "INT", "FLOAT", "FLOAT", "INT", "STRING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: ["INT", "INT", "FLOAT", "FLOAT", "INT", "show_help"],
    name: "CR Aspect Ratio SDXL",
    display_name: "CR Aspect Ratio SDXL (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💀 Legacy",
    output_node: false,
  },
  "CR SDXL Prompt Mixer": {
    input: {
      required: {},
      optional: {
        prompt_positive: [
          "STRING",
          {
            multiline: true,
            default: "BASE_POSITIVE",
          },
        ],
        prompt_negative: [
          "STRING",
          {
            multiline: true,
            default: "BASE_NEGATIVE",
          },
        ],
        style_positive: [
          "STRING",
          {
            multiline: true,
            default: "REFINER_POSTIVE",
          },
        ],
        style_negative: [
          "STRING",
          {
            multiline: true,
            default: "REFINER_NEGATIVE",
          },
        ],
        preset: [["preset 1", "preset 2", "preset 3", "preset 4", "preset 5"]],
      },
    },
    output: ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: ["pos_g", "pos_l", "pos_r", "neg_g", "neg_l", "neg_r"],
    name: "CR SDXL Prompt Mixer",
    display_name: "CR SDXL Prompt Mixer (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💀 Legacy",
    output_node: false,
  },
  "CR Seed to Int": {
    input: {
      required: {
        seed: ["SEED"],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["INT", "show_help"],
    name: "CR Seed to Int",
    display_name: "CR Seed to Int (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💀 Legacy",
    output_node: false,
  },
  "CR Apply ControlNet": {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        control_net: ["CONTROL_NET"],
        image: ["IMAGE"],
        switch: [["On", "Off"]],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING", "STRING"],
    output_is_list: [false, false],
    output_name: ["CONDITIONING", "show_help"],
    name: "CR Apply ControlNet",
    display_name: "🕹️ CR Apply ControlNet",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🕹️ ControlNet",
    output_node: false,
  },
  "CR Multi-ControlNet Stack": {
    input: {
      required: {},
      optional: {
        switch_1: [["Off", "On"]],
        controlnet_1: [
          [
            "None",
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        controlnet_strength_1: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent_1: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent_1: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        switch_2: [["Off", "On"]],
        controlnet_2: [
          [
            "None",
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        controlnet_strength_2: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent_2: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent_2: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        switch_3: [["Off", "On"]],
        controlnet_3: [
          [
            "None",
            "controlnet.safetensors",
            "sha256_21f79f7368eff07f57bcd507ca91c0fc89070d7da182960ff24ed1d58310c3a7.safetensors",
            "sha256_2f31868eedb243a77932e3c63907a6ba0a2058b6d65b5c27b89ee1b7f618ea33.safetensors",
            "sha256_37e391757e6c0042faa3795174acbe11a31992252058cfb8bbaccf11073567b4.safetensors",
            "sha256_559d2468951bf254c13bacd9c5d05d01ad67b060f6a73e8131d26ebf459c1c79.safetensors",
            "sha256_56389dbb245ca44de91d662529bd4298abc55ce2318f60bc19454fb72ff68247.safetensors",
            "sha256_607919f567b006ed9aa5d3ebcae5639f9ece5eddbcbfc45c8fc8a87b72edbbe0.bin",
            "sha256_8127d05fb69205606fde08fcb6928f3e6bb6fe4bb29826f1f666d38f0463edf4.pth",
            "sha256_8932b66e15aae835b3490dbf989f56c253104cee08a88bf21283762f557c9f10.safetensors",
            "sha256_c7f43f70e266153d12f5e1bb1c9e7be3f4513cf0eef0432661b1331bfe11cadf.safetensors",
            "sha256_c9269721b1f7043625e75b7de2f65a6116b2ad99895965494616f3f2c8548f54.safetensors",
            "sha256_f99cfe4c70910e38e3fece9918a4979ed7d3dcf9b81cee293e1755363af5406a.pth",
          ],
        ],
        controlnet_strength_3: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        start_percent_3: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_percent_3: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
        image_3: ["IMAGE"],
        controlnet_stack: ["CONTROL_NET_STACK"],
      },
    },
    output: ["CONTROL_NET_STACK", "STRING"],
    output_is_list: [false, false],
    output_name: ["CONTROLNET_STACK", "show_help"],
    name: "CR Multi-ControlNet Stack",
    display_name: "🕹️ CR Multi-ControlNet Stack",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🕹️ ControlNet",
    output_node: false,
  },
  "CR Apply Multi-ControlNet": {
    input: {
      required: {
        base_positive: ["CONDITIONING"],
        base_negative: ["CONDITIONING"],
        switch: [["Off", "On"]],
        controlnet_stack: ["CONTROL_NET_STACK"],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["base_pos", "base_neg", "show_help"],
    name: "CR Apply Multi-ControlNet",
    display_name: "🕹️ CR Apply Multi-ControlNet",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🕹️ ControlNet",
    output_node: false,
  },
  "CR Load LoRA": {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        switch: [["On", "Off"]],
        lora_name: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "show_help"],
    name: "CR Load LoRA",
    display_name: "💊 CR Load LoRA",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    output_node: false,
  },
  "CR LoRA Stack": {
    input: {
      required: {
        switch_1: [["Off", "On"]],
        lora_name_1: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        model_weight_1: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_weight_1: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        switch_2: [["Off", "On"]],
        lora_name_2: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        model_weight_2: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_weight_2: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        switch_3: [["Off", "On"]],
        lora_name_3: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        model_weight_3: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_weight_3: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
      optional: {
        lora_stack: ["LORA_STACK"],
      },
    },
    output: ["LORA_STACK", "STRING"],
    output_is_list: [false, false],
    output_name: ["LORA_STACK", "show_help"],
    name: "CR LoRA Stack",
    display_name: "💊 CR LoRA Stack",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    output_node: false,
  },
  "CR Random LoRA Stack": {
    input: {
      required: {
        exclusive_mode: [["Off", "On"]],
        stride: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        force_randomize_after_stride: [["Off", "On"]],
        lora_name_1: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        switch_1: [["Off", "On"]],
        chance_1: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        model_weight_1: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_weight_1: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        lora_name_2: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        switch_2: [["Off", "On"]],
        chance_2: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        model_weight_2: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_weight_2: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        lora_name_3: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        switch_3: [["Off", "On"]],
        chance_3: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        model_weight_3: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_weight_3: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
      optional: {
        lora_stack: ["LORA_STACK"],
      },
    },
    output: ["LORA_STACK"],
    output_is_list: [false],
    output_name: ["LORA_STACK"],
    name: "CR Random LoRA Stack",
    display_name: "💊 CR Random LoRA Stack",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    output_node: false,
  },
  "CR Random Weight LoRA": {
    input: {
      required: {
        stride: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        force_randomize_after_stride: [["Off", "On"]],
        lora_name: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        switch: [["Off", "On"]],
        weight_min: [
          "FLOAT",
          {
            default: 0,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        weight_max: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_weight: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
      optional: {
        lora_stack: ["LORA_STACK"],
      },
    },
    output: ["LORA_STACK"],
    output_is_list: [false],
    output_name: ["LORA_STACK"],
    name: "CR Random Weight LoRA",
    display_name: "💊 CR Random Weight LoRA",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    output_node: false,
  },
  "CR Apply LoRA Stack": {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_stack: ["LORA_STACK"],
      },
    },
    output: ["MODEL", "CLIP", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "show_help"],
    name: "CR Apply LoRA Stack",
    display_name: "💊 CR Apply LoRA Stack",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    output_node: false,
  },
  "CR Apply Model Merge": {
    input: {
      required: {
        model_stack: ["MODEL_STACK"],
        merge_method: [["Recursive", "Weighted"]],
        normalise_ratios: [["Yes", "No"]],
        weight_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "STRING", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["MODEL", "CLIP", "model_mix_info", "show_help"],
    name: "CR Apply Model Merge",
    display_name: "⛏️ CR Apply Model Merge",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/⛏️ Model Merge",
    output_node: false,
  },
  "CR Model Merge Stack": {
    input: {
      required: {
        switch_1: [["Off", "On"]],
        ckpt_name1: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        model_ratio1: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        clip_ratio1: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        switch_2: [["Off", "On"]],
        ckpt_name2: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        model_ratio2: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        clip_ratio2: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        switch_3: [["Off", "On"]],
        ckpt_name3: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        model_ratio3: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
        clip_ratio3: [
          "FLOAT",
          {
            default: 1,
            min: -100,
            max: 100,
            step: 0.01,
          },
        ],
      },
      optional: {
        model_stack: ["MODEL_STACK"],
      },
    },
    output: ["MODEL_STACK", "STRING"],
    output_is_list: [false, false],
    output_name: ["MODEL_STACK", "show_help"],
    name: "CR Model Merge Stack",
    display_name: "⛏️ CR Model Merge Stack",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/⛏️ Model Merge",
    output_node: false,
  },
  "CR Data Bus In": {
    input: {
      required: {},
      optional: {
        pipe: ["*"],
        any1: ["*"],
        any2: ["*"],
        any3: ["*"],
        any4: ["*"],
      },
    },
    output: ["PIPE_LINE", "STRING"],
    output_is_list: [false, false],
    output_name: ["pipe", "show_help"],
    name: "CR Data Bus In",
    display_name: "🚌 CR Data Bus In",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🚌 Bus",
    output_node: false,
  },
  "CR Data Bus Out": {
    input: {
      required: {
        pipe: ["PIPE_LINE"],
      },
    },
    output: ["PIPE_LINE", "*", "*", "*", "*", "STRING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: ["pipe", "any1", "any2", "any3", "any4", "show_help"],
    name: "CR Data Bus Out",
    display_name: "🚌 CR Data Bus Out",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🚌 Bus",
    output_node: false,
  },
  "CR 8 Channel In": {
    input: {
      required: {},
      optional: {
        pipe: ["*"],
        ch1: ["*"],
        ch2: ["*"],
        ch3: ["*"],
        ch4: ["*"],
        ch5: ["*"],
        ch6: ["*"],
        ch7: ["*"],
        ch8: ["*"],
      },
    },
    output: ["PIPE_LINE", "STRING"],
    output_is_list: [false, false],
    output_name: ["pipe", "show_help"],
    name: "CR 8 Channel In",
    display_name: "🚌 CR 8 Channel In",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🚌 Bus",
    output_node: false,
  },
  "CR 8 Channel Out": {
    input: {
      required: {
        pipe: ["PIPE_LINE"],
      },
    },
    output: ["PIPE_LINE", "*", "*", "*", "*", "*", "*", "*", "*", "STRING"],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "pipe",
      "ch1",
      "ch2",
      "ch3",
      "ch4",
      "ch5",
      "ch6",
      "ch7",
      "ch8",
      "show_help",
    ],
    name: "CR 8 Channel Out",
    display_name: "🚌 CR 8 Channel Out",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🚌 Bus",
    output_node: false,
  },
  "CR Module Pipe Loader": {
    input: {
      required: {},
      optional: {
        model: ["MODEL"],
        pos: ["CONDITIONING"],
        neg: ["CONDITIONING"],
        latent: ["LATENT"],
        vae: ["VAE"],
        clip: ["CLIP"],
        controlnet: ["CONTROL_NET"],
        image: ["IMAGE"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["PIPE_LINE", "STRING"],
    output_is_list: [false, false],
    output_name: ["pipe", "show_help"],
    name: "CR Module Pipe Loader",
    display_name: "✈️ CR Module Pipe Loader",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/✈️ Module",
    output_node: false,
  },
  "CR Module Input": {
    input: {
      required: {
        pipe: ["PIPE_LINE"],
      },
    },
    output: [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "CONTROL_NET",
      "IMAGE",
      "INT",
      "STRING",
    ],
    output_is_list: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    output_name: [
      "pipe",
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "controlnet",
      "image",
      "seed",
      "show_help",
    ],
    name: "CR Module Input",
    display_name: "✈️ CR Module Input",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/✈️ Module",
    output_node: false,
  },
  "CR Module Output": {
    input: {
      required: {
        pipe: ["PIPE_LINE"],
      },
      optional: {
        model: ["MODEL"],
        pos: ["CONDITIONING"],
        neg: ["CONDITIONING"],
        latent: ["LATENT"],
        vae: ["VAE"],
        clip: ["CLIP"],
        controlnet: ["CONTROL_NET"],
        image: ["IMAGE"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["PIPE_LINE", "STRING"],
    output_is_list: [false, false],
    output_name: ["pipe", "show_help"],
    name: "CR Module Output",
    display_name: "✈️ CR Module Output",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/✈️ Module",
    output_node: false,
  },
  "CR Image Pipe In": {
    input: {
      required: {},
      optional: {
        image: ["IMAGE"],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
          },
        ],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 1,
            max: 2000,
          },
        ],
      },
    },
    output: ["PIPE_LINE", "STRING"],
    output_is_list: [false, false],
    output_name: ["pipe", "show_help"],
    name: "CR Image Pipe In",
    display_name: "🛩 CR Image Pipe In",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🛩️ Image",
    output_node: false,
  },
  "CR Image Pipe Edit": {
    input: {
      required: {
        pipe: ["PIPE_LINE"],
      },
      optional: {
        image: ["IMAGE"],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
            forceInput: true,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
            forceInput: true,
          },
        ],
        upscale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 1,
            max: 2000,
            forceInput: true,
          },
        ],
      },
    },
    output: ["PIPE_LINE", "STRING"],
    output_is_list: [false, false],
    output_name: ["pipe", "show_help"],
    name: "CR Image Pipe Edit",
    display_name: "🛩️ CR Image Pipe Edit",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🛩️ Image",
    output_node: false,
  },
  "CR Image Pipe Out": {
    input: {
      required: {
        pipe: ["PIPE_LINE"],
      },
    },
    output: ["PIPE_LINE", "IMAGE", "INT", "INT", "FLOAT", "STRING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "pipe",
      "image",
      "width",
      "height",
      "upscale_factor",
      "show_help",
    ],
    name: "CR Image Pipe Out",
    display_name: "🛩️ CR Image Pipe Out",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🛩️ Image",
    output_node: false,
  },
  "CR Pipe Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
        pipe1: ["PIPE_LINE"],
        pipe2: ["PIPE_LINE"],
      },
    },
    output: ["PIPE_LINE", "STRING"],
    output_is_list: [false, false],
    output_name: ["PIPE_LINE", "show_help"],
    name: "CR Pipe Switch",
    display_name: "🔀️ CR Pipe Switch",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe",
    output_node: true,
  },
  "CR SDXL Prompt Mix Presets": {
    input: {
      required: {},
      optional: {
        prompt_positive: [
          "STRING",
          {
            multiline: true,
            default: "prompt_pos",
          },
        ],
        prompt_negative: [
          "STRING",
          {
            multiline: true,
            default: "prompt_neg",
          },
        ],
        style_positive: [
          "STRING",
          {
            multiline: true,
            default: "style_pos",
          },
        ],
        style_negative: [
          "STRING",
          {
            multiline: true,
            default: "style_neg",
          },
        ],
        preset: [
          [
            "default with no style text",
            "default with style text",
            "style boost 1",
            "style boost 2",
            "style text to refiner",
          ],
        ],
      },
    },
    output: [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
    ],
    output_is_list: [false, false, false, false, false, false, false],
    output_name: [
      "pos_g",
      "pos_l",
      "pos_r",
      "neg_g",
      "neg_l",
      "neg_r",
      "show_help",
    ],
    name: "CR SDXL Prompt Mix Presets",
    display_name: "🌟 CR SDXL Prompt Mix Presets",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🌟 SDXL",
    output_node: false,
  },
  "CR SDXL Style Text": {
    input: {
      required: {
        positive_style: [
          "STRING",
          {
            default: "POS_STYLE",
            multiline: true,
          },
        ],
        negative_style: [
          "STRING",
          {
            default: "NEG_STYLE",
            multiline: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING", "STRING"],
    output_is_list: [false, false, false],
    output_name: [
      "positive_prompt_text_l",
      "negative_prompt_text_l",
      "show_help",
    ],
    name: "CR SDXL Style Text",
    display_name: "🌟 CR SDXL Style Text",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🌟 SDXL",
    output_node: false,
  },
  "CR SDXL Base Prompt Encoder": {
    input: {
      required: {
        base_clip: ["CLIP"],
        pos_g: [
          "STRING",
          {
            multiline: true,
            default: "POS_G",
          },
        ],
        pos_l: [
          "STRING",
          {
            multiline: true,
            default: "POS_L",
          },
        ],
        neg_g: [
          "STRING",
          {
            multiline: true,
            default: "NEG_G",
          },
        ],
        neg_l: [
          "STRING",
          {
            multiline: true,
            default: "NEG_L",
          },
        ],
        preset: [["preset A", "preset B", "preset C"]],
        base_width: [
          "INT",
          {
            default: 4096,
            min: 0,
            max: 16384,
            step: 64,
          },
        ],
        base_height: [
          "INT",
          {
            default: 4096,
            min: 0,
            max: 16384,
            step: 64,
          },
        ],
        crop_w: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 64,
          },
        ],
        crop_h: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16384,
            step: 64,
          },
        ],
        target_width: [
          "INT",
          {
            default: 4096,
            min: 0,
            max: 16384,
            step: 64,
          },
        ],
        target_height: [
          "INT",
          {
            default: 4096,
            min: 0,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["CONDITIONING", "CONDITIONING", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["base_positive", "base_negative", "show_help"],
    name: "CR SDXL Base Prompt Encoder",
    display_name: "🌟 CR SDXL Base Prompt Encoder",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🌟 SDXL",
    output_node: false,
  },
  "CR Multi Upscale Stack": {
    input: {
      required: {
        switch_1: [["On", "Off"]],
        upscale_model_1: [
          [
            "None",
            "sha256_e1a73bd89c2da1ae494774746398689048b5a892bd9653e146713f9df8bca86a.pth",
            "upscale_models.safetensors",
          ],
        ],
        rescale_factor_1: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 16,
            step: 0.01,
          },
        ],
        switch_2: [["On", "Off"]],
        upscale_model_2: [
          [
            "None",
            "sha256_e1a73bd89c2da1ae494774746398689048b5a892bd9653e146713f9df8bca86a.pth",
            "upscale_models.safetensors",
          ],
        ],
        rescale_factor_2: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 16,
            step: 0.01,
          },
        ],
        switch_3: [["On", "Off"]],
        upscale_model_3: [
          [
            "None",
            "sha256_e1a73bd89c2da1ae494774746398689048b5a892bd9653e146713f9df8bca86a.pth",
            "upscale_models.safetensors",
          ],
        ],
        rescale_factor_3: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 16,
            step: 0.01,
          },
        ],
      },
      optional: {
        upscale_stack: ["UPSCALE_STACK"],
      },
    },
    output: ["UPSCALE_STACK", "STRING"],
    output_is_list: [false, false],
    output_name: ["UPSCALE_STACK", "show_help"],
    name: "CR Multi Upscale Stack",
    display_name: "🔍 CR Multi Upscale Stack",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔍 Upscale",
    output_node: false,
  },
  "CR Upscale Image": {
    input: {
      required: {
        image: ["IMAGE"],
        upscale_model: [
          [
            "sha256_e1a73bd89c2da1ae494774746398689048b5a892bd9653e146713f9df8bca86a.pth",
            "upscale_models.safetensors",
          ],
        ],
        mode: [["rescale", "resize"]],
        rescale_factor: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 16,
            step: 0.01,
          },
        ],
        resize_width: [
          "INT",
          {
            default: 1024,
            min: 1,
            max: 48000,
            step: 1,
          },
        ],
        resampling_method: [["lanczos", "nearest", "bilinear", "bicubic"]],
        supersample: [["true", "false"]],
        rounding_modulus: [
          "INT",
          {
            default: 8,
            min: 8,
            max: 1024,
            step: 8,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Upscale Image",
    display_name: "🔍 CR Upscale Image",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔍 Upscale",
    output_node: false,
  },
  "CR Apply Multi Upscale": {
    input: {
      required: {
        image: ["IMAGE"],
        resampling_method: [["lanczos", "nearest", "bilinear", "bicubic"]],
        supersample: [["true", "false"]],
        rounding_modulus: [
          "INT",
          {
            default: 8,
            min: 8,
            max: 1024,
            step: 8,
          },
        ],
        upscale_stack: ["UPSCALE_STACK"],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Apply Multi Upscale",
    display_name: "🔍 CR Apply Multi Upscale",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/🔍 Upscale",
    output_node: false,
  },
  "CR XY List": {
    input: {
      required: {
        index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        list1: [
          "STRING",
          {
            multiline: true,
            default: "x",
          },
        ],
        x_prepend: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        x_append: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        x_annotation_prepend: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        list2: [
          "STRING",
          {
            multiline: true,
            default: "y",
          },
        ],
        y_prepend: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        y_append: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        y_annotation_prepend: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["STRING", "STRING", "STRING", "STRING", "BOOLEAN", "STRING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "X",
      "Y",
      "x_annotation",
      "y_annotation",
      "trigger",
      "show_help",
    ],
    name: "CR XY List",
    display_name: "📉 CR XY List",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    output_node: false,
  },
  "CR XY Interpolate": {
    input: {
      required: {
        x_columns: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        x_start_value: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 0.01,
          },
        ],
        x_step: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 0.01,
          },
        ],
        x_annotation_prepend: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        y_rows: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        y_start_value: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 0.01,
          },
        ],
        y_step: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 0.01,
          },
        ],
        y_annotation_prepend: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        gradient_profile: [["Lerp"]],
      },
    },
    output: ["FLOAT", "FLOAT", "STRING", "STRING", "BOOLEAN", "STRING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "X",
      "Y",
      "x_annotation",
      "y_annotation",
      "trigger",
      "show_help",
    ],
    name: "CR XY Interpolate",
    display_name: "📉 CR XY Interpolate",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    output_node: false,
  },
  "CR XY From Folder": {
    input: {
      required: {
        image_folder: [[]],
        start_index: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 10000,
          },
        ],
        end_index: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10000,
          },
        ],
        max_columns: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10000,
          },
        ],
        x_annotation: [
          "STRING",
          {
            multiline: true,
          },
        ],
        y_annotation: [
          "STRING",
          {
            multiline: true,
          },
        ],
        font_size: [
          "INT",
          {
            default: 50,
            min: 1,
          },
        ],
        gap: [
          "INT",
          {
            default: 0,
            min: 0,
          },
        ],
      },
      optional: {
        trigger: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE", "BOOLEAN", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "trigger", "show_help"],
    name: "CR XY From Folder",
    display_name: "📉 CR XY From Folder",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    output_node: false,
  },
  "CR XY Save Grid Image": {
    input: {
      required: {
        mode: [["Save", "Preview"]],
        output_folder: [[]],
        image: ["IMAGE"],
        filename_prefix: [
          "STRING",
          {
            default: "CR",
          },
        ],
        file_format: [["webp", "jpg", "png", "tif"]],
      },
      optional: {
        output_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        trigger: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "CR XY Save Grid Image",
    display_name: "📉 CR XY Save Grid Image",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    output_node: true,
  },
  "CR XY Index": {
    input: {
      required: {
        x_columns: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        y_rows: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["INT", "INT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["x", "y", "show_help"],
    name: "CR XY Index",
    display_name: "📉 CR XY Index",
    description: "",
    category: "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    output_node: false,
  },
  "CR Halftone Grid": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        dot_style: [
          [
            "Accent",
            "afmhot",
            "autumn",
            "binary",
            "Blues",
            "bone",
            "BrBG",
            "brg",
            "BuGn",
            "BuPu",
            "bwr",
            "cividis",
            "CMRmap",
            "cool",
            "coolwarm",
            "copper",
            "cubehelix",
            "Dark2",
            "flag",
            "gist_earth",
            "gist_gray",
            "gist_heat",
            "gist_rainbow",
            "gist_stern",
            "gist_yarg",
            "GnBu",
            "gnuplot",
            "gnuplot2",
            "gray",
            "Greens",
            "Greys",
            "hot",
            "hsv",
            "inferno",
            "jet",
            "magma",
            "nipy_spectral",
            "ocean",
            "Oranges",
            "OrRd",
            "Paired",
            "Pastel1",
            "Pastel2",
            "pink",
            "PiYG",
            "plasma",
            "PRGn",
            "prism",
            "PuBu",
            "PuBuGn",
            "PuOr",
            "PuRd",
            "Purples",
            "rainbow",
            "RdBu",
            "RdGy",
            "RdPu",
            "RdYlBu",
            "RdYlGn",
            "Reds",
            "seismic",
            "Set1",
            "Set2",
            "Set3",
            "Spectral",
            "spring",
            "summer",
            "tab10",
            "tab20",
            "tab20b",
            "tab20c",
            "terrain",
            "turbo",
            "twilight",
            "twilight_shifted",
            "viridis",
            "winter",
            "Wistia",
            "YlGn",
            "YlGnBu",
            "YlOrBr",
            "YlOrRd",
          ],
        ],
        reverse_dot_style: [["No", "Yes"]],
        dot_frequency: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        x_pos: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        y_pos: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
      optional: {
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Halftone Grid",
    display_name: "🟫 CR Halftone Grid",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Color Bars": {
    input: {
      required: {
        mode: [["2-color"]],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        color_1: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        color_2: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        orientation: [["vertical", "horizontal", "diagonal", "alt_diagonal"]],
        bar_frequency: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
        offset: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 20,
            step: 0.05,
          },
        ],
      },
      optional: {
        color1_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        color2_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Color Bars",
    display_name: "🟫 CR Color Bars",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Style Bars": {
    input: {
      required: {
        mode: [["color bars", "sin wave", "gradient bars"]],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        bar_style: [
          [
            "Accent",
            "afmhot",
            "autumn",
            "binary",
            "Blues",
            "bone",
            "BrBG",
            "brg",
            "BuGn",
            "BuPu",
            "bwr",
            "cividis",
            "CMRmap",
            "cool",
            "coolwarm",
            "copper",
            "cubehelix",
            "Dark2",
            "flag",
            "gist_earth",
            "gist_gray",
            "gist_heat",
            "gist_rainbow",
            "gist_stern",
            "gist_yarg",
            "GnBu",
            "gnuplot",
            "gnuplot2",
            "gray",
            "Greens",
            "Greys",
            "hot",
            "hsv",
            "inferno",
            "jet",
            "magma",
            "nipy_spectral",
            "ocean",
            "Oranges",
            "OrRd",
            "Paired",
            "Pastel1",
            "Pastel2",
            "pink",
            "PiYG",
            "plasma",
            "PRGn",
            "prism",
            "PuBu",
            "PuBuGn",
            "PuOr",
            "PuRd",
            "Purples",
            "rainbow",
            "RdBu",
            "RdGy",
            "RdPu",
            "RdYlBu",
            "RdYlGn",
            "Reds",
            "seismic",
            "Set1",
            "Set2",
            "Set3",
            "Spectral",
            "spring",
            "summer",
            "tab10",
            "tab20",
            "tab20b",
            "tab20c",
            "terrain",
            "turbo",
            "twilight",
            "twilight_shifted",
            "viridis",
            "winter",
            "Wistia",
            "YlGn",
            "YlGnBu",
            "YlOrBr",
            "YlOrRd",
          ],
        ],
        orientation: [["vertical", "horizontal"]],
        bar_frequency: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Style Bars",
    display_name: "🟪 CR Style Bars",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Checker Pattern": {
    input: {
      required: {
        mode: [["regular", "stepped"]],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        color_1: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        color_2: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        grid_frequency: [
          "INT",
          {
            default: 8,
            min: 1,
            max: 200,
            step: 1,
          },
        ],
        step: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 200,
            step: 1,
          },
        ],
      },
      optional: {
        color1_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        color2_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Checker Pattern",
    display_name: "🟦 CR Checker Pattern",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Polygons": {
    input: {
      required: {
        mode: [["hexagons", "triangles"]],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        rows: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 512,
          },
        ],
        columns: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 512,
          },
        ],
        face_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        line_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        line_width: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 512,
          },
        ],
      },
      optional: {
        face_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        line_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Polygons",
    display_name: "🟩 CR Polygons",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Color Gradient": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        start_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        end_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        gradient_distance: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.05,
          },
        ],
        linear_transition: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        orientation: [["vertical", "horizontal"]],
      },
      optional: {
        start_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        end_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Color Gradient",
    display_name: "🟨 CR Color Gradient",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Radial Gradient": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        start_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        end_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        gradient_distance: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 2,
            step: 0.05,
          },
        ],
        radial_center_x: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        radial_center_y: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
      },
      optional: {
        start_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        end_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_Help"],
    name: "CR Radial Gradient",
    display_name: "🟨 CR Radial Gradient",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Starburst Lines": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        num_lines: [
          "INT",
          {
            default: 6,
            min: 1,
            max: 500,
          },
        ],
        line_length: [
          "FLOAT",
          {
            default: 5,
            min: 0,
            max: 100,
            step: 0.1,
          },
        ],
        line_width: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 512,
          },
        ],
        line_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        center_x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        center_y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        rotation: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 720,
          },
        ],
      },
      optional: {
        line_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Starburst Lines",
    display_name: "🟧 CR Starburst Lines",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Starburst Colors": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        num_triangles: [
          "INT",
          {
            default: 6,
            min: 1,
            max: 512,
          },
        ],
        color_1: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        color_2: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        center_x: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 512,
          },
        ],
        center_y: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 512,
          },
        ],
        rotation: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 720,
          },
        ],
        bbox_factor: [
          "FLOAT",
          {
            default: 2,
            min: 0,
            max: 2,
            step: 0.01,
          },
        ],
      },
      optional: {
        color1_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        color2_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Starburst Colors",
    display_name: "🟧 CR Starburst Colors",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Simple Binary Pattern": {
    input: {
      required: {
        binary_pattern: [
          "STRING",
          {
            multiline: true,
            default: "10101",
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Simple Binary Pattern",
    display_name: "🟥 CR Simple Binary Pattern",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Binary Pattern": {
    input: {
      required: {
        binary_pattern: [
          "STRING",
          {
            multiline: true,
            default: "10101",
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        color_0: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        color_1: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        outline_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        outline_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        jitter_distance: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        bias: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
      },
      optional: {
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        color0_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        color1_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        outline_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Binary Pattern",
    display_name: "🟥 CR Binary Pattern",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    output_node: false,
  },
  "CR Draw Shape": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        shape: [
          [
            "circle",
            "oval",
            "square",
            "diamond",
            "triangle",
            "hexagon",
            "octagon",
            "quarter circle",
            "half circle",
            "quarter circle",
            "starburst",
            "star",
            "cross",
            "diagonal regions",
          ],
        ],
        shape_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        back_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        x_offset: [
          "INT",
          {
            default: 0,
            min: -2048,
            max: 2048,
          },
        ],
        y_offset: [
          "INT",
          {
            default: 0,
            min: -2048,
            max: 2048,
          },
        ],
        zoom: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.05,
          },
        ],
        rotation: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 3600,
            step: 0.1,
          },
        ],
      },
      optional: {
        shape_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Draw Shape",
    display_name: "🟡 CR Draw Shape",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🟣 Shape",
    output_node: false,
  },
  "CR Draw Pie": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        pie_start: [
          "FLOAT",
          {
            default: 30,
            min: 0,
            max: 9999,
            step: 0.1,
          },
        ],
        pie_stop: [
          "FLOAT",
          {
            default: 330,
            min: 0,
            max: 9999,
            step: 0.1,
          },
        ],
        shape_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        back_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        x_offset: [
          "INT",
          {
            default: 0,
            min: -2048,
            max: 2048,
          },
        ],
        y_offset: [
          "INT",
          {
            default: 0,
            min: -2048,
            max: 2048,
          },
        ],
        zoom: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.05,
          },
        ],
        rotation: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 3600,
            step: 0.1,
          },
        ],
      },
      optional: {
        shape_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Draw Pie",
    display_name: "🟢 CR Draw Pie",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🟣 Shape",
    output_node: false,
  },
  "CR Random Shape Pattern": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 4096,
          },
        ],
        num_rows: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 128,
          },
        ],
        num_cols: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 128,
          },
        ],
        color1: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        color2: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
      },
      optional: {
        color1_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        color2_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Random Shape Pattern",
    display_name: "🔵 CR Random Shape Pattern",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🟣 Shape",
    output_node: false,
  },
  "CR Overlay Text": {
    input: {
      required: {
        image: ["IMAGE"],
        text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        font_size: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 1024,
          },
        ],
        font_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        align: [["center", "top", "bottom"]],
        justify: [["center", "left", "right"]],
        margins: [
          "INT",
          {
            default: 0,
            min: -1024,
            max: 1024,
          },
        ],
        line_spacing: [
          "INT",
          {
            default: 0,
            min: -1024,
            max: 1024,
          },
        ],
        position_x: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        position_y: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        rotation_angle: [
          "FLOAT",
          {
            default: 0,
            min: -360,
            max: 360,
            step: 0.1,
          },
        ],
        rotation_options: [["text center", "image center"]],
      },
      optional: {
        font_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Overlay Text",
    display_name: "🔤 CR Overlay Text",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    output_node: false,
  },
  "CR Draw Text": {
    input: {
      required: {
        image_width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
          },
        ],
        image_height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 2048,
          },
        ],
        text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        font_size: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 1024,
          },
        ],
        font_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        align: [["center", "top", "bottom"]],
        justify: [["center", "left", "right"]],
        margins: [
          "INT",
          {
            default: 0,
            min: -1024,
            max: 1024,
          },
        ],
        line_spacing: [
          "INT",
          {
            default: 0,
            min: -1024,
            max: 1024,
          },
        ],
        position_x: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        position_y: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        rotation_angle: [
          "FLOAT",
          {
            default: 0,
            min: -360,
            max: 360,
            step: 0.1,
          },
        ],
        rotation_options: [["text center", "image center"]],
      },
      optional: {
        font_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Draw Text",
    display_name: "🔤️ CR Draw Text",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    output_node: false,
  },
  "CR Mask Text": {
    input: {
      required: {
        image: ["IMAGE"],
        text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        font_size: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 1024,
          },
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        align: [["center", "top", "bottom"]],
        justify: [["center", "left", "right"]],
        margins: [
          "INT",
          {
            default: 0,
            min: -1024,
            max: 1024,
          },
        ],
        line_spacing: [
          "INT",
          {
            default: 0,
            min: -1024,
            max: 1024,
          },
        ],
        position_x: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        position_y: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        rotation_angle: [
          "FLOAT",
          {
            default: 0,
            min: -360,
            max: 360,
            step: 0.1,
          },
        ],
        rotation_options: [["text center", "image center"]],
      },
      optional: {
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Mask Text",
    display_name: "🔤️ CR Mask Text",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    output_node: false,
  },
  "CR Composite Text": {
    input: {
      required: {
        image_text: ["IMAGE"],
        image_background: ["IMAGE"],
        text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        font_size: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 1024,
          },
        ],
        align: [["center", "top", "bottom"]],
        justify: [["center", "left", "right"]],
        margins: [
          "INT",
          {
            default: 0,
            min: -1024,
            max: 1024,
          },
        ],
        line_spacing: [
          "INT",
          {
            default: 0,
            min: -1024,
            max: 1024,
          },
        ],
        position_x: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        position_y: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        rotation_angle: [
          "FLOAT",
          {
            default: 0,
            min: -360,
            max: 360,
            step: 0.1,
          },
        ],
        rotation_options: [["text center", "image center"]],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Composite Text",
    display_name: "🔤️ CR Composite Text",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    output_node: false,
  },
  "CR Simple Text Watermark": {
    input: {
      required: {
        image: ["IMAGE"],
        text: [
          "STRING",
          {
            multiline: false,
            default: "@ your name",
          },
        ],
        align: [
          [
            "center",
            "top left",
            "top center",
            "top right",
            "bottom left",
            "bottom center",
            "bottom right",
          ],
        ],
        opacity: [
          "FLOAT",
          {
            default: 0.3,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        font_size: [
          "INT",
          {
            default: 50,
            min: 1,
            max: 1024,
          },
        ],
        font_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        x_margin: [
          "INT",
          {
            default: 20,
            min: -1024,
            max: 1024,
          },
        ],
        y_margin: [
          "INT",
          {
            default: 20,
            min: -1024,
            max: 1024,
          },
        ],
      },
      optional: {
        font_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Simple Text Watermark",
    display_name: "🔤️ CR Simple Text Watermark",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    output_node: false,
  },
  "CR Select Font": {
    input: {
      required: {
        font_name: [[]],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["font_name", "show_help"],
    name: "CR Select Font",
    display_name: "🔤️ CR Select Font",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    output_node: false,
  },
  "CR Halftone Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        dot_size: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 30,
            step: 1,
          },
        ],
        dot_shape: [
          ["ellipse", "rectangle"],
          {
            default: "ellipse",
          },
        ],
        resolution: [
          ["normal", "hi-res (2x output size)"],
          {
            default: "normal",
          },
        ],
        angle_c: [
          "INT",
          {
            default: 75,
            min: 0,
            max: 360,
            step: 1,
          },
        ],
        angle_m: [
          "INT",
          {
            default: 45,
            min: 0,
            max: 360,
            step: 1,
          },
        ],
        angle_y: [
          "INT",
          {
            default: 15,
            min: 0,
            max: 360,
            step: 1,
          },
        ],
        angle_k: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 360,
            step: 1,
          },
        ],
        greyscale: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        antialias: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        antialias_scale: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 4,
            step: 1,
          },
        ],
        border_blending: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Halftone Filter",
    display_name: "🎨 Halftone Filter",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🎨 Filter",
    output_node: false,
  },
  "CR Color Tint": {
    input: {
      required: {
        image: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 1,
            step: 0.1,
          },
        ],
        mode: [
          [
            "custom",
            "white",
            "black",
            "sepia",
            "red",
            "green",
            "blue",
            "cyan",
            "magenta",
            "yellow",
            "purple",
            "orange",
            "warm",
            "cool",
            "lime",
            "navy",
            "vintage",
            "rose",
            "teal",
            "maroon",
            "peach",
            "lavender",
            "olive",
          ],
        ],
      },
      optional: {
        tint_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Color Tint",
    display_name: "🎨 CR Color Tint",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🎨 Filter",
    output_node: false,
  },
  "CR Vignette Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        vignette_shape: [["circle", "oval", "square", "diamond"]],
        feather_amount: [
          "INT",
          {
            default: 100,
            min: 0,
            max: 1024,
          },
        ],
        x_offset: [
          "INT",
          {
            default: 0,
            min: -2048,
            max: 2048,
          },
        ],
        y_offset: [
          "INT",
          {
            default: 0,
            min: -2048,
            max: 2048,
          },
        ],
        zoom: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.1,
          },
        ],
        reverse: [["no", "yes"]],
      },
    },
    output: ["IMAGE", "MASK", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "MASK", "show_help"],
    name: "CR Vignette Filter",
    display_name: "🎨 CR Vignette Filter",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🎨 Filter",
    output_node: false,
  },
  "CR Page Layout": {
    input: {
      required: {
        layout_options: [
          ["header", "footer", "header and footer", "no header or footer"],
        ],
        image_panel: ["IMAGE"],
        header_height: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        header_text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        header_align: [["left", "center", "right"]],
        footer_height: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        footer_text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        footer_align: [["left", "center", "right"]],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        font_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        header_font_size: [
          "INT",
          {
            default: 150,
            min: 0,
            max: 1024,
          },
        ],
        footer_font_size: [
          "INT",
          {
            default: 50,
            min: 0,
            max: 1024,
          },
        ],
        border_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        border_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
      },
      optional: {
        font_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        border_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Page Layout",
    display_name: "🌁 CR Page Layout",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Image Panel": {
    input: {
      required: {
        image_1: ["IMAGE"],
        border_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        border_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        outline_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        outline_color: [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        layout_direction: [["horizontal", "vertical"]],
      },
      optional: {
        image_2: ["IMAGE"],
        image_3: ["IMAGE"],
        image_4: ["IMAGE"],
        border_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Image Panel",
    display_name: "🌁 CR Image Panel",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Image Grid Panel": {
    input: {
      required: {
        images: ["IMAGE"],
        border_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        border_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        outline_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        outline_color: [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        max_columns: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 256,
          },
        ],
      },
      optional: {
        border_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Image Grid Panel",
    display_name: "🌁 CR Image Grid Panel",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Image Border": {
    input: {
      required: {
        image: ["IMAGE"],
        top_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
        bottom_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
        left_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
        right_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
        border_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        outline_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
        outline_color: [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
      },
      optional: {
        border_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Image Border",
    display_name: "🌁 CR Image Border",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Feathered Border": {
    input: {
      required: {
        image: ["IMAGE"],
        top_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
        bottom_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
        left_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
        right_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
        border_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        feather_amount: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1024,
          },
        ],
      },
      optional: {
        border_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Feathered Border",
    display_name: "🌁 CR Feathered Border",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Simple Text Panel": {
    input: {
      required: {
        panel_width: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
          },
        ],
        panel_height: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
          },
        ],
        text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        font_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        font_size: [
          "INT",
          {
            default: 100,
            min: 0,
            max: 1024,
          },
        ],
        font_outline_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 50,
          },
        ],
        font_outline_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        align: [["top", "center", "bottom"]],
        justify: [["left", "center", "right"]],
      },
      optional: {
        font_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Simple Text Panel",
    display_name: "🌁 CR Simple Text Panel",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Color Panel": {
    input: {
      required: {
        panel_width: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
          },
        ],
        panel_height: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
          },
        ],
        fill_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
      },
      optional: {
        fill_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Color Panel",
    display_name: "🌁 CR Color Panel",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Overlay Transparent Image": {
    input: {
      required: {
        back_image: ["IMAGE"],
        overlay_image: ["IMAGE"],
        transparency: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.1,
          },
        ],
        offset_x: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        offset_y: [
          "INT",
          {
            default: 0,
            min: -4096,
            max: 4096,
          },
        ],
        rotation_angle: [
          "FLOAT",
          {
            default: 0,
            min: -360,
            max: 360,
            step: 0.1,
          },
        ],
        overlay_scale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 100,
            step: 0.001,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "CR Overlay Transparent Image",
    display_name: "🌁 CR Overlay Transparent Image",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Half Drop Panel": {
    input: {
      required: {
        image: ["IMAGE"],
        pattern: [["none", "half drop", "quarter drop", "custom drop %"]],
      },
      optional: {
        drop_percentage: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Half Drop Panel",
    display_name: "🌁 CR Half Drop Panel",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Diamond Panel": {
    input: {
      required: {
        image: ["IMAGE"],
        pattern: [["none", "diamond"]],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Diamond Panel",
    display_name: "🌁 CR Diamond Panel",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    output_node: false,
  },
  "CR Simple Meme Template": {
    input: {
      required: {
        image: ["IMAGE"],
        preset: [
          [
            "custom",
            "One Does Not Simply ... MEME IN COMFY",
            "This is fine.",
            "Good Morning ... No Such Thing!",
          ],
        ],
        text_top: [
          "STRING",
          {
            multiline: true,
            default: "text_top",
          },
        ],
        text_bottom: [
          "STRING",
          {
            multiline: true,
            default: "text_bottom",
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        max_font_size: [
          "INT",
          {
            default: 150,
            min: 20,
            max: 2048,
          },
        ],
        font_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        font_outline: [["none", "thin", "thick", "extra thick"]],
        bar_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        bar_options: [["no bars", "top", "bottom", "top and bottom"]],
      },
      optional: {
        font_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bar_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Simple Meme Template",
    display_name: "📱 CR Simple Meme Template",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    output_node: false,
  },
  "CR Simple Banner": {
    input: {
      required: {
        image: ["IMAGE"],
        banner_text: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        max_font_size: [
          "INT",
          {
            default: 150,
            min: 20,
            max: 2048,
          },
        ],
        font_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        outline_thickness: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 500,
          },
        ],
        outline_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        margin_size: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 500,
          },
        ],
      },
      optional: {
        font_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        outline_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Simple Banner",
    display_name: "📱 CR Simple Banner",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    output_node: false,
  },
  "CR Comic Panel Templates": {
    input: {
      required: {
        page_width: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
          },
        ],
        page_height: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
          },
        ],
        template: [
          [
            "custom",
            "G22",
            "G33",
            "H2",
            "H3",
            "H12",
            "H13",
            "H21",
            "H23",
            "H31",
            "H32",
            "V2",
            "V3",
            "V12",
            "V13",
            "V21",
            "V23",
            "V31",
            "V32",
          ],
        ],
        reading_direction: [["left to right", "right to left"]],
        border_thickness: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 1024,
          },
        ],
        outline_thickness: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 1024,
          },
        ],
        outline_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        panel_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
        background_color: [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo",
          ],
        ],
      },
      optional: {
        images: ["IMAGE"],
        custom_panel_layout: [
          "STRING",
          {
            multiline: false,
            default: "H123",
          },
        ],
        outline_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        panel_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        bg_color_hex: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Comic Panel Templates",
    display_name: "📱 CR Comic Panel Templates",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    output_node: false,
  },
  "CR Simple Image Compare": {
    input: {
      required: {
        text1: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        text2: [
          "STRING",
          {
            multiline: true,
            default: "text",
          },
        ],
        footer_height: [
          "INT",
          {
            default: 100,
            min: 0,
            max: 1024,
          },
        ],
        font_name: [
          [
            "AlumniSansCollegiateOne-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Oswald-Bold.ttf",
            "PixelifySans-Bold.ttf",
            "Quicksand-Bold.ttf",
            "Roboto-Regular.ttf",
            "YoungSerif-Regular.ttf",
            "comic.ttf",
            "impact.ttf",
          ],
        ],
        font_size: [
          "INT",
          {
            default: 50,
            min: 0,
            max: 1024,
          },
        ],
        mode: [["normal", "dark"]],
        border_thickness: [
          "INT",
          {
            default: 20,
            min: 0,
            max: 1024,
          },
        ],
      },
      optional: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "show_help"],
    name: "CR Simple Image Compare",
    display_name: "📱 CR Simple Image Compare",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    output_node: false,
  },
  "CR Thumbnail Preview": {
    input: {
      required: {
        image: ["IMAGE"],
        rescale_factor: [
          "FLOAT",
          {
            default: 0.25,
            min: 0.1,
            max: 1,
            step: 0.01,
          },
        ],
        max_columns: [
          "INT",
          {
            default: 5,
            min: 0,
            max: 256,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["show_help"],
    name: "CR Thumbnail Preview",
    display_name: "📱 CR Thumbnail Preview",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    output_node: true,
  },
  "CR Seamless Checker": {
    input: {
      required: {
        image: ["IMAGE"],
        rescale_factor: [
          "FLOAT",
          {
            default: 0.25,
            min: 0.1,
            max: 1,
            step: 0.01,
          },
        ],
        grid_options: [["2x2", "3x3", "4x4", "5x5", "6x6"]],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["show_help"],
    name: "CR Seamless Checker",
    display_name: "📱 CR Seamless Checker",
    description: "",
    category: "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    output_node: true,
  },
  "CR Image Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
      },
      optional: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Image Input Switch",
    display_name: "🔀 CR Image Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Image Input Switch (4 way)": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4,
          },
        ],
      },
      optional: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
        image3: ["IMAGE"],
        image4: ["IMAGE"],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Image Input Switch (4 way)",
    display_name: "🔀 CR Image Input Switch (4 way)",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Latent Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
      },
      optional: {
        latent1: ["LATENT"],
        latent2: ["LATENT"],
      },
    },
    output: ["LATENT", "STRING"],
    output_is_list: [false, false],
    output_name: ["LATENT", "show_help"],
    name: "CR Latent Input Switch",
    display_name: "🔀 CR Latent Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Conditioning Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
      },
      optional: {
        conditioning1: ["CONDITIONING"],
        conditioning2: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING", "STRING"],
    output_is_list: [false, false],
    output_name: ["CONDITIONING", "show_help"],
    name: "CR Conditioning Input Switch",
    display_name: "🔀 CR Conditioning Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Clip Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
      },
      optional: {
        clip1: ["CLIP"],
        clip2: ["CLIP"],
      },
    },
    output: ["CLIP", "STRING"],
    output_is_list: [false, false],
    output_name: ["CLIP", "show_help"],
    name: "CR Clip Input Switch",
    display_name: "🔀 CR Clip Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Model Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
      },
      optional: {
        model1: ["MODEL"],
        model2: ["MODEL"],
      },
    },
    output: ["MODEL", "STRING"],
    output_is_list: [false, false],
    output_name: ["MODEL", "show_help"],
    name: "CR Model Input Switch",
    display_name: "🔀 CR Model Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR ControlNet Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
        control_net1: ["CONTROL_NET"],
        control_net2: ["CONTROL_NET"],
      },
      optional: {
        control_net1: ["CONTROL_NET"],
        control_net2: ["CONTROL_NET"],
      },
    },
    output: ["CONTROL_NET", "STRING"],
    output_is_list: [false, false],
    output_name: ["CONTROL_NET", "show_help"],
    name: "CR ControlNet Input Switch",
    display_name: "🔀 CR ControlNet Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR VAE Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
      },
      optional: {
        VAE1: [
          "VAE",
          {
            forceInput: true,
          },
        ],
        VAE2: [
          "VAE",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["VAE", "STRING"],
    output_is_list: [false, false],
    output_name: ["VAE", "show_help"],
    name: "CR VAE Input Switch",
    display_name: "🔀 CR VAE Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Text Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
      },
      optional: {
        text1: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text2: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text Input Switch",
    display_name: "🔀 CR Text Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Text Input Switch (4 way)": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4,
          },
        ],
      },
      optional: {
        text1: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text2: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text3: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text4: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text Input Switch (4 way)",
    display_name: "🔀 CR Text Input Switch (4 way)",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Switch Model and CLIP": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
        model1: ["MODEL"],
        clip1: ["CLIP"],
        model2: ["MODEL"],
        clip2: ["CLIP"],
      },
    },
    output: ["MODEL", "CLIP", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "show_help"],
    name: "CR Switch Model and CLIP",
    display_name: "🔀 CR Switch Model and CLIP",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    output_node: false,
  },
  "CR Batch Process Switch": {
    input: {
      required: {
        Input: [["image", "image batch"]],
      },
      optional: {
        image: ["IMAGE"],
        image_batch: ["IMAGE"],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Batch Process Switch",
    display_name: "🔂 CR Batch Process Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔂 Process",
    output_node: false,
  },
  "CR Img2Img Process Switch": {
    input: {
      required: {
        Input: [["txt2img", "img2img"]],
      },
      optional: {
        txt2img: ["LATENT"],
        img2img: ["LATENT"],
      },
    },
    output: ["LATENT", "STRING"],
    output_is_list: [false, false],
    output_name: ["LATENT", "show_help"],
    name: "CR Img2Img Process Switch",
    display_name: "🔂 CR Img2Img Process Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔂 Process",
    output_node: false,
  },
  "CR Hires Fix Process Switch": {
    input: {
      required: {
        Input: [["latent_upscale", "image_upscale"]],
      },
      optional: {
        latent_upscale: ["LATENT"],
        image_upscale: ["LATENT"],
      },
    },
    output: ["LATENT", "STRING"],
    output_is_list: [false, false],
    output_name: ["LATENT", "STRING"],
    name: "CR Hires Fix Process Switch",
    display_name: "🔂 CR Hires Fix Process Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔂 Process",
    output_node: false,
  },
  "CR Index": {
    input: {
      required: {
        index: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 10000,
          },
        ],
        print_to_console: [["Yes", "No"]],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["INT", "show_help"],
    name: "CR Index",
    display_name: "🔢 CR Index",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    output_node: false,
  },
  "CR Index Increment": {
    input: {
      required: {
        index: [
          "INT",
          {
            default: 1,
            min: -10000,
            max: 10000,
            forceInput: true,
          },
        ],
        interval: [
          "INT",
          {
            default: 1,
            min: -10000,
            max: 10000,
          },
        ],
      },
    },
    output: ["INT", "INT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["index", "interval", "show_help"],
    name: "CR Index Increment",
    display_name: "🔢 CR Index Increment",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    output_node: false,
  },
  "CR Index Multiply": {
    input: {
      required: {
        index: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 10000,
            forceInput: true,
          },
        ],
        factor: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 10000,
          },
        ],
      },
    },
    output: ["INT", "INT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["index", "factor", "show_help"],
    name: "CR Index Multiply",
    display_name: "🔢 CR Index Multiply",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    output_node: false,
  },
  "CR Index Reset": {
    input: {
      required: {
        index: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 10000,
            forceInput: true,
          },
        ],
        reset_to: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 10000,
          },
        ],
      },
    },
    output: ["INT", "INT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["index", "reset_to", "show_help"],
    name: "CR Index Reset",
    display_name: "🔢 CR Index Reset",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    output_node: false,
  },
  "CR Trigger": {
    input: {
      required: {
        index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        trigger_value: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 10000,
          },
        ],
      },
    },
    output: ["INT", "BOOLEAN", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["index", "trigger", "show_help"],
    name: "CR Trigger",
    display_name: "🔢 CR Trigger",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    output_node: false,
  },
  "CR String To Number": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
            default: "text",
            forceInput: true,
          },
        ],
        round_integer: [["round", "round down", "round up"]],
      },
    },
    output: ["INT", "FLOAT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["INT", "FLOAT", "show_help"],
    name: "CR String To Number",
    display_name: "🔧 CR String To Number",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    output_node: false,
  },
  "CR String To Combo": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
            default: "",
            forceInput: true,
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["any", "show_help"],
    name: "CR String To Combo",
    display_name: "🔧 CR String To Combo",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    output_node: false,
  },
  "CR Float To String": {
    input: {
      required: {
        float_: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1000000,
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Float To String",
    display_name: "🔧 CR Float To String",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    output_node: false,
  },
  "CR Float To Integer": {
    input: {
      required: {
        _float: [
          "FLOAT",
          {
            default: 0,
            forceInput: true,
          },
        ],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["INT", "show_help"],
    name: "CR Float To Integer",
    display_name: "🔧 CR Float To Integer",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    output_node: false,
  },
  "CR Integer To String": {
    input: {
      required: {
        int_: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Integer To String",
    display_name: "🔧 CR Integer To String",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    output_node: false,
  },
  "CR String To Boolean": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
            default: "",
            forceInput: true,
          },
        ],
      },
    },
    output: ["BOOLEAN", "STRING"],
    output_is_list: [false, false],
    output_name: ["BOOLEAN", "show_help"],
    name: "CR String To Boolean",
    display_name: "🔧 CR String To Boolean",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    output_node: false,
  },
  "CR Random Hex Color": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["STRING", "STRING", "STRING", "STRING", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: [
      "hex_color1",
      "hex_color2",
      "hex_color3",
      "hex_color4",
      "show_help",
    ],
    name: "CR Random Hex Color",
    display_name: "🎲 CR Random Hex Color",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    output_node: false,
  },
  "CR Random RGB": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["STRING", "STRING", "STRING", "STRING", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["rgb_1", "rgb_2", "rgb_3", "rgb_4", "show_help"],
    name: "CR Random RGB",
    display_name: "🎲 CR Random RGB",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    output_node: false,
  },
  "CR Random Multiline Values": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        value_type: [
          [
            "binary",
            "decimal",
            "natural",
            "hexadecimal",
            "alphabetic",
            "alphanumeric",
            "custom",
          ],
        ],
        rows: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 2048,
          },
        ],
        string_length: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 1024,
          },
        ],
        custom_values: [
          "STRING",
          {
            multiline: false,
            default: "123ABC",
          },
        ],
        prepend_text: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["multiline_text", "show_help"],
    name: "CR Random Multiline Values",
    display_name: "🎲 CR Random Multiline Values",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    output_node: false,
  },
  "CR Random Multiline Colors": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        value_type: [["rgb", "hex color", "matplotlib xkcd"]],
        rows: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 2048,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["multiline_text", "show_help"],
    name: "CR Random Multiline Colors",
    display_name: "🎲 CR Random Multiline Colors",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    output_node: false,
  },
  "CR Random RGB Gradient": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        rows: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 2048,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["multiline_text", "show_help"],
    name: "CR Random RGB Gradient",
    display_name: "🎲 CR Random RGB Gradient",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    output_node: false,
  },
  "CR Random Panel Codes": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        rows: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 2048,
          },
        ],
        string_length: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 1024,
          },
        ],
        values: [
          "STRING",
          {
            multiline: false,
            default: "123",
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["multiline_text", "show_help"],
    name: "CR Random Panel Codes",
    display_name: "🎲 CR Random Panel Codes",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    output_node: false,
  },
  "CR Text": {
    input: {
      required: {
        text: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["text", "show_help"],
    name: "CR Text",
    display_name: "🔤 CR Text",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: false,
  },
  "CR Multiline Text": {
    input: {
      required: {
        text: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
        convert_from_csv: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        csv_quote_char: [
          "STRING",
          {
            default: "'",
            choices: ["'", '"'],
          },
        ],
        remove_chars: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        chars_to_remove: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        split_string: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["multiline_text", "show_help"],
    name: "CR Multiline Text",
    display_name: "🔤 CR Multiline Text",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: false,
  },
  "CR Split String": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
            default: "text",
          },
        ],
      },
      optional: {
        delimiter: [
          "STRING",
          {
            multiline: false,
            default: ",",
          },
        ],
      },
    },
    output: ["*", "*", "*", "*", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["string_1", "string_2", "string_3", "string_4", "show_help"],
    name: "CR Split String",
    display_name: "🔤 CR Split String",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: false,
  },
  "CR Text Concatenate": {
    input: {
      required: {},
      optional: {
        text1: [
          "STRING",
          {
            multiline: false,
            default: "",
            forceInput: true,
          },
        ],
        text2: [
          "STRING",
          {
            multiline: false,
            default: "",
            forceInput: true,
          },
        ],
        separator: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text Concatenate",
    display_name: "🔤 CR Text Concatenate",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: false,
  },
  "CR Text Replace": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
            default: "",
            forceInput: true,
          },
        ],
      },
      optional: {
        find1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        replace1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        find2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        replace2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        find3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        replace3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text Replace",
    display_name: "🔤 CR Text Replace",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: false,
  },
  "CR Text Length": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
            default: "",
            forceInput: true,
          },
        ],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["INT", "show_help"],
    name: "CR Text Length",
    display_name: "🔤 CR Text Length",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: false,
  },
  "CR Text Operation": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
            default: "",
            forceInput: true,
          },
        ],
        operation: [
          [
            "uppercase",
            "lowercase",
            "capitalize",
            "invert_case",
            "reverse",
            "trim",
            "remove_spaces",
          ],
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text Operation",
    display_name: "🔤 CR Text Operation",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: false,
  },
  "CR Text Blacklist": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
            default: "",
            forceInput: true,
          },
        ],
        blacklist_words: [
          "STRING",
          {
            multiline: true,
            default: "",
          },
        ],
      },
      optional: {
        replacement_text: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text Blacklist",
    display_name: "🔤 Text Blacklist",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: false,
  },
  "CR Save Text To File": {
    input: {
      required: {
        multiline_text: [
          "STRING",
          {
            multiline: true,
            default: "",
          },
        ],
        output_file_path: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        file_name: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        file_extension: [["txt", "csv"]],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["show_help"],
    name: "CR Save Text To File",
    display_name: "🔤 CR Save Text To File",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    output_node: true,
  },
  "CR Set Value On Boolean": {
    input: {
      required: {
        boolean: [
          "BOOLEAN",
          {
            default: true,
            forceInput: true,
          },
        ],
        value_if_true: [
          "FLOAT",
          {
            default: 1,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        value_if_false: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["INT", "FLOAT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["INT", "FLOAT", "show_help"],
    name: "CR Set Value On Boolean",
    display_name: "⚙️ CR Set Value On Boolean",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Conditional",
    output_node: false,
  },
  "CR Set Value On Binary": {
    input: {
      required: {
        binary: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 1,
            forceInput: true,
          },
        ],
        value_if_1: [
          "FLOAT",
          {
            default: 1,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        value_if_0: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["INT", "FLOAT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["INT", "FLOAT", "show_help"],
    name: "CR Set Value On Binary",
    display_name: "⚙️ CR Set Value On Binary",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Conditional",
    output_node: false,
  },
  "CR Set Value on String": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
            default: "",
            forceInput: true,
          },
        ],
      },
      optional: {
        test_string: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        value_if_true: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        value_if_false: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["*", "BOOLEAN", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["STRING", "BOOLEAN", "show_help"],
    name: "CR Set Value on String",
    display_name: "⚙️ CR Set Value on String",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Conditional",
    output_node: false,
  },
  "CR Set Switch From String": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: false,
            default: "",
            forceInput: true,
          },
        ],
      },
      optional: {
        switch_1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        switch_2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        switch_3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        switch_4: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["switch", "show_help"],
    name: "CR Set Switch From String",
    display_name: "⚙️ CR Set Switch From String",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/🔀 Conditional",
    output_node: false,
  },
  "CR Value": {
    input: {
      required: {
        value: [
          "FLOAT",
          {
            default: 1,
          },
        ],
      },
    },
    output: ["FLOAT", "INT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["FLOAT", "INT", "show_help"],
    name: "CR Value",
    display_name: "⚙️ CR Value",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    output_node: false,
  },
  "CR Integer Multiple": {
    input: {
      required: {
        integer: [
          "INT",
          {
            default: 1,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        multiple: [
          "FLOAT",
          {
            default: 8,
            min: 1,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["INT", "show_help"],
    name: "CR Integer Multiple",
    display_name: "⚙️ CR Integer Multiple",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    output_node: false,
  },
  "CR Clamp Value": {
    input: {
      required: {
        a: [
          "FLOAT",
          {
            default: 1,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        range_min: [
          "FLOAT",
          {
            default: 1,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        range_max: [
          "FLOAT",
          {
            default: 1,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["FLOAT", "STRING"],
    output_is_list: [false, false],
    output_name: ["a", "show_help"],
    name: "CR Clamp Value",
    display_name: "⚙️ CR Clamp Value",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    output_node: false,
  },
  "CR Math Operation": {
    input: {
      required: {
        a: [
          "FLOAT",
          {
            default: 1,
          },
        ],
        operation: [["sin", "cos", "tan", "sqrt", "exp", "log", "neg", "abs"]],
        decimal_places: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 10,
          },
        ],
      },
    },
    output: ["FLOAT", "STRING"],
    output_is_list: [false, false],
    output_name: ["a", "show_help"],
    name: "CR Math Operation",
    display_name: "⚙️ CR Math Operation",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    output_node: false,
  },
  "CR Get Parameter From Prompt": {
    input: {
      required: {
        prompt: [
          "STRING",
          {
            multiline: true,
            default: "prompt",
            forceInput: true,
          },
        ],
        search_string: [
          "STRING",
          {
            multiline: false,
            default: "!findme",
          },
        ],
      },
    },
    output: ["STRING", "*", "FLOAT", "BOOLEAN", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["prompt", "text", "float", "boolean", "show_help"],
    name: "CR Get Parameter From Prompt",
    display_name: "⚙️ CR Get Parameter From Prompt",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    output_node: false,
  },
  "CR Select Resize Method": {
    input: {
      required: {
        method: [["Fit", "Crop"]],
      },
    },
    output: ["*", "STRING"],
    output_is_list: [false, false],
    output_name: ["method", "show_help"],
    name: "CR Select Resize Method",
    display_name: "⚙️ CR Select Resize Method",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    output_node: false,
  },
  "CR Select ISO Size": {
    input: {
      required: {
        iso_size: [
          [
            "A0 - 9933x14043",
            "A1 - 7016x9933",
            "A2 - 4960x7016",
            "A3 - 3508x4960",
            "A4 - 2480x3508",
            "A5 - 1748x2480",
            "A6 - 1240x1748",
            "A7 - 874x1240",
            "A8 - 614x874",
            "A9 - 437x614",
            "A10 - 307x437",
            "A11 - 213x307",
            "A12 - 154x213",
            "A13 - 106x154",
            "B0 - 11811x16701",
            "B1 - 8350x11811",
            "B2 - 5906x8350",
            "B3 - 4169x5906",
            "B4 - 2953x4169",
            "B5 - 2079x2953",
            "B6 - 1476x2079",
            "B7 - 1039x1476",
            "B8 - 732x1039",
            "B9 - 520x732",
            "B10 - 366x520",
            "C0 - 10831x15319",
            "C1 - 7654x10831",
            "C2 - 5409x7654",
            "C3 - 3827x5409",
            "C4 - 2705x3827",
            "C5 - 1913x2705",
            "C6 - 1346x1913",
            "C7 - 957x1346",
            "C8 - 673x957",
            "C9 - 472x673",
            "C10 - 331x472",
          ],
        ],
      },
    },
    output: ["INT", "INT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["width", "height", "show_help"],
    name: "CR Select ISO Size",
    display_name: "⚙️ CR Select ISO Size",
    description: "",
    category: "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    output_node: false,
  },
  "CR Simple Schedule": {
    input: {
      required: {
        schedule: [
          "STRING",
          {
            multiline: true,
            default: "frame_number, item_alias, [attr_value1, attr_value2]",
          },
        ],
        schedule_type: [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job",
          ],
        ],
        schedule_alias: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        schedule_format: [["CR", "Deforum"]],
      },
    },
    output: ["SCHEDULE", "STRING"],
    output_is_list: [false, false],
    output_name: ["SCHEDULE", "show_help"],
    name: "CR Simple Schedule",
    display_name: "📋 CR Simple Schedule",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    output_node: false,
  },
  "CR Central Schedule": {
    input: {
      required: {
        schedule_1: [
          "STRING",
          {
            multiline: true,
            default: "schedule",
          },
        ],
        schedule_type1: [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job",
          ],
        ],
        schedule_alias1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        schedule_2: [
          "STRING",
          {
            multiline: true,
            default: "schedule",
          },
        ],
        schedule_type2: [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job",
          ],
        ],
        schedule_alias2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        schedule_3: [
          "STRING",
          {
            multiline: true,
            default: "schedule",
          },
        ],
        schedule_type3: [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job",
          ],
        ],
        schedule_alias3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        schedule_format: [["CR", "Deforum"]],
      },
      optional: {
        schedule: ["SCHEDULE"],
      },
    },
    output: ["SCHEDULE", "STRING"],
    output_is_list: [false, false],
    output_name: ["SCHEDULE", "show_text"],
    name: "CR Central Schedule",
    display_name: "📋 CR Central Schedule",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    output_node: false,
  },
  "CR Combine Schedules": {
    input: {
      required: {},
      optional: {
        schedule_1: ["SCHEDULE"],
        schedule_2: ["SCHEDULE"],
        schedule_3: ["SCHEDULE"],
        schedule_4: ["SCHEDULE"],
      },
    },
    output: ["SCHEDULE", "STRING"],
    output_is_list: [false, false],
    output_name: ["SCHEDULE", "show_text"],
    name: "CR Combine Schedules",
    display_name: "📋 CR Combine Schedules",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    output_node: false,
  },
  "CR Output Schedule To File": {
    input: {
      required: {
        output_file_path: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        file_name: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        file_extension: [["txt", "csv"]],
        schedule: ["SCHEDULE"],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "CR Output Schedule To File",
    display_name: "📋 CR Output Schedule To File",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    output_node: true,
  },
  "CR Load Schedule From File": {
    input: {
      required: {
        input_file_path: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        file_name: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        file_extension: [["txt", "csv"]],
      },
    },
    output: ["SCHEDULE", "STRING"],
    output_is_list: [false, false],
    output_name: ["SCHEDULE", "show_text"],
    name: "CR Load Schedule From File",
    display_name: "📋 CR Load Schedule From File",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    output_node: false,
  },
  "CR Schedule Input Switch": {
    input: {
      required: {
        Input: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 2,
          },
        ],
        schedule1: ["SCHEDULE"],
        schedule2: ["SCHEDULE"],
      },
    },
    output: ["SCHEDULE", "STRING"],
    output_is_list: [false, false],
    output_name: ["SCHEDULE", "show_help"],
    name: "CR Schedule Input Switch",
    display_name: "📋 CR Schedule Input Switch",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    output_node: true,
  },
  "CR Bit Schedule": {
    input: {
      required: {
        binary_string: [
          "STRING",
          {
            multiline: true,
            default: "",
          },
        ],
        interval: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 99999,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["SCHEDULE", "show_text"],
    name: "CR Bit Schedule",
    display_name: "📋 CR Bit Schedule",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    output_node: false,
  },
  "CR Simple Value Scheduler": {
    input: {
      required: {
        schedule: [
          "STRING",
          {
            multiline: true,
            default: "frame_number, value",
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["INT", "FLOAT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["INT", "FLOAT", "show_help"],
    name: "CR Simple Value Scheduler",
    display_name: "📑 CR Simple Value Scheduler",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    output_node: false,
  },
  "CR Simple Text Scheduler": {
    input: {
      required: {
        schedule: [
          "STRING",
          {
            multiline: true,
            default: "frame_number, text",
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Simple Text Scheduler",
    display_name: "📑 CR Simple Text Scheduler",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    output_node: false,
  },
  "CR Value Scheduler": {
    input: {
      required: {
        mode: [["Default Value", "Schedule"]],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        schedule_alias: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        default_value: [
          "FLOAT",
          {
            default: 1,
            min: -9999,
            max: 9999,
            step: 0.01,
          },
        ],
        schedule_format: [["CR", "Deforum"]],
      },
      optional: {
        schedule: ["SCHEDULE"],
      },
    },
    output: ["INT", "FLOAT", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["INT", "FLOAT", "show_help"],
    name: "CR Value Scheduler",
    display_name: "📑 CR Value Scheduler",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    output_node: false,
  },
  "CR Text Scheduler": {
    input: {
      required: {
        mode: [["Default Text", "Schedule"]],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        schedule_alias: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        default_text: [
          "STRING",
          {
            multiline: false,
            default: "default text",
          },
        ],
        schedule_format: [["CR", "Deforum"]],
      },
      optional: {
        schedule: ["SCHEDULE"],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Text Scheduler",
    display_name: "📑 CR Text Scheduler",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    output_node: false,
  },
  "CR Load Scheduled Models": {
    input: {
      required: {
        mode: [["Load default Model", "Schedule"]],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        schedule_alias: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        default_model: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        schedule_format: [["CR", "Deforum"]],
      },
      optional: {
        model_list: ["MODEL_LIST"],
        schedule: ["SCHEDULE"],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "show_help"],
    name: "CR Load Scheduled Models",
    display_name: "📑 CR Load Scheduled Models",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    output_node: false,
  },
  "CR Load Scheduled LoRAs": {
    input: {
      required: {
        mode: [["Off", "Load default LoRA", "Schedule"]],
        model: ["MODEL"],
        clip: ["CLIP"],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        schedule_alias: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        default_lora: [
          [
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        schedule_format: [["CR", "Deforum"]],
      },
      optional: {
        lora_list: ["LORA_LIST"],
        schedule: ["SCHEDULE"],
      },
    },
    output: ["MODEL", "CLIP", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "show_help"],
    name: "CR Load Scheduled LoRAs",
    display_name: "📑 CR Load Scheduled LoRAs",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    output_node: false,
  },
  "CR Prompt Scheduler": {
    input: {
      required: {
        mode: [["Default Prompt", "Keyframe List", "Schedule"]],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        default_prompt: [
          "STRING",
          {
            multiline: false,
            default: "default prompt",
          },
        ],
        schedule_format: [["CR", "Deforum"]],
        interpolate_prompt: [["Yes", "No"]],
      },
      optional: {
        schedule: ["SCHEDULE"],
        schedule_alias: [
          "STRING",
          {
            "default prompt": "",
            multiline: false,
          },
        ],
        keyframe_list: [
          "STRING",
          {
            multiline: true,
            default: "keyframe list",
          },
        ],
        prepend_text: [
          "STRING",
          {
            multiline: true,
            default: "prepend text",
          },
        ],
        append_text: [
          "STRING",
          {
            multiline: true,
            default: "append text",
          },
        ],
      },
    },
    output: ["STRING", "STRING", "FLOAT", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["current_prompt", "next_prompt", "weight", "show_help"],
    name: "CR Prompt Scheduler",
    display_name: "📑 CR Prompt Scheduler",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    output_node: false,
  },
  "CR Simple Prompt Scheduler": {
    input: {
      required: {
        keyframe_list: [
          "STRING",
          {
            multiline: true,
            default: "frame_number, text",
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        keyframe_format: [["CR", "Deforum"]],
      },
    },
    output: ["STRING", "STRING", "FLOAT", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["current_prompt", "next_prompt", "weight", "show_help"],
    name: "CR Simple Prompt Scheduler",
    display_name: "📑 CR Simple Prompt Scheduler",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    output_node: false,
  },
  "CR Keyframe List": {
    input: {
      required: {
        keyframe_list: [
          "STRING",
          {
            multiline: true,
            default: "keyframes",
          },
        ],
        keyframe_format: [["Deforum", "CR"]],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["keyframe_list", "show_help"],
    name: "CR Keyframe List",
    display_name: "📝 CR Keyframe List",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📝 Prompt",
    output_node: false,
  },
  "CR Encode Scheduled Prompts": {
    input: {
      required: {
        clip: ["CLIP"],
        current_prompt: [
          "STRING",
          {
            multiline: true,
          },
        ],
        next_prompt: [
          "STRING",
          {
            multiline: true,
          },
        ],
        weight: [
          "FLOAT",
          {
            default: 0,
            min: -9999,
            max: 9999,
            step: 0.01,
          },
        ],
      },
    },
    output: ["CONDITIONING", "STRING"],
    output_is_list: [false, false],
    output_name: ["CONDITIONING", "show_help"],
    name: "CR Encode Scheduled Prompts",
    display_name: "📝 CR Encode Scheduled Prompts",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/📝 Prompt",
    output_node: false,
  },
  "CR Gradient Float": {
    input: {
      required: {
        start_value: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 0.01,
          },
        ],
        end_value: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 0.01,
          },
        ],
        start_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        frame_duration: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        gradient_profile: [["Lerp"]],
      },
    },
    output: ["FLOAT", "STRING"],
    output_is_list: [false, false],
    output_name: ["FLOAT", "show_help"],
    name: "CR Gradient Float",
    display_name: "🔢 CR Gradient Float",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    output_node: false,
  },
  "CR Gradient Integer": {
    input: {
      required: {
        start_value: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        end_value: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        start_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        frame_duration: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        gradient_profile: [["Lerp"]],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["INT", "show_help"],
    name: "CR Gradient Integer",
    display_name: "🔢 CR Gradient Integer",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    output_node: false,
  },
  "CR Increment Float": {
    input: {
      required: {
        start_value: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 0.001,
          },
        ],
        step: [
          "FLOAT",
          {
            default: 0.1,
            min: -9999,
            max: 9999,
            step: 0.001,
          },
        ],
        start_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        frame_duration: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["FLOAT", "STRING"],
    output_is_list: [false, false],
    output_name: ["FLOAT", "show_help"],
    name: "CR Increment Float",
    display_name: "🔢 CR Increment Float",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    output_node: true,
  },
  "CR Increment Integer": {
    input: {
      required: {
        start_value: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        step: [
          "INT",
          {
            default: 1,
            min: -9999,
            max: 9999,
            step: 1,
          },
        ],
        start_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        frame_duration: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["INT", "STRING"],
    output_is_list: [false, false],
    output_name: ["INT", "show_help"],
    name: "CR Increment Integer",
    display_name: "🔢 CR Increment Integer",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    output_node: true,
  },
  "CR Interpolate Latents": {
    input: {
      required: {
        latent1: ["LATENT"],
        latent2: ["LATENT"],
        weight: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        method: [["lerp"]],
      },
    },
    output: ["LATENT", "STRING"],
    output_is_list: [false, false],
    output_name: ["LATENT", "show_help"],
    name: "CR Interpolate Latents",
    display_name: "🔢 CR Interpolate Latents",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    output_node: false,
  },
  "CR Debatch Frames": {
    input: {
      required: {
        frames: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [true],
    output_name: ["debatched_frames"],
    name: "CR Debatch Frames",
    display_name: "🛠️ CR Debatch Frames",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/🛠️ Utils",
    output_node: false,
  },
  "CR Current Frame": {
    input: {
      required: {
        index: [
          "INT",
          {
            default: 1,
            min: -10000,
            max: 10000,
          },
        ],
        print_to_console: [["Yes", "No"]],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["index"],
    name: "CR Current Frame",
    display_name: "🛠️ CR Current Frame",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/🛠️ Utils",
    output_node: false,
  },
  "CR Load Animation Frames": {
    input: {
      required: {
        image_sequence_folder: [[]],
        start_index: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10000,
          },
        ],
        max_frames: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 10000,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Load Animation Frames",
    display_name: "⌨️ CR Load Animation Frames",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/⌨️ IO",
    output_node: false,
  },
  "CR Load Flow Frames": {
    input: {
      required: {
        input_folder: [[]],
        sort_by: [["Index", "Alphabetic"]],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10000,
            forceInput: true,
          },
        ],
        skip_start_frames: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10000,
          },
        ],
      },
      optional: {
        input_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        file_pattern: [
          "STRING",
          {
            default: "*.png",
            multiline: false,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE", "INT", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: [
      "current_image",
      "previous_image",
      "current_frame",
      "show_help",
    ],
    name: "CR Load Flow Frames",
    display_name: "⌨️ CR Load Flow Frames",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/⌨️ IO",
    output_node: false,
  },
  "CR Output Flow Frames": {
    input: {
      required: {
        output_folder: [[]],
        current_image: ["IMAGE"],
        filename_prefix: [
          "STRING",
          {
            default: "CR",
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999999,
            forceInput: true,
          },
        ],
      },
      optional: {
        interpolated_img: ["IMAGE"],
        output_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "CR Output Flow Frames",
    display_name: "⌨️ CR Output Flow Frames",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/⌨️ IO",
    output_node: true,
  },
  "CR Prompt List Keyframes": {
    input: {
      required: {
        prompt_list: ["PROMPT_LIST"],
        keyframe_format: [["Deforum"]],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["keyframe_list", "show_help"],
    name: "CR Prompt List Keyframes",
    display_name: "CR Prompt List Keyframes (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Simple Prompt List": {
    input: {
      required: {
        prompt_1: [
          "STRING",
          {
            multiline: true,
            default: "prompt",
          },
        ],
        prompt_2: [
          "STRING",
          {
            multiline: true,
            default: "prompt",
          },
        ],
        prompt_3: [
          "STRING",
          {
            multiline: true,
            default: "prompt",
          },
        ],
        prompt_4: [
          "STRING",
          {
            multiline: true,
            default: "prompt",
          },
        ],
        prompt_5: [
          "STRING",
          {
            multiline: true,
            default: "prompt",
          },
        ],
      },
      optional: {
        simple_prompt_list: ["SIMPLE_PROMPT_LIST"],
      },
    },
    output: ["SIMPLE_PROMPT_LIST", "STRING"],
    output_is_list: [false, false],
    output_name: ["SIMPLE_PROMPT_LIST", "show_help"],
    name: "CR Simple Prompt List",
    display_name: "CR Simple Prompt List (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Simple Prompt List Keyframes": {
    input: {
      required: {
        simple_prompt_list: ["SIMPLE_PROMPT_LIST"],
        keyframe_interval: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 999,
            step: 1,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        transition_type: [["Default"]],
        transition_speed: [["Default"]],
        transition_profile: [["Default"]],
        keyframe_format: [["Deforum"]],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["keyframe_list", "show_help"],
    name: "CR Simple Prompt List Keyframes",
    display_name: "CR Simple Prompt List Keyframes (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Cycle Models": {
    input: {
      required: {
        mode: [["Off", "Sequential"]],
        model: ["MODEL"],
        clip: ["CLIP"],
        model_list: ["MODEL_LIST"],
        frame_interval: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 999,
            step: 1,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "show_help"],
    name: "CR Cycle Models",
    display_name: "CR Cycle Models (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Cycle LoRAs": {
    input: {
      required: {
        mode: [["Off", "Sequential"]],
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_list: ["LORA_LIST"],
        frame_interval: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 999,
            step: 1,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "show_help"],
    name: "CR Cycle LoRAs",
    display_name: "CR Cycle LoRAs (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Cycle Text": {
    input: {
      required: {
        mode: [["Sequential"]],
        text_list: ["TEXT_LIST"],
        frame_interval: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 999,
            step: 1,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Cycle Text",
    display_name: "CR Cycle Text (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Cycle Text Simple": {
    input: {
      required: {
        mode: [["Sequential"]],
        frame_interval: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 999,
            step: 1,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
      optional: {
        text_1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_4: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_5: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_list_simple: ["TEXT_LIST_SIMPLE"],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["STRING", "show_help"],
    name: "CR Cycle Text Simple",
    display_name: "CR Cycle Text Simple (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Cycle Images": {
    input: {
      required: {
        mode: [["Sequential"]],
        image_list: ["IMAGE_LIST"],
        frame_interval: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 999,
            step: 1,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Cycle Images",
    display_name: "CR Cycle Images (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Cycle Images Simple": {
    input: {
      required: {
        mode: [["Sequential"]],
        frame_interval: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 999,
            step: 1,
          },
        ],
        loops: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 1000,
          },
        ],
        current_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
      },
      optional: {
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
        image_3: ["IMAGE"],
        image_4: ["IMAGE"],
        image_5: ["IMAGE"],
        image_list_simple: ["IMAGE_LIST_SIMPLE"],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "show_help"],
    name: "CR Cycle Images Simple",
    display_name: "CR Cycle Images Simple (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Model List": {
    input: {
      required: {
        ckpt_name1: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        alias1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        ckpt_name2: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        alias2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        ckpt_name3: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        alias3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        ckpt_name4: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        alias4: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        ckpt_name5: [
          [
            "None",
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        alias5: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
      optional: {
        model_list: ["MODEL_LIST"],
      },
    },
    output: ["MODEL_LIST", "STRING"],
    output_is_list: [false, false],
    output_name: ["MODEL_LIST", "show_text"],
    name: "CR Model List",
    display_name: "CR Model List (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR LoRA List": {
    input: {
      required: {
        lora_name1: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        alias1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        model_strength_1: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_strength_1: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        lora_name2: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        alias2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        model_strength_2: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_strength_2: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        lora_name3: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        alias3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        model_strength_3: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        clip_strength_3: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
      optional: {
        lora_list: ["lora_LIST"],
      },
    },
    output: ["LORA_LIST", "STRING"],
    output_is_list: [false, false],
    output_name: ["LORA_LIST", "show_text"],
    name: "CR LoRA List",
    display_name: "CR LoRA List (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Text List Simple": {
    input: {
      required: {},
      optional: {
        text_1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_4: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_5: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        text_list_simple: ["TEXT_LIST_SIMPLE"],
      },
    },
    output: ["TEXT_LIST_SIMPLE", "STRING"],
    output_is_list: [false, false],
    output_name: ["TEXT_LIST_SIMPLE", "show_help"],
    name: "CR Text List Simple",
    display_name: "CR Text List Simple (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Image List": {
    input: {
      required: {},
      optional: {
        image_1: ["IMAGE"],
        alias1: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        image_2: ["IMAGE"],
        alias2: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        image_3: ["IMAGE"],
        alias3: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        image_4: ["IMAGE"],
        alias4: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        image_5: ["IMAGE"],
        alias5: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        image_list: ["image_LIST"],
      },
    },
    output: ["IMAGE_LIST", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE_LIST", "show_help"],
    name: "CR Image List",
    display_name: "CR Image List (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  "CR Image List Simple": {
    input: {
      required: {},
      optional: {
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
        image_3: ["IMAGE"],
        image_4: ["IMAGE"],
        image_5: ["IMAGE"],
        image_list_simple: ["IMAGE_LIST_SIMPLE"],
      },
    },
    output: ["IMAGE_LIST_SIMPLE", "STRING"],
    output_is_list: [false, false],
    output_name: ["IMAGE_LIST_SIMPLE", "show_help"],
    name: "CR Image List Simple",
    display_name: "CR Image List Simple (Legacy)",
    description: "",
    category: "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    output_node: false,
  },
  IPAdapter: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        weight_type: [
          ["standard", "prompt is more important", "style transfer"],
        ],
      },
      optional: {
        attn_mask: ["MASK"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapter",
    display_name: "IPAdapter",
    description: "",
    category: "ipadapter",
    output_node: false,
  },
  IPAdapterAdvanced: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        combine_embeds: [
          ["concat", "add", "subtract", "average", "norm average"],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapterAdvanced",
    display_name: "IPAdapter Advanced",
    description: "",
    category: "ipadapter",
    output_node: false,
  },
  IPAdapterBatch: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
        encode_batch_size: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapterBatch",
    display_name: "IPAdapter Batch (Adv.)",
    description: "",
    category: "ipadapter",
    output_node: false,
  },
  IPAdapterFaceID: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        weight_faceidv2: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        combine_embeds: [
          ["concat", "add", "subtract", "average", "norm average"],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
        insightface: ["INSIGHTFACE"],
      },
    },
    output: ["MODEL", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["MODEL", "face_image"],
    name: "IPAdapterFaceID",
    display_name: "IPAdapter FaceID",
    description: "",
    category: "ipadapter/faceid",
    output_node: false,
  },
  IPAAdapterFaceIDBatch: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        weight_faceidv2: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        combine_embeds: [
          ["concat", "add", "subtract", "average", "norm average"],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
        insightface: ["INSIGHTFACE"],
      },
    },
    output: ["MODEL", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["MODEL", "face_image"],
    name: "IPAAdapterFaceIDBatch",
    display_name: "IPAdapter FaceID Batch",
    description: "",
    category: "ipadapter/faceid",
    output_node: false,
  },
  IPAdapterTiled: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        combine_embeds: [
          ["concat", "add", "subtract", "average", "norm average"],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        sharpening: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL", "IMAGE", "MASK"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "tiles", "masks"],
    name: "IPAdapterTiled",
    display_name: "IPAdapter Tiled",
    description: "",
    category: "ipadapter/tiled",
    output_node: false,
  },
  IPAdapterTiledBatch: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        sharpening: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
        encode_batch_size: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
          },
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL", "IMAGE", "MASK"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "tiles", "masks"],
    name: "IPAdapterTiledBatch",
    display_name: "IPAdapter Tiled Batch",
    description: "",
    category: "ipadapter/tiled",
    output_node: false,
  },
  IPAdapterEmbeds: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        pos_embed: ["EMBEDS"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        neg_embed: ["EMBEDS"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapterEmbeds",
    display_name: "IPAdapter Embeds",
    description: "",
    category: "ipadapter/embeds",
    output_node: false,
  },
  IPAdapterEmbedsBatch: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        pos_embed: ["EMBEDS"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        neg_embed: ["EMBEDS"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapterEmbedsBatch",
    display_name: "IPAdapter Embeds Batch",
    description: "",
    category: "ipadapter/embeds",
    output_node: false,
  },
  IPAdapterStyleComposition: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image_style: ["IMAGE"],
        image_composition: ["IMAGE"],
        weight_style: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        weight_composition: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        expand_style: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        combine_embeds: [
          ["concat", "add", "subtract", "average", "norm average"],
          {
            default: "average",
          },
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapterStyleComposition",
    display_name: "IPAdapter Style & Composition SDXL",
    description: "",
    category: "ipadapter/style_composition",
    output_node: false,
  },
  IPAdapterStyleCompositionBatch: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image_style: ["IMAGE"],
        image_composition: ["IMAGE"],
        weight_style: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        weight_composition: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        expand_style: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapterStyleCompositionBatch",
    display_name: "IPAdapter Style & Composition Batch SDXL",
    description: "",
    category: "ipadapter/style_composition",
    output_node: false,
  },
  IPAdapterMS: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        weight_faceidv2: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 5,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        combine_embeds: [
          ["concat", "add", "subtract", "average", "norm average"],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
        layer_weights: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        attn_mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
        insightface: ["INSIGHTFACE"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapterMS",
    display_name: "IPAdapter Mad Scientist",
    description: "",
    category: "ipadapter/dev",
    output_node: false,
  },
  IPAdapterFromParams: {
    input: {
      required: {
        model: ["MODEL"],
        ipadapter: ["IPADAPTER"],
        ipadapter_params: ["IPADAPTER_PARAMS"],
        combine_embeds: [
          ["concat", "add", "subtract", "average", "norm average"],
        ],
        embeds_scaling: [
          ["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"],
        ],
      },
      optional: {
        image_negative: ["IMAGE"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "IPAdapterFromParams",
    display_name: "IPAdapter from Params",
    description: "",
    category: "ipadapter/params",
    output_node: false,
  },
  IPAdapterUnifiedLoader: {
    input: {
      required: {
        model: ["MODEL"],
        preset: [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
          ],
        ],
      },
      optional: {
        ipadapter: ["IPADAPTER"],
      },
    },
    output: ["MODEL", "IPADAPTER"],
    output_is_list: [false, false],
    output_name: ["model", "ipadapter"],
    name: "IPAdapterUnifiedLoader",
    display_name: "IPAdapter Unified Loader",
    description: "",
    category: "ipadapter",
    output_node: false,
  },
  IPAdapterUnifiedLoaderFaceID: {
    input: {
      required: {
        model: ["MODEL"],
        preset: [
          [
            "FACEID",
            "FACEID PLUS - SD1.5 only",
            "FACEID PLUS V2",
            "FACEID PORTRAIT (style transfer)",
            "FACEID PORTRAIT UNNORM - SDXL only (strong)",
          ],
        ],
        lora_strength: [
          "FLOAT",
          {
            default: 0.6,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        provider: [["CPU", "CUDA", "ROCM", "DirectML", "OpenVINO", "CoreML"]],
      },
      optional: {
        ipadapter: ["IPADAPTER"],
      },
    },
    output: ["MODEL", "IPADAPTER"],
    output_is_list: [false, false],
    output_name: ["MODEL", "ipadapter"],
    name: "IPAdapterUnifiedLoaderFaceID",
    display_name: "IPAdapter Unified Loader FaceID",
    description: "",
    category: "ipadapter/faceid",
    output_node: false,
  },
  IPAdapterModelLoader: {
    input: {
      required: {
        ipadapter_file: [
          [
            "ip-adapter-full-face_sd15.safetensors",
            "ip-adapter-plus-face_sd15.safetensors",
            "ip-adapter-plus-face_sdxl_vit-h.safetensors",
            "ip-adapter-plus_sd15.safetensors",
            "ip-adapter-plus_sdxl_vit-h.safetensors",
            "ip-adapter_sd15.safetensors",
            "ip-adapter_sd15_light_v11.bin",
            "ip-adapter_sd15_vit-G.safetensors",
            "ip-adapter_sdxl.safetensors",
            "ip-adapter_sdxl_vit-h.safetensors",
          ],
        ],
      },
    },
    output: ["IPADAPTER"],
    output_is_list: [false],
    output_name: ["IPADAPTER"],
    name: "IPAdapterModelLoader",
    display_name: "IPAdapter Model Loader",
    description: "",
    category: "ipadapter/loaders",
    output_node: false,
  },
  IPAdapterInsightFaceLoader: {
    input: {
      required: {
        provider: [["CPU", "CUDA", "ROCM"]],
      },
    },
    output: ["INSIGHTFACE"],
    output_is_list: [false],
    output_name: ["INSIGHTFACE"],
    name: "IPAdapterInsightFaceLoader",
    display_name: "IPAdapter InsightFace Loader",
    description: "",
    category: "ipadapter/loaders",
    output_node: false,
  },
  IPAdapterUnifiedLoaderCommunity: {
    input: {
      required: {
        model: ["MODEL"],
        preset: [["Composition"]],
      },
      optional: {
        ipadapter: ["IPADAPTER"],
      },
    },
    output: ["MODEL", "IPADAPTER"],
    output_is_list: [false, false],
    output_name: ["model", "ipadapter"],
    name: "IPAdapterUnifiedLoaderCommunity",
    display_name: "IPAdapter Unified Loader Community",
    description: "",
    category: "ipadapter/loaders",
    output_node: false,
  },
  IPAdapterEncoder: {
    input: {
      required: {
        ipadapter: ["IPADAPTER"],
        image: ["IMAGE"],
        weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.01,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
        clip_vision: ["CLIP_VISION"],
      },
    },
    output: ["EMBEDS", "EMBEDS"],
    output_is_list: [false, false],
    output_name: ["pos_embed", "neg_embed"],
    name: "IPAdapterEncoder",
    display_name: "IPAdapter Encoder",
    description: "",
    category: "ipadapter/embeds",
    output_node: false,
  },
  IPAdapterCombineEmbeds: {
    input: {
      required: {
        embed1: ["EMBEDS"],
        method: [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average",
            "max",
            "min",
          ],
        ],
      },
      optional: {
        embed2: ["EMBEDS"],
        embed3: ["EMBEDS"],
        embed4: ["EMBEDS"],
        embed5: ["EMBEDS"],
      },
    },
    output: ["EMBEDS"],
    output_is_list: [false],
    output_name: ["EMBEDS"],
    name: "IPAdapterCombineEmbeds",
    display_name: "IPAdapter Combine Embeds",
    description: "",
    category: "ipadapter/embeds",
    output_node: false,
  },
  IPAdapterNoise: {
    input: {
      required: {
        type: [["fade", "dissolve", "gaussian", "shuffle"]],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        blur: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 32,
            step: 1,
          },
        ],
      },
      optional: {
        image_optional: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "IPAdapterNoise",
    display_name: "IPAdapter Noise",
    description: "",
    category: "ipadapter/utils",
    output_node: false,
  },
  PrepImageForClipVision: {
    input: {
      required: {
        image: ["IMAGE"],
        interpolation: [
          ["LANCZOS", "BICUBIC", "HAMMING", "BILINEAR", "BOX", "NEAREST"],
        ],
        crop_position: [["top", "bottom", "left", "right", "center", "pad"]],
        sharpening: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "PrepImageForClipVision",
    display_name: "Prep Image For ClipVision",
    description: "",
    category: "ipadapter/utils",
    output_node: false,
  },
  IPAdapterSaveEmbeds: {
    input: {
      required: {
        embeds: ["EMBEDS"],
        filename_prefix: [
          "STRING",
          {
            default: "IP_embeds",
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "IPAdapterSaveEmbeds",
    display_name: "IPAdapter Save Embeds",
    description: "",
    category: "ipadapter/embeds",
    output_node: true,
  },
  IPAdapterLoadEmbeds: {
    input: {
      required: {
        embeds: [[]],
      },
    },
    output: ["EMBEDS"],
    output_is_list: [false],
    output_name: ["EMBEDS"],
    name: "IPAdapterLoadEmbeds",
    display_name: "IPAdapter Load Embeds",
    description: "",
    category: "ipadapter/embeds",
    output_node: false,
  },
  IPAdapterWeights: {
    input: {
      required: {
        weights: [
          "STRING",
          {
            default: "1.0, 0.0",
            multiline: true,
          },
        ],
        timing: [
          ["custom", "linear", "ease_in_out", "ease_in", "ease_out", "random"],
          {
            default: "linear",
          },
        ],
        frames: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        start_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        end_frame: [
          "INT",
          {
            default: 9999,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        add_starting_frames: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        add_ending_frames: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 9999,
            step: 1,
          },
        ],
        method: [
          ["full batch", "shift batches", "alternate batches"],
          {
            default: "full batch",
          },
        ],
      },
      optional: {
        image: ["IMAGE"],
      },
    },
    output: ["FLOAT", "FLOAT", "INT", "IMAGE", "IMAGE", "WEIGHTS_STRATEGY"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "weights",
      "weights_invert",
      "total_frames",
      "image_1",
      "image_2",
      "weights_strategy",
    ],
    name: "IPAdapterWeights",
    display_name: "IPAdapter Weights",
    description: "",
    category: "ipadapter/weights",
    output_node: false,
  },
  IPAdapterCombineWeights: {
    input: {
      required: {
        weights_1: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        weights_2: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
      },
    },
    output: ["FLOAT", "INT"],
    output_is_list: [false, false],
    output_name: ["weights", "count"],
    name: "IPAdapterCombineWeights",
    display_name: "IPAdapter Combine Weights",
    description: "",
    category: "ipadapter/utils",
    output_node: false,
  },
  IPAdapterWeightsFromStrategy: {
    input: {
      required: {
        weights_strategy: ["WEIGHTS_STRATEGY"],
      },
      optional: {
        image: ["IMAGE"],
      },
    },
    output: ["FLOAT", "FLOAT", "INT", "IMAGE", "IMAGE", "WEIGHTS_STRATEGY"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "weights",
      "weights_invert",
      "total_frames",
      "image_1",
      "image_2",
      "weights_strategy",
    ],
    name: "IPAdapterWeightsFromStrategy",
    display_name: "IPAdapter Weights From Strategy",
    description: "",
    category: "ipadapter/weights",
    output_node: false,
  },
  IPAdapterPromptScheduleFromWeightsStrategy: {
    input: {
      required: {
        weights_strategy: ["WEIGHTS_STRATEGY"],
        prompt: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["prompt_schedule"],
    name: "IPAdapterPromptScheduleFromWeightsStrategy",
    display_name: "Prompt Schedule From Weights Strategy",
    description: "",
    category: "ipadapter/weights",
    output_node: false,
  },
  IPAdapterRegionalConditioning: {
    input: {
      required: {
        image: ["IMAGE"],
        image_weight: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 3,
            step: 0.05,
          },
        ],
        prompt_weight: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 10,
            step: 0.05,
          },
        ],
        weight_type: [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
          ],
        ],
        start_at: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        end_at: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
      optional: {
        mask: ["MASK"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
      },
    },
    output: ["IPADAPTER_PARAMS", "CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false, false],
    output_name: ["IPADAPTER_PARAMS", "POSITIVE", "NEGATIVE"],
    name: "IPAdapterRegionalConditioning",
    display_name: "IPAdapter Regional Conditioning",
    description: "",
    category: "ipadapter/params",
    output_node: false,
  },
  IPAdapterCombineParams: {
    input: {
      required: {
        params_1: ["IPADAPTER_PARAMS"],
        params_2: ["IPADAPTER_PARAMS"],
      },
      optional: {
        params_3: ["IPADAPTER_PARAMS"],
        params_4: ["IPADAPTER_PARAMS"],
        params_5: ["IPADAPTER_PARAMS"],
      },
    },
    output: ["IPADAPTER_PARAMS"],
    output_is_list: [false],
    output_name: ["IPADAPTER_PARAMS"],
    name: "IPAdapterCombineParams",
    display_name: "IPAdapter Combine Params",
    description: "",
    category: "ipadapter/params",
    output_node: false,
  },
  UltimateSDUpscale: {
    input: {
      required: {
        image: ["IMAGE"],
        model: ["MODEL"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        vae: ["VAE"],
        upscale_by: [
          "FLOAT",
          {
            default: 2,
            min: 0.05,
            max: 4,
            step: 0.05,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
            step: 1,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        upscale_model: ["UPSCALE_MODEL"],
        mode_type: [["Linear", "Chess", "None"]],
        tile_width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 8,
          },
        ],
        tile_height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 8,
          },
        ],
        mask_blur: [
          "INT",
          {
            default: 8,
            min: 0,
            max: 64,
            step: 1,
          },
        ],
        tile_padding: [
          "INT",
          {
            default: 32,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        seam_fix_mode: [
          ["None", "Band Pass", "Half Tile", "Half Tile + Intersections"],
        ],
        seam_fix_denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        seam_fix_width: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        seam_fix_mask_blur: [
          "INT",
          {
            default: 8,
            min: 0,
            max: 64,
            step: 1,
          },
        ],
        seam_fix_padding: [
          "INT",
          {
            default: 16,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        force_uniform_tiles: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        tiled_decode: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "UltimateSDUpscale",
    display_name: "Ultimate SD Upscale",
    description: "",
    category: "image/upscaling",
    output_node: false,
  },
  UltimateSDUpscaleNoUpscale: {
    input: {
      required: {
        upscaled_image: ["IMAGE"],
        model: ["MODEL"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        vae: ["VAE"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
            step: 1,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        denoise: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        mode_type: [["Linear", "Chess", "None"]],
        tile_width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 8,
          },
        ],
        tile_height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 8,
          },
        ],
        mask_blur: [
          "INT",
          {
            default: 8,
            min: 0,
            max: 64,
            step: 1,
          },
        ],
        tile_padding: [
          "INT",
          {
            default: 32,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        seam_fix_mode: [
          ["None", "Band Pass", "Half Tile", "Half Tile + Intersections"],
        ],
        seam_fix_denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        seam_fix_width: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        seam_fix_mask_blur: [
          "INT",
          {
            default: 8,
            min: 0,
            max: 64,
            step: 1,
          },
        ],
        seam_fix_padding: [
          "INT",
          {
            default: 16,
            min: 0,
            max: 8192,
            step: 8,
          },
        ],
        force_uniform_tiles: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        tiled_decode: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "UltimateSDUpscaleNoUpscale",
    display_name: "Ultimate SD Upscale (No Upscale)",
    description: "",
    category: "image/upscaling",
    output_node: false,
  },
  "CLIPTextEncodeSDXL+": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        height: [
          "INT",
          {
            default: 1024,
            min: 0,
            max: 16384,
          },
        ],
        size_cond_factor: [
          "INT",
          {
            default: 4,
            min: 1,
            max: 16,
          },
        ],
        text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
            default: "",
          },
        ],
        clip: ["CLIP"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "CLIPTextEncodeSDXL+",
    display_name: "🔧 SDXL CLIPTextEncode",
    description: "",
    category: "essentials/conditioning",
    output_node: false,
  },
  "ConditioningCombineMultiple+": {
    input: {
      required: {
        conditioning_1: ["CONDITIONING"],
        conditioning_2: ["CONDITIONING"],
      },
      optional: {
        conditioning_3: ["CONDITIONING"],
        conditioning_4: ["CONDITIONING"],
        conditioning_5: ["CONDITIONING"],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "ConditioningCombineMultiple+",
    display_name: "🔧 Cond Combine Multiple",
    description: "",
    category: "essentials/conditioning",
    output_node: false,
  },
  "SD3NegativeConditioning+": {
    input: {
      required: {
        conditioning: ["CONDITIONING"],
        end: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "SD3NegativeConditioning+",
    display_name: "🔧 SD3 Negative Conditioning",
    description: "",
    category: "essentials/conditioning",
    output_node: false,
  },
  "ImageEnhanceDifference+": {
    input: {
      required: {
        image1: ["IMAGE"],
        image2: ["IMAGE"],
        exponent: [
          "FLOAT",
          {
            default: 0.75,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageEnhanceDifference+",
    display_name: "🔧 Image Enhance Difference",
    description: "",
    category: "essentials/image analysis",
    output_node: false,
  },
  "ImageBatchMultiple+": {
    input: {
      required: {
        image_1: ["IMAGE"],
        image_2: ["IMAGE"],
        method: [
          ["nearest-exact", "bilinear", "area", "bicubic", "lanczos"],
          {
            default: "lanczos",
          },
        ],
      },
      optional: {
        image_3: ["IMAGE"],
        image_4: ["IMAGE"],
        image_5: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageBatchMultiple+",
    display_name: "🔧 Images Batch Multiple",
    description: "",
    category: "essentials/image batch",
    output_node: false,
  },
  "ImageExpandBatch+": {
    input: {
      required: {
        image: ["IMAGE"],
        size: [
          "INT",
          {
            default: 16,
            min: 1,
            step: 1,
          },
        ],
        method: [["expand", "repeat all", "repeat first", "repeat last"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageExpandBatch+",
    display_name: "🔧 Image Expand Batch",
    description: "",
    category: "essentials/image batch",
    output_node: false,
  },
  "ImageFromBatch+": {
    input: {
      required: {
        image: ["IMAGE"],
        start: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        length: [
          "INT",
          {
            default: -1,
            min: -1,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageFromBatch+",
    display_name: "🔧 Image From Batch",
    description: "",
    category: "essentials/image batch",
    output_node: false,
  },
  "ImageListToBatch+": {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageListToBatch+",
    display_name: "🔧 Image List To Batch",
    description: "",
    category: "essentials/image batch",
    output_node: false,
  },
  "ImageCompositeFromMaskBatch+": {
    input: {
      required: {
        image_from: ["IMAGE"],
        image_to: ["IMAGE"],
        mask: ["MASK"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageCompositeFromMaskBatch+",
    display_name: "🔧 Image Composite From Mask Batch",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "ImageCrop+": {
    input: {
      required: {
        image: ["IMAGE"],
        width: [
          "INT",
          {
            default: 256,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 256,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        position: [
          [
            "top-left",
            "top-center",
            "top-right",
            "right-center",
            "bottom-right",
            "bottom-center",
            "bottom-left",
            "left-center",
            "center",
          ],
        ],
        x_offset: [
          "INT",
          {
            default: 0,
            min: -99999,
            step: 1,
          },
        ],
        y_offset: [
          "INT",
          {
            default: 0,
            min: -99999,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "x", "y"],
    name: "ImageCrop+",
    display_name: "🔧 Image Crop",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "ImageFlip+": {
    input: {
      required: {
        image: ["IMAGE"],
        axis: [["x", "y", "xy"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageFlip+",
    display_name: "🔧 Image Flip",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "ImageRandomTransform+": {
    input: {
      required: {
        image: ["IMAGE"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        repeat: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 256,
            step: 1,
          },
        ],
        variation: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageRandomTransform+",
    display_name: "🔧 Image Random Transform",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "ImageRemoveAlpha+": {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageRemoveAlpha+",
    display_name: "🔧 Image Remove Alpha",
    description: "",
    category: "essentials/image utils",
    output_node: false,
  },
  "ImageRemoveBackground+": {
    input: {
      required: {
        rembg_session: ["REMBG_SESSION"],
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "ImageRemoveBackground+",
    display_name: "🔧 Image Remove Background",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "ImageResize+": {
    input: {
      required: {
        image: ["IMAGE"],
        width: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        interpolation: [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "area",
            "nearest-exact",
            "lanczos",
          ],
        ],
        method: [["stretch", "keep proportion", "fill / crop", "pad"]],
        condition: [
          [
            "always",
            "downscale if bigger",
            "upscale if smaller",
            "if bigger area",
            "if smaller area",
          ],
        ],
        multiple_of: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 512,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE", "width", "height"],
    name: "ImageResize+",
    display_name: "🔧 Image Resize",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "ImageSeamCarving+": {
    input: {
      required: {
        image: ["IMAGE"],
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        energy: [["backward", "forward"]],
        order: [["width-first", "height-first"]],
      },
      optional: {
        keep_mask: ["MASK"],
        drop_mask: ["MASK"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageSeamCarving+",
    display_name: "🔧 Image Seam Carving",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "ImageTile+": {
    input: {
      required: {
        image: ["IMAGE"],
        rows: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 256,
            step: 1,
          },
        ],
        cols: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 256,
            step: 1,
          },
        ],
        overlap: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 0.5,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageTile+",
    display_name: "🔧 Image Tile",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "RemBGSession+": {
    input: {
      required: {
        model: [
          [
            "u2net: general purpose",
            "u2netp: lightweight general purpose",
            "u2net_human_seg: human segmentation",
            "u2net_cloth_seg: cloths Parsing",
            "silueta: very small u2net",
            "isnet-general-use: general purpose",
            "isnet-anime: anime illustrations",
            "sam: general purpose",
          ],
        ],
        providers: [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML",
            "Tensorrt",
            "Azure",
          ],
        ],
      },
    },
    output: ["REMBG_SESSION"],
    output_is_list: [false],
    output_name: ["REMBG_SESSION"],
    name: "RemBGSession+",
    display_name: "🔧 RemBG Session",
    description: "",
    category: "essentials/image manipulation",
    output_node: false,
  },
  "ImageApplyLUT+": {
    input: {
      required: {
        image: ["IMAGE"],
        lut_file: [[]],
        gamma_correction: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        clip_values: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageApplyLUT+",
    display_name: "🔧 Image Apply LUT",
    description: "",
    category: "essentials/image processing",
    output_node: false,
  },
  "ImageCASharpening+": {
    input: {
      required: {
        image: ["IMAGE"],
        amount: [
          "FLOAT",
          {
            default: 0.8,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageCASharpening+",
    display_name: "🔧 Image Contrast Adaptive Sharpening",
    description: "",
    category: "essentials/image processing",
    output_node: false,
  },
  "ImageDesaturate+": {
    input: {
      required: {
        image: ["IMAGE"],
        factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        method: [
          [
            "luminance (Rec.709)",
            "luminance (Rec.601)",
            "average",
            "lightness",
          ],
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageDesaturate+",
    display_name: "🔧 Image Desaturate",
    description: "",
    category: "essentials/image processing",
    output_node: false,
  },
  "PixelOEPixelize+": {
    input: {
      required: {
        image: ["IMAGE"],
        downscale_mode: [
          ["contrast", "bicubic", "nearest", "center", "k-centroid"],
        ],
        target_size: [
          "INT",
          {
            default: 128,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        patch_size: [
          "INT",
          {
            default: 16,
            min: 4,
            max: 32,
            step: 2,
          },
        ],
        thickness: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 16,
            step: 1,
          },
        ],
        color_matching: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        upscale: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "PixelOEPixelize+",
    display_name: "🔧 Pixelize",
    description: "",
    category: "essentials/image processing",
    output_node: false,
  },
  "ImagePosterize+": {
    input: {
      required: {
        image: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImagePosterize+",
    display_name: "🔧 Image Posterize",
    description: "",
    category: "essentials/image processing",
    output_node: false,
  },
  "ImageColorMatch+": {
    input: {
      required: {
        image: ["IMAGE"],
        reference: ["IMAGE"],
        color_space: [["LAB", "YCbCr", "RGB", "LUV", "YUV", "XYZ"]],
        factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        device: [["auto", "cpu", "gpu"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageColorMatch+",
    display_name: "🔧 Image Color Match",
    description: "",
    category: "essentials/image processing",
    output_node: false,
  },
  "ImageHistogramMatch+": {
    input: {
      required: {
        image: ["IMAGE"],
        reference: ["IMAGE"],
        method: [["pytorch", "skimage"]],
        factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        device: [["auto", "cpu", "gpu"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageHistogramMatch+",
    display_name: "🔧 Image Histogram Match",
    description: "",
    category: "essentials/image processing",
    output_node: false,
  },
  "GetImageSize+": {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["INT", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["width", "height", "count"],
    name: "GetImageSize+",
    display_name: "🔧 Get Image Size",
    description: "",
    category: "essentials/image utils",
    output_node: false,
  },
  "ImageToDevice+": {
    input: {
      required: {
        image: ["IMAGE"],
        device: [["auto", "cpu", "gpu"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageToDevice+",
    display_name: "🔧 Image To Device",
    description: "",
    category: "essentials/image utils",
    output_node: false,
  },
  "MaskBlur+": {
    input: {
      required: {
        mask: ["MASK"],
        amount: [
          "INT",
          {
            default: 6,
            min: 0,
            max: 256,
            step: 1,
          },
        ],
        device: [["auto", "cpu", "gpu"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskBlur+",
    display_name: "🔧 Mask Blur",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskBoundingBox+": {
    input: {
      required: {
        mask: ["MASK"],
        padding: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        blur: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 256,
            step: 1,
          },
        ],
      },
      optional: {
        image_optional: ["IMAGE"],
      },
    },
    output: ["MASK", "IMAGE", "INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false, false, false],
    output_name: ["MASK", "IMAGE", "x", "y", "width", "height"],
    name: "MaskBoundingBox+",
    display_name: "🔧 Mask Bounding Box",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskFix+": {
    input: {
      required: {
        mask: ["MASK"],
        erode_dilate: [
          "INT",
          {
            default: 0,
            min: -256,
            max: 256,
            step: 1,
          },
        ],
        fill_holes: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 128,
            step: 1,
          },
        ],
        remove_isolated_pixels: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 32,
            step: 1,
          },
        ],
        smooth: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 256,
            step: 1,
          },
        ],
        blur: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 256,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskFix+",
    display_name: "🔧 Mask Fix",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskFlip+": {
    input: {
      required: {
        mask: ["MASK"],
        axis: [["x", "y", "xy"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskFlip+",
    display_name: "🔧 Mask Flip",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskFromColor+": {
    input: {
      required: {
        image: ["IMAGE"],
        red: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        green: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        blue: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        threshold: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 127,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskFromColor+",
    display_name: "🔧 Mask From Color",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskFromList+": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 32,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 32,
            min: 0,
            max: 16384,
            step: 8,
          },
        ],
      },
      optional: {
        values: [
          "INT,FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
          },
        ],
        str_values: [
          "STRING",
          {
            default: "",
            multiline: true,
            placeholder: "0.0, 0.5, 1.0",
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskFromList+",
    display_name: "🔧 Mask From List",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskFromRGBCMYBW+": {
    input: {
      required: {
        image: ["IMAGE"],
        threshold_r: [
          "FLOAT",
          {
            default: 0.15,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        threshold_g: [
          "FLOAT",
          {
            default: 0.15,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        threshold_b: [
          "FLOAT",
          {
            default: 0.15,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MASK", "MASK", "MASK", "MASK", "MASK", "MASK", "MASK", "MASK"],
    output_is_list: [false, false, false, false, false, false, false, false],
    output_name: [
      "red",
      "green",
      "blue",
      "cyan",
      "magenta",
      "yellow",
      "black",
      "white",
    ],
    name: "MaskFromRGBCMYBW+",
    display_name: "🔧 Mask From RGB/CMY/BW",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskFromSegmentation+": {
    input: {
      required: {
        image: ["IMAGE"],
        segments: [
          "INT",
          {
            default: 6,
            min: 1,
            max: 16,
            step: 1,
          },
        ],
        remove_isolated_pixels: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 32,
            step: 1,
          },
        ],
        remove_small_masks: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        fill_holes: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskFromSegmentation+",
    display_name: "🔧 Mask From Segmentation",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskPreview+": {
    input: {
      required: {
        mask: ["MASK"],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "MaskPreview+",
    display_name: "🔧 Mask Preview",
    description: "",
    category: "essentials/mask",
    output_node: true,
  },
  "MaskSmooth+": {
    input: {
      required: {
        mask: ["MASK"],
        amount: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 127,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskSmooth+",
    display_name: "🔧 Mask Smooth",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "TransitionMask+": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 1,
          },
        ],
        frames: [
          "INT",
          {
            default: 16,
            min: 1,
            max: 9999,
            step: 1,
          },
        ],
        start_frame: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        end_frame: [
          "INT",
          {
            default: 9999,
            min: 0,
            step: 1,
          },
        ],
        transition_type: [
          [
            "horizontal slide",
            "vertical slide",
            "horizontal bar",
            "vertical bar",
            "center box",
            "horizontal door",
            "vertical door",
            "circle",
            "fade",
          ],
        ],
        timing_function: [["linear", "in", "out", "in-out"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "TransitionMask+",
    display_name: "🔧 Transition Mask",
    description: "",
    category: "essentials/mask",
    output_node: false,
  },
  "MaskBatch+": {
    input: {
      required: {
        mask1: ["MASK"],
        mask2: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskBatch+",
    display_name: "🔧 Mask Batch",
    description: "",
    category: "essentials/mask batch",
    output_node: false,
  },
  "MaskExpandBatch+": {
    input: {
      required: {
        mask: ["MASK"],
        size: [
          "INT",
          {
            default: 16,
            min: 1,
            step: 1,
          },
        ],
        method: [["expand", "repeat all", "repeat first", "repeat last"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskExpandBatch+",
    display_name: "🔧 Mask Expand Batch",
    description: "",
    category: "essentials/mask batch",
    output_node: false,
  },
  "MaskFromBatch+": {
    input: {
      required: {
        mask: ["MASK"],
        start: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
        length: [
          "INT",
          {
            default: 1,
            min: 1,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "MaskFromBatch+",
    display_name: "🔧 Mask From Batch",
    description: "",
    category: "essentials/mask batch",
    output_node: false,
  },
  "KSamplerVariationsStochastic+": {
    input: {
      required: {
        model: ["MODEL"],
        latent_image: ["LATENT"],
        noise_seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 25,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 7,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        sampler: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        variation_seed: [
          "INT:seed",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        variation_strength: [
          "FLOAT",
          {
            default: 0.2,
            min: 0,
            max: 1,
            step: 0.05,
            round: 0.01,
          },
        ],
        cfg_scale: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.05,
            round: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "KSamplerVariationsStochastic+",
    display_name: "🔧 KSampler Stochastic Variations",
    description: "",
    category: "essentials/sampling",
    output_node: false,
  },
  "KSamplerVariationsWithNoise+": {
    input: {
      required: {
        model: ["MODEL"],
        latent_image: ["LATENT"],
        main_seed: [
          "INT:seed",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
            step: 0.1,
            round: 0.01,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        variation_strength: [
          "FLOAT",
          {
            default: 0.17,
            min: 0,
            max: 1,
            step: 0.01,
            round: 0.01,
          },
        ],
        variation_seed: [
          "INT:seed",
          {
            default: 12345,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
            round: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "KSamplerVariationsWithNoise+",
    display_name: "🔧 KSampler Variations with Noise Injection",
    description: "",
    category: "essentials/sampling",
    output_node: false,
  },
  "ApplyCLIPSeg+": {
    input: {
      required: {
        clip_seg: ["CLIP_SEG"],
        image: ["IMAGE"],
        prompt: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
        threshold: [
          "FLOAT",
          {
            default: 0.4,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        smooth: [
          "INT",
          {
            default: 9,
            min: 0,
            max: 32,
            step: 1,
          },
        ],
        dilate: [
          "INT",
          {
            default: 0,
            min: -32,
            max: 32,
            step: 1,
          },
        ],
        blur: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 64,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "ApplyCLIPSeg+",
    display_name: "🔧 Apply CLIPSeg",
    description: "",
    category: "essentials/segmentation",
    output_node: false,
  },
  "LoadCLIPSegModels+": {
    input: {
      required: {},
    },
    output: ["CLIP_SEG"],
    output_is_list: [false],
    output_name: ["CLIP_SEG"],
    name: "LoadCLIPSegModels+",
    display_name: "🔧 Load CLIPSeg Models",
    description: "",
    category: "essentials/segmentation",
    output_node: false,
  },
  "DrawText+": {
    input: {
      required: {
        text: [
          "STRING",
          {
            multiline: true,
            dynamicPrompts: true,
            default: "Hello, World!",
          },
        ],
        font: [[]],
        size: [
          "INT",
          {
            default: 56,
            min: 1,
            max: 9999,
            step: 1,
          },
        ],
        color: [
          "STRING",
          {
            multiline: false,
            default: "#FFFFFF",
          },
        ],
        background_color: [
          "STRING",
          {
            multiline: false,
            default: "#00000000",
          },
        ],
        shadow_distance: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        shadow_blur: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        shadow_color: [
          "STRING",
          {
            multiline: false,
            default: "#000000",
          },
        ],
        horizontal_align: [["left", "center", "right"]],
        vertical_align: [["top", "center", "bottom"]],
        offset_x: [
          "INT",
          {
            default: 0,
            min: -16384,
            max: 16384,
            step: 1,
          },
        ],
        offset_y: [
          "INT",
          {
            default: 0,
            min: -16384,
            max: 16384,
            step: 1,
          },
        ],
      },
      optional: {
        img_composite: ["IMAGE"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "DrawText+",
    display_name: "🔧 Draw Text",
    description: "",
    category: "essentials/text",
    output_node: false,
  },
  "BatchCount+": {
    input: {
      required: {
        batch: ["*", {}],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "BatchCount+",
    display_name: "🔧 Batch Count",
    description: "",
    category: "essentials/utilities",
    output_node: false,
  },
  "ConsoleDebug+": {
    input: {
      required: {
        value: ["*", {}],
      },
      optional: {
        prefix: [
          "STRING",
          {
            multiline: false,
            default: "Value:",
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "ConsoleDebug+",
    display_name: "🔧 Console Debug",
    description: "",
    category: "essentials/utilities",
    output_node: true,
  },
  "DebugTensorShape+": {
    input: {
      required: {
        tensor: ["*", {}],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "DebugTensorShape+",
    display_name: "🔧 Debug Tensor Shape",
    description: "",
    category: "essentials/utilities",
    output_node: true,
  },
  "ModelCompile+": {
    input: {
      required: {
        model: ["MODEL"],
        fullgraph: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        dynamic: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        mode: [
          [
            "default",
            "reduce-overhead",
            "max-autotune",
            "max-autotune-no-cudagraphs",
          ],
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "ModelCompile+",
    display_name: "🔧 Model Compile",
    description: "",
    category: "essentials/utilities",
    output_node: false,
  },
  "RemoveLatentMask+": {
    input: {
      required: {
        samples: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "RemoveLatentMask+",
    display_name: "🔧 Remove Latent Mask",
    description: "",
    category: "essentials/utilities",
    output_node: false,
  },
  "SDXLEmptyLatentSizePicker+": {
    input: {
      required: {
        resolution: [
          [
            "704x1408 (0.5)",
            "704x1344 (0.52)",
            "768x1344 (0.57)",
            "768x1280 (0.6)",
            "832x1216 (0.68)",
            "832x1152 (0.72)",
            "896x1152 (0.78)",
            "896x1088 (0.82)",
            "960x1088 (0.88)",
            "960x1024 (0.94)",
            "1024x1024 (1.0)",
            "1024x960 (1.07)",
            "1088x960 (1.13)",
            "1088x896 (1.21)",
            "1152x896 (1.29)",
            "1152x832 (1.38)",
            "1216x832 (1.46)",
            "1280x768 (1.67)",
            "1344x768 (1.75)",
            "1344x704 (1.91)",
            "1408x704 (2.0)",
            "1472x704 (2.09)",
            "1536x640 (2.4)",
            "1600x640 (2.5)",
            "1664x576 (2.89)",
            "1728x576 (3.0)",
          ],
          {
            default: "1024x1024 (1.0)",
          },
        ],
        batch_size: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 4096,
          },
        ],
      },
    },
    output: ["LATENT", "INT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["LATENT", "width", "height"],
    name: "SDXLEmptyLatentSizePicker+",
    display_name: "🔧 SDXL Empty Latent Size Picker",
    description: "",
    category: "essentials/utilities",
    output_node: false,
  },
  "SimpleMath+": {
    input: {
      optional: {
        a: [
          "INT,FLOAT",
          {
            default: 0,
            step: 0.1,
          },
        ],
        b: [
          "INT,FLOAT",
          {
            default: 0,
            step: 0.1,
          },
        ],
      },
      required: {
        value: [
          "STRING",
          {
            multiline: false,
            default: "",
          },
        ],
      },
    },
    output: ["INT", "FLOAT"],
    output_is_list: [false, false],
    output_name: ["INT", "FLOAT"],
    name: "SimpleMath+",
    display_name: "🔧 Simple Math",
    description: "",
    category: "essentials/utilities",
    output_node: false,
  },
  "Checkpoint Selector": {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: [
      [
        "checkpoints.safetensors",
        "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
        "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
        "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
        "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
        "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
        "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
        "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
        "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
        "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
        "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
        "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
        "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
        "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
        "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
        "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
        "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
        "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
      ],
    ],
    output_is_list: [false],
    output_name: ["ckpt_name"],
    name: "Checkpoint Selector",
    display_name: "Checkpoint Selector",
    description: "",
    category: "ImageSaverTools/utils",
    output_node: false,
  },
  "Save Image w/Metadata": {
    input: {
      required: {
        images: ["IMAGE"],
        filename: [
          "STRING",
          {
            default: "%time_%seed",
            multiline: false,
          },
        ],
        path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        extension: [["png", "jpeg", "webp"]],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        modelname: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
      },
      optional: {
        positive: [
          "STRING",
          {
            default: "unknown",
            multiline: true,
          },
        ],
        negative: [
          "STRING",
          {
            default: "unknown",
            multiline: true,
          },
        ],
        seed_value: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        width: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 8,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 8,
          },
        ],
        lossless_webp: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        quality_jpeg_or_webp: [
          "INT",
          {
            default: 100,
            min: 1,
            max: 100,
          },
        ],
        counter: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        time_format: [
          "STRING",
          {
            default: "%Y-%m-%d-%H%M%S",
            multiline: false,
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "Save Image w/Metadata",
    display_name: "Save Image w/Metadata",
    description: "",
    category: "ImageSaverTools",
    output_node: true,
  },
  "Sampler Selector": {
    input: {
      required: {
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
      },
    },
    output: [
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2",
      ],
    ],
    output_is_list: [false],
    output_name: ["sampler_name"],
    name: "Sampler Selector",
    display_name: "Sampler Selector",
    description: "",
    category: "ImageSaverTools/utils",
    output_node: false,
  },
  "Scheduler Selector": {
    input: {
      required: {
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
      },
    },
    output: [
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
      ],
    ],
    output_is_list: [false],
    output_name: ["scheduler"],
    name: "Scheduler Selector",
    display_name: "Scheduler Selector",
    description: "",
    category: "ImageSaverTools/utils",
    output_node: false,
  },
  "Seed Generator": {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "Seed Generator",
    display_name: "Seed Generator",
    description: "",
    category: "ImageSaverTools/utils",
    output_node: false,
  },
  "String Literal": {
    input: {
      required: {
        string: [
          "STRING",
          {
            default: "",
            multiline: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "String Literal",
    display_name: "String Literal",
    description: "",
    category: "ImageSaverTools/utils",
    output_node: false,
  },
  "Width/Height Literal": {
    input: {
      required: {
        int: [
          "INT",
          {
            default: 512,
            min: 1,
            max: 16384,
            step: 8,
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "Width/Height Literal",
    display_name: "Width/Height Literal",
    description: "",
    category: "ImageSaverTools/utils",
    output_node: false,
  },
  "Cfg Literal": {
    input: {
      required: {
        float: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
      },
    },
    output: ["FLOAT"],
    output_is_list: [false],
    output_name: ["FLOAT"],
    name: "Cfg Literal",
    display_name: "Cfg Literal",
    description: "",
    category: "ImageSaverTools/utils",
    output_node: false,
  },
  "Int Literal": {
    input: {
      required: {
        int: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 1000000,
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "Int Literal",
    display_name: "Int Literal",
    description: "",
    category: "ImageSaverTools/utils",
    output_node: false,
  },
  AnimeFace_SemSegPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        remove_background_using_abg: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 512,
            max: 512,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "ABG_CHARACTER_MASK (MASK)"],
    name: "AnimeFace_SemSegPreprocessor",
    display_name: "Anime Face Segmentor",
    description: "",
    category: "ControlNet Preprocessors/Semantic Segmentation",
    output_node: false,
  },
  AnyLineArtPreprocessor_aux: {
    input: {
      required: {
        image: ["IMAGE"],
        merge_with_lineart: [
          [
            "lineart_standard",
            "lineart_realisitic",
            "lineart_anime",
            "manga_line",
          ],
          {
            default: "lineart_standard",
          },
        ],
        resolution: [
          "INT",
          {
            default: 1280,
            min: 512,
            max: 16384,
            step: 8,
          },
        ],
      },
      optional: {
        lineart_lower_bound: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        lineart_upper_bound: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        object_min_size: [
          "INT",
          {
            default: 36,
            min: 1,
            max: 16384,
          },
        ],
        object_connectivity: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 16384,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "AnyLineArtPreprocessor_aux",
    display_name: "AnyLine Lineart",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  BinaryPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        bin_threshold: [
          "INT",
          {
            default: 100,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "BinaryPreprocessor",
    display_name: "Binary Lines",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  CannyEdgePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        low_threshold: [
          "INT",
          {
            default: 100,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        high_threshold: [
          "INT",
          {
            default: 200,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "CannyEdgePreprocessor",
    display_name: "Canny Edge",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  ColorPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ColorPreprocessor",
    display_name: "Color Pallete",
    description: "",
    category: "ControlNet Preprocessors/T2IAdapter-only",
    output_node: false,
  },
  DensePosePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        model: [
          [
            "densepose_r50_fpn_dl.torchscript",
            "densepose_r101_fpn_dl.torchscript",
          ],
          {
            default: "densepose_r50_fpn_dl.torchscript",
          },
        ],
        cmap: [
          ["Viridis (MagicAnimate)", "Parula (CivitAI)"],
          {
            default: "Viridis (MagicAnimate)",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "DensePosePreprocessor",
    display_name: "DensePose Estimator",
    description: "",
    category: "ControlNet Preprocessors/Faces and Poses Estimators",
    output_node: false,
  },
  DepthAnythingPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        ckpt_name: [
          [
            "depth_anything_vitl14.pth",
            "depth_anything_vitb14.pth",
            "depth_anything_vits14.pth",
          ],
          {
            default: "depth_anything_vitl14.pth",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "DepthAnythingPreprocessor",
    display_name: "Depth Anything",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  Zoe_DepthAnythingPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        environment: [
          ["indoor", "outdoor"],
          {
            default: "indoor",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Zoe_DepthAnythingPreprocessor",
    display_name: "Zoe Depth Anything",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  DepthAnythingV2Preprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        ckpt_name: [
          [
            "depth_anything_v2_vitg.pth",
            "depth_anything_v2_vitl.pth",
            "depth_anything_v2_vitb.pth",
            "depth_anything_v2_vits.pth",
          ],
          {
            default: "depth_anything_v2_vitl.pth",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "DepthAnythingV2Preprocessor",
    display_name: "Depth Anything V2 - Relative",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  DiffusionEdge_Preprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        environment: [
          ["indoor", "urban", "natrual"],
          {
            default: "indoor",
          },
        ],
        patch_batch_size: [
          "INT",
          {
            default: 4,
            min: 1,
            max: 16,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "DiffusionEdge_Preprocessor",
    display_name: "Diffusion Edge (batch size ↑ => speed ↑, VRAM ↑)",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  "DSINE-NormalMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        fov: [
          "FLOAT",
          {
            min: 0,
            max: 365,
            step: 0.05,
            default: 60,
          },
        ],
        iterations: [
          "INT",
          {
            min: 1,
            max: 20,
            step: 1,
            default: 5,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "DSINE-NormalMapPreprocessor",
    display_name: "DSINE Normal Map",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  DWPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        detect_hand: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        detect_body: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        detect_face: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
        bbox_detector: [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx",
          ],
          {
            default: "yolox_l.onnx",
          },
        ],
        pose_estimator: [
          [
            "dw-ll_ucoco_384_bs5.torchscript.pt",
            "dw-ll_ucoco_384.onnx",
            "dw-ll_ucoco.onnx",
          ],
          {
            default: "dw-ll_ucoco_384_bs5.torchscript.pt",
          },
        ],
      },
    },
    output: ["IMAGE", "POSE_KEYPOINT"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "POSE_KEYPOINT"],
    name: "DWPreprocessor",
    display_name: "DWPose Estimator",
    description: "",
    category: "ControlNet Preprocessors/Faces and Poses Estimators",
    output_node: false,
  },
  AnimalPosePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        bbox_detector: [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx",
          ],
          {
            default: "yolox_l.torchscript.pt",
          },
        ],
        pose_estimator: [
          [
            "rtmpose-m_ap10k_256_bs5.torchscript.pt",
            "rtmpose-m_ap10k_256.onnx",
          ],
          {
            default: "rtmpose-m_ap10k_256_bs5.torchscript.pt",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE", "POSE_KEYPOINT"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "POSE_KEYPOINT"],
    name: "AnimalPosePreprocessor",
    display_name: "AnimalPose Estimator (AP10K)",
    description: "",
    category: "ControlNet Preprocessors/Faces and Poses Estimators",
    output_node: false,
  },
  HEDPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        safe: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "HEDPreprocessor",
    display_name: "HED Soft-Edge Lines",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  FakeScribblePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        safe: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "FakeScribblePreprocessor",
    display_name: "Fake Scribble Lines (aka scribble_hed)",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  InpaintPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
        mask: ["MASK"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "InpaintPreprocessor",
    display_name: "Inpaint Preprocessor",
    description: "",
    category: "ControlNet Preprocessors/others",
    output_node: false,
  },
  "LeReS-DepthMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        rm_nearest: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.1,
          },
        ],
        rm_background: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 0.1,
          },
        ],
        boost: [
          ["enable", "disable"],
          {
            default: "disable",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "LeReS-DepthMapPreprocessor",
    display_name: "LeReS Depth Map (enable boost for leres++)",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  LineArtPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        coarse: [
          ["disable", "enable"],
          {
            default: "disable",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "LineArtPreprocessor",
    display_name: "Realistic Lineart",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  AnimeLineArtPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "AnimeLineArtPreprocessor",
    display_name: "Anime Lineart",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  LineartStandardPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        guassian_sigma: [
          "FLOAT",
          {
            default: 6,
            min: 0,
            max: 100,
          },
        ],
        intensity_threshold: [
          "INT",
          {
            default: 8,
            min: 0,
            max: 16,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "LineartStandardPreprocessor",
    display_name: "Standard Lineart",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  Manga2Anime_LineArt_Preprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Manga2Anime_LineArt_Preprocessor",
    display_name: "Manga Lineart (aka lineart_anime_denoise)",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  "MediaPipe-FaceMeshPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        max_faces: [
          "INT",
          {
            default: 10,
            min: 1,
            max: 50,
            step: 1,
          },
        ],
        min_confidence: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.01,
            max: 1,
            step: 0.01,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "MediaPipe-FaceMeshPreprocessor",
    display_name: "MediaPipe Face Mesh",
    description: "",
    category: "ControlNet Preprocessors/Faces and Poses Estimators",
    output_node: false,
  },
  "MeshGraphormer-DepthMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        mask_bbox_padding: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 100,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
        mask_type: [
          ["based_on_depth", "tight_bboxes", "original"],
          {
            default: "based_on_depth",
          },
        ],
        mask_expand: [
          "INT",
          {
            default: 5,
            min: -16384,
            max: 16384,
            step: 1,
          },
        ],
        rand_seed: [
          "INT",
          {
            default: 88,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        detect_thr: [
          "FLOAT",
          {
            default: 0.6,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        presence_thr: [
          "FLOAT",
          {
            default: 0.6,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "INPAINTING_MASK"],
    name: "MeshGraphormer-DepthMapPreprocessor",
    display_name: "MeshGraphormer Hand Refiner",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  "MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
        bbox_detector: ["BBOX_DETECTOR"],
      },
      optional: {
        bbox_threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        bbox_dilation: [
          "INT",
          {
            default: 10,
            min: -512,
            max: 512,
            step: 1,
          },
        ],
        bbox_crop_factor: [
          "FLOAT",
          {
            default: 3,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
        drop_size: [
          "INT",
          {
            min: 1,
            max: 16384,
            step: 1,
            default: 10,
          },
        ],
        mask_bbox_padding: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 100,
          },
        ],
        mask_type: [
          ["based_on_depth", "tight_bboxes", "original"],
          {
            default: "based_on_depth",
          },
        ],
        mask_expand: [
          "INT",
          {
            default: 5,
            min: -16384,
            max: 16384,
            step: 1,
          },
        ],
        rand_seed: [
          "INT",
          {
            default: 88,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "INPAINTING_MASK"],
    name: "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
    display_name: "MeshGraphormer Hand Refiner With External Detector",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  "Metric3D-DepthMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        backbone: [
          ["vit-small", "vit-large", "vit-giant2"],
          {
            default: "vit-small",
          },
        ],
        fx: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 16384,
          },
        ],
        fy: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 16384,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Metric3D-DepthMapPreprocessor",
    display_name: "Metric3D Depth Map",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  "Metric3D-NormalMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        backbone: [
          ["vit-small", "vit-large", "vit-giant2"],
          {
            default: "vit-small",
          },
        ],
        fx: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 16384,
          },
        ],
        fy: [
          "INT",
          {
            default: 1000,
            min: 1,
            max: 16384,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Metric3D-NormalMapPreprocessor",
    display_name: "Metric3D Normal Map",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  "MiDaS-NormalMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        a: [
          "FLOAT",
          {
            default: 6.283185307179586,
            min: 0,
            max: 15.707963267948966,
            step: 0.05,
          },
        ],
        bg_threshold: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "MiDaS-NormalMapPreprocessor",
    display_name: "MiDaS Normal Map",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  "MiDaS-DepthMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        a: [
          "FLOAT",
          {
            default: 6.283185307179586,
            min: 0,
            max: 15.707963267948966,
            step: 0.05,
          },
        ],
        bg_threshold: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 1,
            step: 0.05,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "MiDaS-DepthMapPreprocessor",
    display_name: "MiDaS Depth Map",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  "M-LSDPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        score_threshold: [
          "FLOAT",
          {
            default: 0.1,
            min: 0.01,
            max: 2,
            step: 0.01,
          },
        ],
        dist_threshold: [
          "FLOAT",
          {
            default: 0.1,
            min: 0.01,
            max: 20,
            step: 0.01,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "M-LSDPreprocessor",
    display_name: "M-LSD Lines",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  "BAE-NormalMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "BAE-NormalMapPreprocessor",
    display_name: "BAE Normal Map",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  "OneFormer-COCO-SemSegPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "OneFormer-COCO-SemSegPreprocessor",
    display_name: "OneFormer COCO Segmentor",
    description: "",
    category: "ControlNet Preprocessors/Semantic Segmentation",
    output_node: false,
  },
  "OneFormer-ADE20K-SemSegPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "OneFormer-ADE20K-SemSegPreprocessor",
    display_name: "OneFormer ADE20K Segmentor",
    description: "",
    category: "ControlNet Preprocessors/Semantic Segmentation",
    output_node: false,
  },
  OpenposePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        detect_hand: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        detect_body: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        detect_face: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE", "POSE_KEYPOINT"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "POSE_KEYPOINT"],
    name: "OpenposePreprocessor",
    display_name: "OpenPose Pose",
    description: "",
    category: "ControlNet Preprocessors/Faces and Poses Estimators",
    output_node: false,
  },
  PiDiNetPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        safe: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "PiDiNetPreprocessor",
    display_name: "PiDiNet Soft-Edge Lines",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  SavePoseKpsAsJsonFile: {
    input: {
      required: {
        pose_kps: ["POSE_KEYPOINT"],
        filename_prefix: [
          "STRING",
          {
            default: "PoseKeypoint",
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "SavePoseKpsAsJsonFile",
    display_name: "Save Pose Keypoints",
    description: "",
    category: "ControlNet Preprocessors/Pose Keypoint Postprocess",
    output_node: true,
  },
  FacialPartColoringFromPoseKps: {
    input: {
      required: {
        pose_kps: ["POSE_KEYPOINT"],
        mode: [
          ["point", "polygon"],
          {
            default: "polygon",
          },
        ],
        skin: [
          "STRING",
          {
            default: "rgb(0, 153, 255)",
            multiline: false,
          },
        ],
        left_eye: [
          "STRING",
          {
            default: "rgb(0, 204, 153)",
            multiline: false,
          },
        ],
        right_eye: [
          "STRING",
          {
            default: "rgb(255, 153, 0)",
            multiline: false,
          },
        ],
        nose: [
          "STRING",
          {
            default: "rgb(255, 102, 255)",
            multiline: false,
          },
        ],
        upper_lip: [
          "STRING",
          {
            default: "rgb(102, 0, 51)",
            multiline: false,
          },
        ],
        inner_mouth: [
          "STRING",
          {
            default: "rgb(255, 204, 255)",
            multiline: false,
          },
        ],
        lower_lip: [
          "STRING",
          {
            default: "rgb(255, 0, 102)",
            multiline: false,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "FacialPartColoringFromPoseKps",
    display_name: "Colorize Facial Parts from PoseKPS",
    description: "",
    category: "ControlNet Preprocessors/Pose Keypoint Postprocess",
    output_node: false,
  },
  UpperBodyTrackingFromPoseKps: {
    input: {
      required: {
        pose_kps: ["POSE_KEYPOINT"],
        id_include: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        Head_width_height: [
          "STRING",
          {
            default: "256, 256",
            multiline: false,
          },
        ],
        Neck_width_height: [
          "STRING",
          {
            default: "100, 100",
            multiline: false,
          },
        ],
        Shoulder_width_height: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        Torso_width_height: [
          "STRING",
          {
            default: "350, 450",
            multiline: false,
          },
        ],
        RArm_width_height: [
          "STRING",
          {
            default: "128, 256",
            multiline: false,
          },
        ],
        RForearm_width_height: [
          "STRING",
          {
            default: "128, 256",
            multiline: false,
          },
        ],
        LArm_width_height: [
          "STRING",
          {
            default: "128, 256",
            multiline: false,
          },
        ],
        LForearm_width_height: [
          "STRING",
          {
            default: "128, 256",
            multiline: false,
          },
        ],
      },
    },
    output: ["TRACKING", "STRING"],
    output_is_list: [false, false],
    output_name: ["tracking", "prompt"],
    name: "UpperBodyTrackingFromPoseKps",
    display_name: "Upper Body Tracking From PoseKps (InstanceDiffusion)",
    description: "",
    category: "ControlNet Preprocessors/Pose Keypoint Postprocess",
    output_node: false,
  },
  RenderPeopleKps: {
    input: {
      required: {
        kps: ["POSE_KEYPOINT"],
        render_body: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        render_hand: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        render_face: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "RenderPeopleKps",
    display_name: "Render Pose JSON (Human)",
    description: "",
    category: "ControlNet Preprocessors/Pose Keypoint Postprocess",
    output_node: false,
  },
  RenderAnimalKps: {
    input: {
      required: {
        kps: ["POSE_KEYPOINT"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "RenderAnimalKps",
    display_name: "Render Pose JSON (Animal)",
    description: "",
    category: "ControlNet Preprocessors/Pose Keypoint Postprocess",
    output_node: false,
  },
  ImageLuminanceDetector: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        gamma_correction: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 2,
            step: 0.001,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageLuminanceDetector",
    display_name: "Image Luminance",
    description: "",
    category: "ControlNet Preprocessors/Recolor",
    output_node: false,
  },
  ImageIntensityDetector: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        gamma_correction: [
          "FLOAT",
          {
            default: 1,
            min: 0.1,
            max: 2,
            step: 0.001,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ImageIntensityDetector",
    display_name: "Image Intensity",
    description: "",
    category: "ControlNet Preprocessors/Recolor",
    output_node: false,
  },
  ScribblePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ScribblePreprocessor",
    display_name: "Scribble Lines",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  Scribble_XDoG_Preprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        threshold: [
          "INT",
          {
            default: 32,
            min: 1,
            max: 64,
            step: 1,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Scribble_XDoG_Preprocessor",
    display_name: "Scribble XDoG Lines",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  Scribble_PiDiNet_Preprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        safe: [
          ["enable", "disable"],
          {
            default: "enable",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Scribble_PiDiNet_Preprocessor",
    display_name: "Scribble PiDiNet Lines",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  SAMPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "SAMPreprocessor",
    display_name: "SAM Segmentor",
    description: "",
    category: "ControlNet Preprocessors/others",
    output_node: false,
  },
  ShufflePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "ShufflePreprocessor",
    display_name: "Content Shuffle",
    description: "",
    category: "ControlNet Preprocessors/T2IAdapter-only",
    output_node: false,
  },
  TEEDPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        safe_steps: [
          "INT",
          {
            default: 2,
            min: 0,
            max: 10,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "TEEDPreprocessor",
    display_name: "TEEDPreprocessor",
    description: "",
    category: "ControlNet Preprocessors/Line Extractors",
    output_node: false,
  },
  TilePreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        pyrUp_iters: [
          "INT",
          {
            default: 3,
            min: 1,
            max: 10,
            step: 1,
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "TilePreprocessor",
    display_name: "Tile",
    description: "",
    category: "ControlNet Preprocessors/tile",
    output_node: false,
  },
  TTPlanet_TileGF_Preprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
        scale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 1,
            max: 8,
            step: 0.05,
          },
        ],
        blur_strength: [
          "FLOAT",
          {
            default: 2,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
        radius: [
          "INT",
          {
            default: 7,
            min: 1,
            max: 20,
            step: 1,
          },
        ],
        eps: [
          "FLOAT",
          {
            default: 0.01,
            min: 0.001,
            max: 0.1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "TTPlanet_TileGF_Preprocessor",
    display_name: "TTPlanet Tile GuidedFilter",
    description: "",
    category: "ControlNet Preprocessors/tile",
    output_node: false,
  },
  TTPlanet_TileSimple_Preprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
        scale_factor: [
          "FLOAT",
          {
            default: 1,
            min: 1,
            max: 8,
            step: 0.05,
          },
        ],
        blur_strength: [
          "FLOAT",
          {
            default: 2,
            min: 1,
            max: 10,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "TTPlanet_TileSimple_Preprocessor",
    display_name: "TTPlanet Tile Simple",
    description: "",
    category: "ControlNet Preprocessors/tile",
    output_node: false,
  },
  "UniFormer-SemSegPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "UniFormer-SemSegPreprocessor",
    display_name: "UniFormer Segmentor",
    description: "",
    category: "ControlNet Preprocessors/Semantic Segmentation",
    output_node: false,
  },
  SemSegPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "SemSegPreprocessor",
    display_name: "Semantic Segmentor (legacy, alias for UniFormer)",
    description: "",
    category: "ControlNet Preprocessors/Semantic Segmentation",
    output_node: false,
  },
  Unimatch_OptFlowPreprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
        ckpt_name: [
          [
            "gmflow-scale1-mixdata.pth",
            "gmflow-scale2-mixdata.pth",
            "gmflow-scale2-regrefine6-mixdata.pth",
          ],
          {
            default: "gmflow-scale2-regrefine6-mixdata.pth",
          },
        ],
        backward_flow: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        bidirectional_flow: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["OPTICAL_FLOW", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["OPTICAL_FLOW", "PREVIEW_IMAGE"],
    name: "Unimatch_OptFlowPreprocessor",
    display_name: "Unimatch Optical Flow",
    description: "",
    category: "ControlNet Preprocessors/Optical Flow",
    output_node: false,
  },
  MaskOptFlow: {
    input: {
      required: {
        optical_flow: ["OPTICAL_FLOW"],
        mask: ["MASK"],
      },
    },
    output: ["OPTICAL_FLOW", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["OPTICAL_FLOW", "PREVIEW_IMAGE"],
    name: "MaskOptFlow",
    display_name: "Mask Optical Flow (DragNUWA)",
    description: "",
    category: "ControlNet Preprocessors/Optical Flow",
    output_node: false,
  },
  "Zoe-DepthMapPreprocessor": {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Zoe-DepthMapPreprocessor",
    display_name: "Zoe Depth Map",
    description: "",
    category: "ControlNet Preprocessors/Normal and Depth Estimators",
    output_node: false,
  },
  AIO_Preprocessor: {
    input: {
      required: {
        image: ["IMAGE"],
      },
      optional: {
        preprocessor: [
          [
            "none",
            "AnimeFace_SemSegPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "BinaryPreprocessor",
            "CannyEdgePreprocessor",
            "ColorPreprocessor",
            "DensePosePreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DiffusionEdge_Preprocessor",
            "DSINE-NormalMapPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "LeReS-DepthMapPreprocessor",
            "LineArtPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineartStandardPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "M-LSDPreprocessor",
            "BAE-NormalMapPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "OpenposePreprocessor",
            "PiDiNetPreprocessor",
            "SavePoseKpsAsJsonFile",
            "FacialPartColoringFromPoseKps",
            "UpperBodyTrackingFromPoseKps",
            "RenderPeopleKps",
            "RenderAnimalKps",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "SAMPreprocessor",
            "ShufflePreprocessor",
            "TEEDPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "Unimatch_OptFlowPreprocessor",
            "MaskOptFlow",
            "Zoe-DepthMapPreprocessor",
          ],
          {
            default: "none",
          },
        ],
        resolution: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 16384,
            step: 64,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "AIO_Preprocessor",
    display_name: "AIO Aux Preprocessor",
    description: "",
    category: "ControlNet Preprocessors",
    output_node: false,
  },
  ControlNetPreprocessorSelector: {
    input: {
      required: {
        preprocessor: [
          [
            "none",
            "AnimeFace_SemSegPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "BinaryPreprocessor",
            "CannyEdgePreprocessor",
            "ColorPreprocessor",
            "DensePosePreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DiffusionEdge_Preprocessor",
            "DSINE-NormalMapPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "LeReS-DepthMapPreprocessor",
            "LineArtPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineartStandardPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "M-LSDPreprocessor",
            "BAE-NormalMapPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "OpenposePreprocessor",
            "PiDiNetPreprocessor",
            "SavePoseKpsAsJsonFile",
            "FacialPartColoringFromPoseKps",
            "UpperBodyTrackingFromPoseKps",
            "RenderPeopleKps",
            "RenderAnimalKps",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "SAMPreprocessor",
            "ShufflePreprocessor",
            "TEEDPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "Unimatch_OptFlowPreprocessor",
            "MaskOptFlow",
            "Zoe-DepthMapPreprocessor",
          ],
        ],
      },
    },
    output: [
      [
        "none",
        "AnimeFace_SemSegPreprocessor",
        "AnyLineArtPreprocessor_aux",
        "BinaryPreprocessor",
        "CannyEdgePreprocessor",
        "ColorPreprocessor",
        "DensePosePreprocessor",
        "DepthAnythingPreprocessor",
        "Zoe_DepthAnythingPreprocessor",
        "DepthAnythingV2Preprocessor",
        "DiffusionEdge_Preprocessor",
        "DSINE-NormalMapPreprocessor",
        "DWPreprocessor",
        "AnimalPosePreprocessor",
        "HEDPreprocessor",
        "FakeScribblePreprocessor",
        "LeReS-DepthMapPreprocessor",
        "LineArtPreprocessor",
        "AnimeLineArtPreprocessor",
        "LineartStandardPreprocessor",
        "Manga2Anime_LineArt_Preprocessor",
        "MediaPipe-FaceMeshPreprocessor",
        "MeshGraphormer-DepthMapPreprocessor",
        "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
        "Metric3D-DepthMapPreprocessor",
        "Metric3D-NormalMapPreprocessor",
        "MiDaS-NormalMapPreprocessor",
        "MiDaS-DepthMapPreprocessor",
        "M-LSDPreprocessor",
        "BAE-NormalMapPreprocessor",
        "OneFormer-COCO-SemSegPreprocessor",
        "OneFormer-ADE20K-SemSegPreprocessor",
        "OpenposePreprocessor",
        "PiDiNetPreprocessor",
        "SavePoseKpsAsJsonFile",
        "FacialPartColoringFromPoseKps",
        "UpperBodyTrackingFromPoseKps",
        "RenderPeopleKps",
        "RenderAnimalKps",
        "ImageLuminanceDetector",
        "ImageIntensityDetector",
        "ScribblePreprocessor",
        "Scribble_XDoG_Preprocessor",
        "Scribble_PiDiNet_Preprocessor",
        "SAMPreprocessor",
        "ShufflePreprocessor",
        "TEEDPreprocessor",
        "TilePreprocessor",
        "TTPlanet_TileGF_Preprocessor",
        "TTPlanet_TileSimple_Preprocessor",
        "UniFormer-SemSegPreprocessor",
        "SemSegPreprocessor",
        "Unimatch_OptFlowPreprocessor",
        "MaskOptFlow",
        "Zoe-DepthMapPreprocessor",
      ],
    ],
    output_is_list: [false],
    output_name: ["preprocessor"],
    name: "ControlNetPreprocessorSelector",
    display_name: "Preprocessor Selector",
    description: "",
    category: "ControlNet Preprocessors",
    output_node: false,
  },
  PixelPerfectResolution: {
    input: {
      required: {
        original_image: ["IMAGE"],
        image_gen_width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 8,
          },
        ],
        image_gen_height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 8,
          },
        ],
        resize_mode: [
          ["Just Resize", "Crop and Resize", "Resize and Fill"],
          {
            default: "Just Resize",
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["RESOLUTION (INT)"],
    name: "PixelPerfectResolution",
    display_name: "Pixel Perfect Resolution",
    description: "",
    category: "ControlNet Preprocessors",
    output_node: false,
  },
  ImageGenResolutionFromImage: {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["INT", "INT"],
    output_is_list: [false, false],
    output_name: ["IMAGE_GEN_WIDTH (INT)", "IMAGE_GEN_HEIGHT (INT)"],
    name: "ImageGenResolutionFromImage",
    display_name: "Generation Resolution From Image",
    description: "",
    category: "ControlNet Preprocessors",
    output_node: false,
  },
  ImageGenResolutionFromLatent: {
    input: {
      required: {
        latent: ["LATENT"],
      },
    },
    output: ["INT", "INT"],
    output_is_list: [false, false],
    output_name: ["IMAGE_GEN_WIDTH (INT)", "IMAGE_GEN_HEIGHT (INT)"],
    name: "ImageGenResolutionFromLatent",
    display_name: "Generation Resolution From Latent",
    description: "",
    category: "ControlNet Preprocessors",
    output_node: false,
  },
  HintImageEnchance: {
    input: {
      required: {
        hint_image: ["IMAGE"],
        image_gen_width: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 8,
          },
        ],
        image_gen_height: [
          "INT",
          {
            default: 512,
            min: 64,
            max: 8192,
            step: 8,
          },
        ],
        resize_mode: [
          ["Just Resize", "Crop and Resize", "Resize and Fill"],
          {
            default: "Just Resize",
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "HintImageEnchance",
    display_name: "Enchance And Resize Hint Images",
    description: "",
    category: "ControlNet Preprocessors",
    output_node: false,
  },
  "BLIP Model Loader": {
    input: {
      required: {
        blip_model: [
          "STRING",
          {
            default: "Salesforce/blip-image-captioning-base",
          },
        ],
        vqa_model_id: [
          "STRING",
          {
            default: "Salesforce/blip-vqa-base",
          },
        ],
        device: [["cuda", "cpu"]],
      },
    },
    output: ["BLIP_MODEL"],
    output_is_list: [false],
    output_name: ["BLIP_MODEL"],
    name: "BLIP Model Loader",
    display_name: "BLIP Model Loader",
    description: "",
    category: "WAS Suite/Loaders",
    output_node: false,
  },
  "Blend Latents": {
    input: {
      required: {
        latent_a: ["LATENT"],
        latent_b: ["LATENT"],
        operation: [
          [
            "add",
            "multiply",
            "divide",
            "subtract",
            "overlay",
            "hard_light",
            "soft_light",
            "screen",
            "linear_dodge",
            "difference",
            "exclusion",
            "random",
          ],
        ],
        blend: [
          "FLOAT",
          {
            default: 0.5,
            min: 0.01,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "Blend Latents",
    display_name: "Blend Latents",
    description: "",
    category: "WAS Suite/Latent",
    output_node: false,
  },
  "Bus Node": {
    input: {
      required: {},
      optional: {
        bus: ["BUS"],
        model: ["MODEL"],
        clip: ["CLIP"],
        vae: ["VAE"],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
      },
    },
    output: ["BUS", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING"],
    output_is_list: [false, false, false, false, false, false],
    output_name: ["bus", "model", "clip", "vae", "positive", "negative"],
    name: "Bus Node",
    display_name: "Bus Node",
    description: "",
    category: "WAS Suite/Utilities",
    output_node: false,
  },
  "Cache Node": {
    input: {
      required: {
        latent_suffix: [
          "STRING",
          {
            default: "26439845_cache",
            multiline: false,
          },
        ],
        image_suffix: [
          "STRING",
          {
            default: "50692090_cache",
            multiline: false,
          },
        ],
        conditioning_suffix: [
          "STRING",
          {
            default: "83360207_cache",
            multiline: false,
          },
        ],
      },
      optional: {
        output_path: [
          "STRING",
          {
            default: "/comfyui/custom_nodes/was-node-suite-comfyui/cache",
            multiline: false,
          },
        ],
        latent: ["LATENT"],
        image: ["IMAGE"],
        conditioning: ["CONDITIONING"],
      },
    },
    output: ["STRING", "STRING", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["latent_filename", "image_filename", "conditioning_filename"],
    name: "Cache Node",
    display_name: "Cache Node",
    description: "",
    category: "WAS Suite/IO",
    output_node: true,
  },
  "Checkpoint Loader": {
    input: {
      required: {
        config_name: [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml",
          ],
        ],
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "NAME_STRING"],
    name: "Checkpoint Loader",
    display_name: "Checkpoint Loader",
    description: "",
    category: "WAS Suite/Loaders/Advanced",
    output_node: false,
  },
  "Checkpoint Loader (Simple)": {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "NAME_STRING"],
    name: "Checkpoint Loader (Simple)",
    display_name: "Checkpoint Loader (Simple)",
    description: "",
    category: "WAS Suite/Loaders",
    output_node: false,
  },
  "CLIPTextEncode (NSP)": {
    input: {
      required: {
        mode: [["Noodle Soup Prompts", "Wildcards"]],
        noodle_key: [
          "STRING",
          {
            default: "__",
            multiline: false,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        text: [
          "STRING",
          {
            multiline: true,
          },
        ],
        clip: ["CLIP"],
      },
    },
    output: ["CONDITIONING", "STRING", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["conditioning", "parsed_text", "raw_text"],
    name: "CLIPTextEncode (NSP)",
    display_name: "CLIPTextEncode (NSP)",
    description: "",
    category: "WAS Suite/Conditioning",
    output_node: true,
  },
  "CLIP Input Switch": {
    input: {
      required: {
        clip_a: ["CLIP"],
        clip_b: ["CLIP"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["CLIP"],
    output_is_list: [false],
    output_name: ["CLIP"],
    name: "CLIP Input Switch",
    display_name: "CLIP Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "CLIP Vision Input Switch": {
    input: {
      required: {
        clip_vision_a: ["CLIP_VISION"],
        clip_vision_b: ["CLIP_VISION"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["CLIP_VISION"],
    output_is_list: [false],
    output_name: ["CLIP_VISION"],
    name: "CLIP Vision Input Switch",
    display_name: "CLIP Vision Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Conditioning Input Switch": {
    input: {
      required: {
        conditioning_a: ["CONDITIONING"],
        conditioning_b: ["CONDITIONING"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "Conditioning Input Switch",
    display_name: "Conditioning Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Constant Number": {
    input: {
      required: {
        number_type: [["integer", "float", "bool"]],
        number: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
            step: 0.01,
          },
        ],
      },
      optional: {
        number_as_text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["NUMBER", "FLOAT", "INT"],
    name: "Constant Number",
    display_name: "Constant Number",
    description: "",
    category: "WAS Suite/Number",
    output_node: false,
  },
  "Create Grid Image": {
    input: {
      required: {
        images_path: [
          "STRING",
          {
            default: "./ComfyUI/input/",
            multiline: false,
          },
        ],
        pattern_glob: [
          "STRING",
          {
            default: "*",
            multiline: false,
          },
        ],
        include_subfolders: [["false", "true"]],
        border_width: [
          "INT",
          {
            default: 3,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        number_of_columns: [
          "INT",
          {
            default: 6,
            min: 1,
            max: 24,
            step: 1,
          },
        ],
        max_cell_size: [
          "INT",
          {
            default: 256,
            min: 32,
            max: 1280,
            step: 1,
          },
        ],
        border_red: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        border_green: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        border_blue: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Create Grid Image",
    display_name: "Create Grid Image",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Create Grid Image from Batch": {
    input: {
      required: {
        images: ["IMAGE"],
        border_width: [
          "INT",
          {
            default: 3,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        number_of_columns: [
          "INT",
          {
            default: 6,
            min: 1,
            max: 24,
            step: 1,
          },
        ],
        max_cell_size: [
          "INT",
          {
            default: 256,
            min: 32,
            max: 2048,
            step: 1,
          },
        ],
        border_red: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        border_green: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        border_blue: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Create Grid Image from Batch",
    display_name: "Create Grid Image from Batch",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Create Morph Image": {
    input: {
      required: {
        image_a: ["IMAGE"],
        image_b: ["IMAGE"],
        transition_frames: [
          "INT",
          {
            default: 30,
            min: 2,
            max: 60,
            step: 1,
          },
        ],
        still_image_delay_ms: [
          "FLOAT",
          {
            default: 2500,
            min: 0.1,
            max: 60000,
            step: 0.1,
          },
        ],
        duration_ms: [
          "FLOAT",
          {
            default: 0.1,
            min: 0.1,
            max: 60000,
            step: 0.1,
          },
        ],
        loops: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        max_size: [
          "INT",
          {
            default: 512,
            min: 128,
            max: 1280,
            step: 1,
          },
        ],
        output_path: [
          "STRING",
          {
            default: "./ComfyUI/output",
            multiline: false,
          },
        ],
        filename: [
          "STRING",
          {
            default: "morph",
            multiline: false,
          },
        ],
        filetype: [["GIF", "APNG"]],
      },
    },
    output: ["IMAGE", "IMAGE", "STRING", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: [
      "image_a_pass",
      "image_b_pass",
      "filepath_text",
      "filename_text",
    ],
    name: "Create Morph Image",
    display_name: "Create Morph Image",
    description: "",
    category: "WAS Suite/Animation",
    output_node: false,
  },
  "Create Morph Image from Path": {
    input: {
      required: {
        transition_frames: [
          "INT",
          {
            default: 30,
            min: 2,
            max: 60,
            step: 1,
          },
        ],
        still_image_delay_ms: [
          "FLOAT",
          {
            default: 2500,
            min: 0.1,
            max: 60000,
            step: 0.1,
          },
        ],
        duration_ms: [
          "FLOAT",
          {
            default: 0.1,
            min: 0.1,
            max: 60000,
            step: 0.1,
          },
        ],
        loops: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        max_size: [
          "INT",
          {
            default: 512,
            min: 128,
            max: 1280,
            step: 1,
          },
        ],
        input_path: [
          "STRING",
          {
            default: "./ComfyUI",
            multiline: false,
          },
        ],
        input_pattern: [
          "STRING",
          {
            default: "*",
            multiline: false,
          },
        ],
        output_path: [
          "STRING",
          {
            default: "./ComfyUI/output",
            multiline: false,
          },
        ],
        filename: [
          "STRING",
          {
            default: "morph",
            multiline: false,
          },
        ],
        filetype: [["GIF", "APNG"]],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["filepath_text", "filename_text"],
    name: "Create Morph Image from Path",
    display_name: "Create Morph Image from Path",
    description: "",
    category: "WAS Suite/Animation",
    output_node: false,
  },
  "Create Video from Path": {
    input: {
      required: {
        transition_frames: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 120,
            step: 1,
          },
        ],
        image_delay_sec: [
          "FLOAT",
          {
            default: 2.5,
            min: 0.01,
            max: 60000,
            step: 0.01,
          },
        ],
        fps: [
          "INT",
          {
            default: 30,
            min: 1,
            max: 60,
            step: 1,
          },
        ],
        max_size: [
          "INT",
          {
            default: 512,
            min: 128,
            max: 1920,
            step: 1,
          },
        ],
        input_path: [
          "STRING",
          {
            default: "./ComfyUI/input",
            multiline: false,
          },
        ],
        output_path: [
          "STRING",
          {
            default: "./ComfyUI/output",
            multiline: false,
          },
        ],
        filename: [
          "STRING",
          {
            default: "comfy_video",
            multiline: false,
          },
        ],
        codec: [["AVC1", "FFV1", "H264", "MP4V"]],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["filepath_text", "filename_text"],
    name: "Create Video from Path",
    display_name: "Create Video from Path",
    description: "",
    category: "WAS Suite/Animation",
    output_node: false,
  },
  "CLIPSeg Masking": {
    input: {
      required: {
        image: ["IMAGE"],
        text: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
      optional: {
        clipseg_model: ["CLIPSEG_MODEL"],
      },
    },
    output: ["MASK", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["MASK", "MASK_IMAGE"],
    name: "CLIPSeg Masking",
    display_name: "CLIPSeg Masking",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "CLIPSeg Model Loader": {
    input: {
      required: {
        model: [
          "STRING",
          {
            default: "CIDAS/clipseg-rd64-refined",
            multiline: false,
          },
        ],
      },
    },
    output: ["CLIPSEG_MODEL"],
    output_is_list: [false],
    output_name: ["clipseg_model"],
    name: "CLIPSeg Model Loader",
    display_name: "CLIPSeg Model Loader",
    description: "",
    category: "WAS Suite/Loaders",
    output_node: false,
  },
  "CLIPSeg Batch Masking": {
    input: {
      required: {
        image_a: ["IMAGE"],
        image_b: ["IMAGE"],
        text_a: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        text_b: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
      optional: {
        image_c: ["IMAGE"],
        image_d: ["IMAGE"],
        image_e: ["IMAGE"],
        image_f: ["IMAGE"],
        text_c: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        text_d: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        text_e: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        text_f: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["IMAGE", "MASK", "IMAGE"],
    output_is_list: [false, false, false],
    output_name: ["IMAGES_BATCH", "MASKS_BATCH", "MASK_IMAGES_BATCH"],
    name: "CLIPSeg Batch Masking",
    display_name: "CLIPSeg Batch Masking",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Convert Masks to Images": {
    input: {
      required: {
        masks: ["MASK"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGES"],
    name: "Convert Masks to Images",
    display_name: "Convert Masks to Images",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Control Net Model Input Switch": {
    input: {
      required: {
        control_net_a: ["CONTROL_NET"],
        control_net_b: ["CONTROL_NET"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["CONTROL_NET"],
    output_is_list: [false],
    output_name: ["CONTROL_NET"],
    name: "Control Net Model Input Switch",
    display_name: "Control Net Model Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Debug Number to Console": {
    input: {
      required: {
        number: ["NUMBER"],
        label: [
          "STRING",
          {
            default: "Debug to Console",
            multiline: false,
          },
        ],
      },
    },
    output: ["NUMBER"],
    output_is_list: [false],
    output_name: ["NUMBER"],
    name: "Debug Number to Console",
    display_name: "Debug Number to Console",
    description: "",
    category: "WAS Suite/Debug",
    output_node: true,
  },
  "Dictionary to Console": {
    input: {
      required: {
        dictionary: ["DICT"],
        label: [
          "STRING",
          {
            default: "Dictionary Output",
            multiline: false,
          },
        ],
      },
    },
    output: ["DICT"],
    output_is_list: [false],
    output_name: ["DICT"],
    name: "Dictionary to Console",
    display_name: "Dictionary to Console",
    description: "",
    category: "WAS Suite/Debug",
    output_node: true,
  },
  "Diffusers Model Loader": {
    input: {
      required: {
        model_path: [[]],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "NAME_STRING"],
    name: "Diffusers Model Loader",
    display_name: "Diffusers Model Loader",
    description: "",
    category: "WAS Suite/Loaders/Advanced",
    output_node: false,
  },
  "Diffusers Hub Model Down-Loader": {
    input: {
      required: {
        repo_id: [
          "STRING",
          {
            multiline: false,
          },
        ],
        revision: [
          "STRING",
          {
            default: "None",
            multiline: false,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "NAME_STRING"],
    name: "Diffusers Hub Model Down-Loader",
    display_name: "Diffusers Hub Model Down-Loader",
    description: "",
    category: "WAS Suite/Loaders/Advanced",
    output_node: false,
  },
  "Export API": {
    input: {
      required: {
        save_prompt_api: [["true", "true"]],
        output_path: [
          "STRING",
          {
            default: "./ComfyUI/output/",
            multiline: false,
          },
        ],
        filename_prefix: [
          "STRING",
          {
            default: "ComfyUI_Prompt",
          },
        ],
        filename_delimiter: [
          "STRING",
          {
            default: "_",
          },
        ],
        filename_number_padding: [
          "INT",
          {
            default: 4,
            min: 2,
            max: 9,
            step: 1,
          },
        ],
        parse_text_tokens: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
      hidden: {
        prompt: "PROMPT",
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "Export API",
    display_name: "Export API",
    description: "",
    category: "WAS Suite/Debug",
    output_node: true,
  },
  "Latent Input Switch": {
    input: {
      required: {
        latent_a: ["LATENT"],
        latent_b: ["LATENT"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "Latent Input Switch",
    display_name: "Latent Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Load Cache": {
    input: {
      required: {
        latent_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        image_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        conditioning_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["LATENT", "IMAGE", "CONDITIONING"],
    output_is_list: [false, false, false],
    output_name: ["LATENT", "IMAGE", "CONDITIONING"],
    name: "Load Cache",
    display_name: "Load Cache",
    description: "",
    category: "WAS Suite/IO",
    output_node: false,
  },
  "Logic Boolean": {
    input: {
      required: {
        boolean: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["BOOLEAN", "NUMBER", "INT", "FLOAT"],
    output_is_list: [false, false, false, false],
    output_name: ["BOOLEAN", "NUMBER", "INT", "FLOAT"],
    name: "Logic Boolean",
    display_name: "Logic Boolean",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Logic Boolean Primitive": {
    input: {
      required: {
        boolean: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "Logic Boolean Primitive",
    display_name: "Logic Boolean Primitive",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Logic Comparison OR": {
    input: {
      required: {
        boolean_a: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        boolean_b: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "Logic Comparison OR",
    display_name: "Logic Comparison OR",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Logic Comparison AND": {
    input: {
      required: {
        boolean_a: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        boolean_b: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "Logic Comparison AND",
    display_name: "Logic Comparison AND",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Logic Comparison XOR": {
    input: {
      required: {
        boolean_a: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        boolean_b: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "Logic Comparison XOR",
    display_name: "Logic Comparison XOR",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Logic NOT": {
    input: {
      required: {
        boolean: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "Logic NOT",
    display_name: "Logic NOT",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Lora Loader": {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_name: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "NAME_STRING"],
    name: "Lora Loader",
    display_name: "Lora Loader",
    description: "",
    category: "WAS Suite/Loaders",
    output_node: false,
  },
  "Hex to HSL": {
    input: {
      required: {
        hex_color: [
          "STRING",
          {
            default: "#FF0000",
          },
        ],
      },
      optional: {
        include_alpha: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["INT", "INT", "INT", "FLOAT", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["hue", "saturation", "lightness", "alpha", "hsl"],
    name: "Hex to HSL",
    display_name: "Hex to HSL",
    description: "",
    category: "WAS Suite/Utilities",
    output_node: false,
  },
  "HSL to Hex": {
    input: {
      required: {
        hsl_color: [
          "STRING",
          {
            default: "hsl(0, 100%, 50%)",
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["hex_color"],
    name: "HSL to Hex",
    display_name: "HSL to Hex",
    description: "",
    category: "WAS Suite/Utilities",
    output_node: false,
  },
  "Image SSAO (Ambient Occlusion)": {
    input: {
      required: {
        images: ["IMAGE"],
        depth_images: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            min: 0,
            max: 5,
            default: 1,
            step: 0.01,
          },
        ],
        radius: [
          "FLOAT",
          {
            min: 0.01,
            max: 1024,
            default: 30,
            step: 0.01,
          },
        ],
        ao_blur: [
          "FLOAT",
          {
            min: 0.01,
            max: 1024,
            default: 2.5,
            step: 0.01,
          },
        ],
        specular_threshold: [
          "INT",
          {
            min: 0,
            max: 255,
            default: 25,
            step: 1,
          },
        ],
        enable_specular_masking: [["True", "False"]],
        tile_size: [
          "INT",
          {
            min: 1,
            max: 512,
            default: 1,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE"],
    output_is_list: [false, false, false],
    output_name: ["composited_images", "ssao_images", "specular_mask_images"],
    name: "Image SSAO (Ambient Occlusion)",
    display_name: "Image SSAO (Ambient Occlusion)",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image SSDO (Direct Occlusion)": {
    input: {
      required: {
        images: ["IMAGE"],
        depth_images: ["IMAGE"],
        strength: [
          "FLOAT",
          {
            min: 0,
            max: 5,
            default: 1,
            step: 0.01,
          },
        ],
        radius: [
          "FLOAT",
          {
            min: 0.01,
            max: 1024,
            default: 30,
            step: 0.01,
          },
        ],
        specular_threshold: [
          "INT",
          {
            min: 0,
            max: 255,
            default: 128,
            step: 1,
          },
        ],
        colored_occlusion: [["True", "False"]],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE", "IMAGE"],
    output_is_list: [false, false, false, false],
    output_name: [
      "composited_images",
      "ssdo_images",
      "ssdo_image_masks",
      "light_source_image_masks",
    ],
    name: "Image SSDO (Direct Occlusion)",
    display_name: "Image SSDO (Direct Occlusion)",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Analyze": {
    input: {
      required: {
        image: ["IMAGE"],
        mode: [["Black White Levels", "RGB Levels"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Analyze",
    display_name: "Image Analyze",
    description: "",
    category: "WAS Suite/Image/Analyze",
    output_node: false,
  },
  "Image Aspect Ratio": {
    input: {
      required: {},
      optional: {
        image: ["IMAGE"],
        width: ["NUMBER"],
        height: ["NUMBER"],
      },
    },
    output: ["NUMBER", "FLOAT", "NUMBER", "STRING", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: [
      "aspect_number",
      "aspect_float",
      "is_landscape_bool",
      "aspect_ratio_common",
      "aspect_type",
    ],
    name: "Image Aspect Ratio",
    display_name: "Image Aspect Ratio",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Image Batch": {
    input: {
      required: {},
      optional: {
        images_a: ["IMAGE"],
        images_b: ["IMAGE"],
        images_c: ["IMAGE"],
        images_d: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image Batch",
    display_name: "Image Batch",
    description: "",
    category: "WAS Suite/Image",
    output_node: false,
  },
  "Image Blank": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 4096,
            step: 1,
          },
        ],
        red: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        green: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        blue: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Blank",
    display_name: "Image Blank",
    description: "",
    category: "WAS Suite/Image",
    output_node: false,
  },
  "Image Blend by Mask": {
    input: {
      required: {
        image_a: ["IMAGE"],
        image_b: ["IMAGE"],
        mask: ["IMAGE"],
        blend_percentage: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Blend by Mask",
    display_name: "Image Blend by Mask",
    description: "",
    category: "WAS Suite/Image",
    output_node: false,
  },
  "Image Blend": {
    input: {
      required: {
        image_a: ["IMAGE"],
        image_b: ["IMAGE"],
        blend_percentage: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image Blend",
    display_name: "Image Blend",
    description: "",
    category: "WAS Suite/Image",
    output_node: false,
  },
  "Image Blending Mode": {
    input: {
      required: {
        image_a: ["IMAGE"],
        image_b: ["IMAGE"],
        mode: [
          [
            "add",
            "color",
            "color_burn",
            "color_dodge",
            "darken",
            "difference",
            "exclusion",
            "hard_light",
            "hue",
            "lighten",
            "multiply",
            "overlay",
            "screen",
            "soft_light",
          ],
        ],
        blend_percentage: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image Blending Mode",
    display_name: "Image Blending Mode",
    description: "",
    category: "WAS Suite/Image",
    output_node: false,
  },
  "Image Bloom Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        radius: [
          "FLOAT",
          {
            default: 10,
            min: 0,
            max: 1024,
            step: 0.1,
          },
        ],
        intensity: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Bloom Filter",
    display_name: "Image Bloom Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Canny Filter": {
    input: {
      required: {
        images: ["IMAGE"],
        enable_threshold: [["false", "true"]],
        threshold_low: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        threshold_high: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Canny Filter",
    display_name: "Image Canny Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Chromatic Aberration": {
    input: {
      required: {
        image: ["IMAGE"],
        red_offset: [
          "INT",
          {
            default: 2,
            min: -255,
            max: 255,
            step: 1,
          },
        ],
        green_offset: [
          "INT",
          {
            default: -1,
            min: -255,
            max: 255,
            step: 1,
          },
        ],
        blue_offset: [
          "INT",
          {
            default: 1,
            min: -255,
            max: 255,
            step: 1,
          },
        ],
        intensity: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        fade_radius: [
          "INT",
          {
            default: 12,
            min: 0,
            max: 1024,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Chromatic Aberration",
    display_name: "Image Chromatic Aberration",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Color Palette": {
    input: {
      required: {
        image: ["IMAGE"],
        colors: [
          "INT",
          {
            default: 16,
            min: 8,
            max: 256,
            step: 1,
          },
        ],
        mode: [["Chart", "back_to_back"]],
      },
    },
    output: ["IMAGE", "LIST"],
    output_is_list: [false, false],
    output_name: ["image", "color_palettes"],
    name: "Image Color Palette",
    display_name: "Image Color Palette",
    description: "",
    category: "WAS Suite/Image/Analyze",
    output_node: false,
  },
  "Image Crop Face": {
    input: {
      required: {
        image: ["IMAGE"],
        crop_padding_factor: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 2,
            step: 0.01,
          },
        ],
        cascade_xml: [
          [
            "lbpcascade_animeface.xml",
            "haarcascade_frontalface_default.xml",
            "haarcascade_frontalface_alt.xml",
            "haarcascade_frontalface_alt2.xml",
            "haarcascade_frontalface_alt_tree.xml",
            "haarcascade_profileface.xml",
            "haarcascade_upperbody.xml",
            "haarcascade_eye.xml",
          ],
        ],
      },
    },
    output: ["IMAGE", "CROP_DATA"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "CROP_DATA"],
    name: "Image Crop Face",
    display_name: "Image Crop Face",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Crop Location": {
    input: {
      required: {
        image: ["IMAGE"],
        top: [
          "INT",
          {
            default: 0,
            max: 10000000,
            min: 0,
            step: 1,
          },
        ],
        left: [
          "INT",
          {
            default: 0,
            max: 10000000,
            min: 0,
            step: 1,
          },
        ],
        right: [
          "INT",
          {
            default: 256,
            max: 10000000,
            min: 0,
            step: 1,
          },
        ],
        bottom: [
          "INT",
          {
            default: 256,
            max: 10000000,
            min: 0,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "CROP_DATA"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "CROP_DATA"],
    name: "Image Crop Location",
    display_name: "Image Crop Location",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Crop Square Location": {
    input: {
      required: {
        image: ["IMAGE"],
        x: [
          "INT",
          {
            default: 0,
            max: 24576,
            min: 0,
            step: 1,
          },
        ],
        y: [
          "INT",
          {
            default: 0,
            max: 24576,
            min: 0,
            step: 1,
          },
        ],
        size: [
          "INT",
          {
            default: 256,
            max: 4096,
            min: 5,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "CROP_DATA"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "CROP_DATA"],
    name: "Image Crop Square Location",
    display_name: "Image Crop Square Location",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Displacement Warp": {
    input: {
      required: {
        images: ["IMAGE"],
        displacement_maps: ["IMAGE"],
        amplitude: [
          "FLOAT",
          {
            default: 25,
            min: -4096,
            max: 4096,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Displacement Warp",
    display_name: "Image Displacement Warp",
    description: "",
    category: "WAS Suite/Image/Transform",
    output_node: false,
  },
  "Image Lucy Sharpen": {
    input: {
      required: {
        images: ["IMAGE"],
        iterations: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 12,
            step: 1,
          },
        ],
        kernel_size: [
          "INT",
          {
            default: 3,
            min: 1,
            max: 16,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Lucy Sharpen",
    display_name: "Image Lucy Sharpen",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Paste Face": {
    input: {
      required: {
        image: ["IMAGE"],
        crop_image: ["IMAGE"],
        crop_data: ["CROP_DATA"],
        crop_blending: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        crop_sharpening: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 3,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK_IMAGE"],
    name: "Image Paste Face",
    display_name: "Image Paste Face",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Paste Crop": {
    input: {
      required: {
        image: ["IMAGE"],
        crop_image: ["IMAGE"],
        crop_data: ["CROP_DATA"],
        crop_blending: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        crop_sharpening: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 3,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "IMAGE"],
    name: "Image Paste Crop",
    display_name: "Image Paste Crop",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Paste Crop by Location": {
    input: {
      required: {
        image: ["IMAGE"],
        crop_image: ["IMAGE"],
        top: [
          "INT",
          {
            default: 0,
            max: 10000000,
            min: 0,
            step: 1,
          },
        ],
        left: [
          "INT",
          {
            default: 0,
            max: 10000000,
            min: 0,
            step: 1,
          },
        ],
        right: [
          "INT",
          {
            default: 256,
            max: 10000000,
            min: 0,
            step: 1,
          },
        ],
        bottom: [
          "INT",
          {
            default: 256,
            max: 10000000,
            min: 0,
            step: 1,
          },
        ],
        crop_blending: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        crop_sharpening: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 3,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "IMAGE"],
    name: "Image Paste Crop by Location",
    display_name: "Image Paste Crop by Location",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Pixelate": {
    input: {
      required: {
        images: ["IMAGE"],
        pixelation_size: [
          "FLOAT",
          {
            default: 164,
            min: 16,
            max: 480,
            step: 1,
          },
        ],
        num_colors: [
          "FLOAT",
          {
            default: 16,
            min: 2,
            max: 256,
            step: 1,
          },
        ],
        init_mode: [["k-means++", "random", "none"]],
        max_iterations: [
          "FLOAT",
          {
            default: 100,
            min: 1,
            max: 256,
            step: 1,
          },
        ],
        dither: [["False", "True"]],
        dither_mode: [["FloydSteinberg", "Ordered"]],
      },
      optional: {
        color_palettes: [
          "LIST",
          {
            forceInput: true,
          },
        ],
        color_palette_mode: [
          ["Brightness", "BrightnessAndTonal", "Linear", "Tonal"],
        ],
        reverse_palette: [["False", "True"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Pixelate",
    display_name: "Image Pixelate",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Power Noise": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            max: 4096,
            min: 64,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            max: 4096,
            min: 64,
            step: 1,
          },
        ],
        frequency: [
          "FLOAT",
          {
            default: 0.5,
            max: 10,
            min: 0,
            step: 0.01,
          },
        ],
        attenuation: [
          "FLOAT",
          {
            default: 0.5,
            max: 10,
            min: 0,
            step: 0.01,
          },
        ],
        noise_type: [["grey", "white", "pink", "blue", "green", "mix"]],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image Power Noise",
    display_name: "Image Power Noise",
    description: "",
    category: "WAS Suite/Image/Generate/Noise",
    output_node: false,
  },
  "Image Dragan Photography Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        saturation: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 16,
            step: 0.01,
          },
        ],
        contrast: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 16,
            step: 0.01,
          },
        ],
        brightness: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 16,
            step: 0.01,
          },
        ],
        sharpness: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 6,
            step: 0.01,
          },
        ],
        highpass_radius: [
          "FLOAT",
          {
            default: 6,
            min: 0,
            max: 255,
            step: 0.01,
          },
        ],
        highpass_samples: [
          "INT",
          {
            default: 1,
            min: 0,
            max: 6,
            step: 1,
          },
        ],
        highpass_strength: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 3,
            step: 0.01,
          },
        ],
        colorize: [["true", "false"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Dragan Photography Filter",
    display_name: "Image Dragan Photography Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Edge Detection Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        mode: [["normal", "laplacian"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Edge Detection Filter",
    display_name: "Image Edge Detection Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Film Grain": {
    input: {
      required: {
        image: ["IMAGE"],
        density: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 1,
            step: 0.01,
          },
        ],
        intensity: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 1,
            step: 0.01,
          },
        ],
        highlights: [
          "FLOAT",
          {
            default: 1,
            min: 0.01,
            max: 255,
            step: 0.01,
          },
        ],
        supersample_factor: [
          "INT",
          {
            default: 4,
            min: 1,
            max: 8,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Film Grain",
    display_name: "Image Film Grain",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Filter Adjustments": {
    input: {
      required: {
        image: ["IMAGE"],
        brightness: [
          "FLOAT",
          {
            default: 0,
            min: -1,
            max: 1,
            step: 0.01,
          },
        ],
        contrast: [
          "FLOAT",
          {
            default: 1,
            min: -1,
            max: 2,
            step: 0.01,
          },
        ],
        saturation: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 5,
            step: 0.01,
          },
        ],
        sharpness: [
          "FLOAT",
          {
            default: 1,
            min: -5,
            max: 5,
            step: 0.01,
          },
        ],
        blur: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 16,
            step: 1,
          },
        ],
        gaussian_blur: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1024,
            step: 0.1,
          },
        ],
        edge_enhance: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        detail_enhance: [["false", "true"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Filter Adjustments",
    display_name: "Image Filter Adjustments",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Flip": {
    input: {
      required: {
        images: ["IMAGE"],
        mode: [["horizontal", "vertical"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Flip",
    display_name: "Image Flip",
    description: "",
    category: "WAS Suite/Image/Transform",
    output_node: false,
  },
  "Image Gradient Map": {
    input: {
      required: {
        image: ["IMAGE"],
        gradient_image: ["IMAGE"],
        flip_left_right: [["false", "true"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Gradient Map",
    display_name: "Image Gradient Map",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Generate Gradient": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            max: 4096,
            min: 64,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            max: 4096,
            min: 64,
            step: 1,
          },
        ],
        direction: [["horizontal", "vertical"]],
        tolerance: [
          "INT",
          {
            default: 0,
            max: 255,
            min: 0,
            step: 1,
          },
        ],
        gradient_stops: [
          "STRING",
          {
            default: "0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255",
            multiline: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Generate Gradient",
    display_name: "Image Generate Gradient",
    description: "",
    category: "WAS Suite/Image/Generate",
    output_node: false,
  },
  "Image High Pass Filter": {
    input: {
      required: {
        images: ["IMAGE"],
        radius: [
          "INT",
          {
            default: 10,
            min: 1,
            max: 500,
            step: 1,
          },
        ],
        strength: [
          "FLOAT",
          {
            default: 1.5,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
        color_output: [["true", "false"]],
        neutral_background: [["true", "false"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image High Pass Filter",
    display_name: "Image High Pass Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image History Loader": {
    input: {
      required: {
        image: [["No History"]],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "filename_text"],
    name: "Image History Loader",
    display_name: "Image History Loader",
    description: "",
    category: "WAS Suite/History",
    output_node: false,
  },
  "Image Input Switch": {
    input: {
      required: {
        image_a: ["IMAGE"],
        image_b: ["IMAGE"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Input Switch",
    display_name: "Image Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Image Levels Adjustment": {
    input: {
      required: {
        image: ["IMAGE"],
        black_level: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
        mid_level: [
          "FLOAT",
          {
            default: 127.5,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
        white_level: [
          "FLOAT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Levels Adjustment",
    display_name: "Image Levels Adjustment",
    description: "",
    category: "WAS Suite/Image/Adjustment",
    output_node: false,
  },
  "Image Load": {
    input: {
      required: {
        image_path: [
          "STRING",
          {
            default: "./ComfyUI/input/example.png",
            multiline: false,
          },
        ],
        RGBA: [["false", "true"]],
      },
      optional: {
        filename_text_extension: [["true", "false"]],
      },
    },
    output: ["IMAGE", "MASK", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["image", "mask", "filename_text"],
    name: "Image Load",
    display_name: "Image Load",
    description: "",
    category: "WAS Suite/IO",
    output_node: false,
  },
  "Image Median Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        diameter: [
          "INT",
          {
            default: 2,
            min: 0.1,
            max: 255,
            step: 1,
          },
        ],
        sigma_color: [
          "FLOAT",
          {
            default: 10,
            min: -255,
            max: 255,
            step: 0.1,
          },
        ],
        sigma_space: [
          "FLOAT",
          {
            default: 10,
            min: -255,
            max: 255,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Median Filter",
    display_name: "Image Median Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Mix RGB Channels": {
    input: {
      required: {
        red_channel: ["IMAGE"],
        green_channel: ["IMAGE"],
        blue_channel: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Mix RGB Channels",
    display_name: "Image Mix RGB Channels",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Monitor Effects Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        mode: [["Digital Distortion", "Signal Distortion", "TV Distortion"]],
        amplitude: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 255,
            step: 1,
          },
        ],
        offset: [
          "INT",
          {
            default: 10,
            min: 1,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image Monitor Effects Filter",
    display_name: "Image Monitor Effects Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Nova Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        amplitude: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
        frequency: [
          "FLOAT",
          {
            default: 3.14,
            min: 0,
            max: 100,
            step: 0.001,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Nova Filter",
    display_name: "Image Nova Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Padding": {
    input: {
      required: {
        image: ["IMAGE"],
        feathering: [
          "INT",
          {
            default: 120,
            min: 0,
            max: 2048,
            step: 1,
          },
        ],
        feather_second_pass: [["true", "false"]],
        left_padding: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 48000,
            step: 1,
          },
        ],
        right_padding: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 48000,
            step: 1,
          },
        ],
        top_padding: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 48000,
            step: 1,
          },
        ],
        bottom_padding: [
          "INT",
          {
            default: 512,
            min: 8,
            max: 48000,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "IMAGE"],
    name: "Image Padding",
    display_name: "Image Padding",
    description: "",
    category: "WAS Suite/Image/Transform",
    output_node: false,
  },
  "Image Perlin Noise": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            max: 2048,
            min: 64,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            max: 2048,
            min: 64,
            step: 1,
          },
        ],
        scale: [
          "INT",
          {
            default: 100,
            max: 2048,
            min: 2,
            step: 1,
          },
        ],
        octaves: [
          "INT",
          {
            default: 4,
            max: 8,
            min: 0,
            step: 1,
          },
        ],
        persistence: [
          "FLOAT",
          {
            default: 0.5,
            max: 100,
            min: 0.01,
            step: 0.01,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image Perlin Noise",
    display_name: "Image Perlin Noise",
    description: "",
    category: "WAS Suite/Image/Generate/Noise",
    output_node: false,
  },
  "Image Rembg (Remove Background)": {
    input: {
      required: {
        images: ["IMAGE"],
        transparency: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
        model: [
          [
            "u2net",
            "u2netp",
            "u2net_human_seg",
            "silueta",
            "isnet-general-use",
            "isnet-anime",
          ],
        ],
        post_processing: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        only_mask: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        alpha_matting: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
        alpha_matting_foreground_threshold: [
          "INT",
          {
            default: 240,
            min: 0,
            max: 255,
          },
        ],
        alpha_matting_background_threshold: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 255,
          },
        ],
        alpha_matting_erode_size: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 255,
          },
        ],
        background_color: [
          ["none", "black", "white", "magenta", "chroma green", "chroma blue"],
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Rembg (Remove Background)",
    display_name: "Image Rembg (Remove Background)",
    description: "",
    category: "WAS Suite/Image/AI",
    output_node: false,
  },
  "Image Perlin Power Fractal": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            max: 8192,
            min: 64,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            max: 8192,
            min: 64,
            step: 1,
          },
        ],
        scale: [
          "INT",
          {
            default: 100,
            max: 2048,
            min: 2,
            step: 1,
          },
        ],
        octaves: [
          "INT",
          {
            default: 4,
            max: 8,
            min: 0,
            step: 1,
          },
        ],
        persistence: [
          "FLOAT",
          {
            default: 0.5,
            max: 100,
            min: 0.01,
            step: 0.01,
          },
        ],
        lacunarity: [
          "FLOAT",
          {
            default: 2,
            max: 100,
            min: 0.01,
            step: 0.01,
          },
        ],
        exponent: [
          "FLOAT",
          {
            default: 2,
            max: 100,
            min: 0.01,
            step: 0.01,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image Perlin Power Fractal",
    display_name: "Image Perlin Power Fractal",
    description: "",
    category: "WAS Suite/Image/Generate/Noise",
    output_node: false,
  },
  "Image Remove Background (Alpha)": {
    input: {
      required: {
        images: ["IMAGE"],
        mode: [["background", "foreground"]],
        threshold: [
          "INT",
          {
            default: 127,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        threshold_tolerance: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 24,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Remove Background (Alpha)",
    display_name: "Image Remove Background (Alpha)",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Remove Color": {
    input: {
      required: {
        image: ["IMAGE"],
        target_red: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        target_green: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        target_blue: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        replace_red: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        replace_green: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        replace_blue: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        clip_threshold: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Remove Color",
    display_name: "Image Remove Color",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Resize": {
    input: {
      required: {
        image: ["IMAGE"],
        mode: [["rescale", "resize"]],
        supersample: [["true", "false"]],
        resampling: [["lanczos", "nearest", "bilinear", "bicubic"]],
        rescale_factor: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 16,
            step: 0.01,
          },
        ],
        resize_width: [
          "INT",
          {
            default: 1024,
            min: 1,
            max: 48000,
            step: 1,
          },
        ],
        resize_height: [
          "INT",
          {
            default: 1536,
            min: 1,
            max: 48000,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Resize",
    display_name: "Image Resize",
    description: "",
    category: "WAS Suite/Image/Transform",
    output_node: false,
  },
  "Image Rotate": {
    input: {
      required: {
        images: ["IMAGE"],
        mode: [["transpose", "internal"]],
        rotation: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 360,
            step: 90,
          },
        ],
        sampler: [["nearest", "bilinear", "bicubic"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Rotate",
    display_name: "Image Rotate",
    description: "",
    category: "WAS Suite/Image/Transform",
    output_node: false,
  },
  "Image Rotate Hue": {
    input: {
      required: {
        image: ["IMAGE"],
        hue_shift: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.001,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Rotate Hue",
    display_name: "Image Rotate Hue",
    description: "",
    category: "WAS Suite/Image/Adjustment",
    output_node: false,
  },
  "Image Save": {
    input: {
      required: {
        images: ["IMAGE"],
        output_path: [
          "STRING",
          {
            default: "[time(%Y-%m-%d)]",
            multiline: false,
          },
        ],
        filename_prefix: [
          "STRING",
          {
            default: "ComfyUI",
          },
        ],
        filename_delimiter: [
          "STRING",
          {
            default: "_",
          },
        ],
        filename_number_padding: [
          "INT",
          {
            default: 4,
            min: 1,
            max: 9,
            step: 1,
          },
        ],
        filename_number_start: [["false", "true"]],
        extension: [["png", "jpg", "jpeg", "gif", "tiff", "webp", "bmp"]],
        dpi: [
          "INT",
          {
            default: 300,
            min: 1,
            max: 2400,
            step: 1,
          },
        ],
        quality: [
          "INT",
          {
            default: 100,
            min: 1,
            max: 100,
            step: 1,
          },
        ],
        optimize_image: [["true", "false"]],
        lossless_webp: [["false", "true"]],
        overwrite_mode: [["false", "prefix_as_filename"]],
        show_history: [["false", "true"]],
        show_history_by_prefix: [["true", "false"]],
        embed_workflow: [["true", "false"]],
        show_previews: [["true", "false"]],
      },
      hidden: {
        prompt: "PROMPT",
        extra_pnginfo: "EXTRA_PNGINFO",
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Save",
    display_name: "Image Save",
    description: "",
    category: "WAS Suite/IO",
    output_node: true,
  },
  "Image Seamless Texture": {
    input: {
      required: {
        images: ["IMAGE"],
        blending: [
          "FLOAT",
          {
            default: 0.4,
            max: 1,
            min: 0,
            step: 0.01,
          },
        ],
        tiled: [["true", "false"]],
        tiles: [
          "INT",
          {
            default: 2,
            max: 6,
            min: 2,
            step: 2,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "Image Seamless Texture",
    display_name: "Image Seamless Texture",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Select Channel": {
    input: {
      required: {
        image: ["IMAGE"],
        channel: [["red", "green", "blue"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Select Channel",
    display_name: "Image Select Channel",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Select Color": {
    input: {
      required: {
        image: ["IMAGE"],
        red: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
        green: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
        blue: [
          "INT",
          {
            default: 255,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
        variance: [
          "INT",
          {
            default: 10,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Select Color",
    display_name: "Image Select Color",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Shadows and Highlights": {
    input: {
      required: {
        image: ["IMAGE"],
        shadow_threshold: [
          "FLOAT",
          {
            default: 75,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
        shadow_factor: [
          "FLOAT",
          {
            default: 1.5,
            min: -12,
            max: 12,
            step: 0.1,
          },
        ],
        shadow_smoothing: [
          "FLOAT",
          {
            default: 0.25,
            min: -255,
            max: 255,
            step: 0.1,
          },
        ],
        highlight_threshold: [
          "FLOAT",
          {
            default: 175,
            min: 0,
            max: 255,
            step: 0.1,
          },
        ],
        highlight_factor: [
          "FLOAT",
          {
            default: 0.5,
            min: -12,
            max: 12,
            step: 0.1,
          },
        ],
        highlight_smoothing: [
          "FLOAT",
          {
            default: 0.25,
            min: -255,
            max: 255,
            step: 0.1,
          },
        ],
        simplify_isolation: [
          "FLOAT",
          {
            default: 0,
            min: -255,
            max: 255,
            step: 0.1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE", "IMAGE"],
    output_is_list: [false, false, false],
    output_name: ["image", "shadow_map", "highlight_map"],
    name: "Image Shadows and Highlights",
    display_name: "Image Shadows and Highlights",
    description: "",
    category: "WAS Suite/Image/Adjustment",
    output_node: false,
  },
  "Image Size to Number": {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["NUMBER", "NUMBER", "FLOAT", "FLOAT", "INT", "INT"],
    output_is_list: [false, false, false, false, false, false],
    output_name: [
      "width_num",
      "height_num",
      "width_float",
      "height_float",
      "width_int",
      "height_int",
    ],
    name: "Image Size to Number",
    display_name: "Image Size to Number",
    description: "",
    category: "WAS Suite/Number/Operations",
    output_node: false,
  },
  "Image Stitch": {
    input: {
      required: {
        image_a: ["IMAGE"],
        image_b: ["IMAGE"],
        stitch: [["top", "left", "bottom", "right"]],
        feathering: [
          "INT",
          {
            default: 50,
            min: 0,
            max: 2048,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Stitch",
    display_name: "Image Stitch",
    description: "",
    category: "WAS Suite/Image/Transform",
    output_node: false,
  },
  "Image Style Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        style: [
          [
            "1977",
            "aden",
            "brannan",
            "brooklyn",
            "clarendon",
            "earlybird",
            "fairy tale",
            "gingham",
            "hudson",
            "inkwell",
            "kelvin",
            "lark",
            "lofi",
            "maven",
            "mayfair",
            "moon",
            "nashville",
            "perpetua",
            "reyes",
            "rise",
            "slumber",
            "stinson",
            "toaster",
            "valencia",
            "walden",
            "willow",
            "xpro2",
          ],
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Style Filter",
    display_name: "Image Style Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image Threshold": {
    input: {
      required: {
        image: ["IMAGE"],
        threshold: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Threshold",
    display_name: "Image Threshold",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Tiled": {
    input: {
      required: {
        image: ["IMAGE"],
        num_tiles: [
          "INT",
          {
            default: 4,
            max: 64,
            min: 2,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGES"],
    name: "Image Tiled",
    display_name: "Image Tiled",
    description: "",
    category: "WAS Suite/Image/Process",
    output_node: false,
  },
  "Image Transpose": {
    input: {
      required: {
        image: ["IMAGE"],
        image_overlay: ["IMAGE"],
        width: [
          "INT",
          {
            default: 512,
            min: -48000,
            max: 48000,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            min: -48000,
            max: 48000,
            step: 1,
          },
        ],
        X: [
          "INT",
          {
            default: 0,
            min: -48000,
            max: 48000,
            step: 1,
          },
        ],
        Y: [
          "INT",
          {
            default: 0,
            min: -48000,
            max: 48000,
            step: 1,
          },
        ],
        rotation: [
          "INT",
          {
            default: 0,
            min: -360,
            max: 360,
            step: 1,
          },
        ],
        feathering: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image Transpose",
    display_name: "Image Transpose",
    description: "",
    category: "WAS Suite/Image/Transform",
    output_node: false,
  },
  "Image fDOF Filter": {
    input: {
      required: {
        image: ["IMAGE"],
        depth: ["IMAGE"],
        mode: [["mock", "gaussian", "box"]],
        radius: [
          "INT",
          {
            default: 8,
            min: 1,
            max: 128,
            step: 1,
          },
        ],
        samples: [
          "INT",
          {
            default: 1,
            min: 1,
            max: 3,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Image fDOF Filter",
    display_name: "Image fDOF Filter",
    description: "",
    category: "WAS Suite/Image/Filter",
    output_node: false,
  },
  "Image to Latent Mask": {
    input: {
      required: {
        images: ["IMAGE"],
        channel: [["alpha", "red", "green", "blue"]],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Image to Latent Mask",
    display_name: "Image to Latent Mask",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Image to Noise": {
    input: {
      required: {
        images: ["IMAGE"],
        num_colors: [
          "INT",
          {
            default: 16,
            max: 256,
            min: 2,
            step: 2,
          },
        ],
        black_mix: [
          "INT",
          {
            default: 0,
            max: 20,
            min: 0,
            step: 1,
          },
        ],
        gaussian_mix: [
          "FLOAT",
          {
            default: 0,
            max: 1024,
            min: 0,
            step: 0.1,
          },
        ],
        brightness: [
          "FLOAT",
          {
            default: 1,
            max: 2,
            min: 0,
            step: 0.01,
          },
        ],
        output_mode: [["batch", "list"]],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image to Noise",
    display_name: "Image to Noise",
    description: "",
    category: "WAS Suite/Image/Generate/Noise",
    output_node: false,
  },
  "Image to Seed": {
    input: {
      required: {
        images: ["IMAGE"],
      },
    },
    output: ["INT"],
    output_is_list: [true],
    output_name: ["INT"],
    name: "Image to Seed",
    display_name: "Image to Seed",
    description: "",
    category: "WAS Suite/Image/Analyze",
    output_node: false,
  },
  "Images to RGB": {
    input: {
      required: {
        images: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Images to RGB",
    display_name: "Images to RGB",
    description: "",
    category: "WAS Suite/Image",
    output_node: false,
  },
  "Images to Linear": {
    input: {
      required: {
        images: ["IMAGE"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Images to Linear",
    display_name: "Images to Linear",
    description: "",
    category: "WAS Suite/Image",
    output_node: false,
  },
  "Integer place counter": {
    input: {
      required: {
        int_input: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 10000000,
            step: 1,
          },
        ],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT_PLACES"],
    name: "Integer place counter",
    display_name: "Integer place counter",
    description: "",
    category: "WAS Suite/Integer",
    output_node: false,
  },
  "Image Voronoi Noise Filter": {
    input: {
      required: {
        width: [
          "INT",
          {
            default: 512,
            max: 4096,
            min: 64,
            step: 1,
          },
        ],
        height: [
          "INT",
          {
            default: 512,
            max: 4096,
            min: 64,
            step: 1,
          },
        ],
        density: [
          "INT",
          {
            default: 50,
            max: 256,
            min: 10,
            step: 2,
          },
        ],
        modulator: [
          "INT",
          {
            default: 0,
            max: 8,
            min: 0,
            step: 1,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
      optional: {
        flat: [["False", "True"]],
        RGB_output: [["True", "False"]],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["image"],
    name: "Image Voronoi Noise Filter",
    display_name: "Image Voronoi Noise Filter",
    description: "",
    category: "WAS Suite/Image/Generate/Noise",
    output_node: false,
  },
  "KSampler (WAS)": {
    input: {
      required: {
        model: ["MODEL"],
        seed: ["SEED"],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        latent_image: ["LATENT"],
        denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "KSampler (WAS)",
    display_name: "KSampler (WAS)",
    description: "",
    category: "WAS Suite/Sampling",
    output_node: false,
  },
  "KSampler Cycle": {
    input: {
      required: {
        model: ["MODEL"],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        steps: [
          "INT",
          {
            default: 20,
            min: 1,
            max: 10000,
          },
        ],
        cfg: [
          "FLOAT",
          {
            default: 8,
            min: 0,
            max: 100,
          },
        ],
        sampler_name: [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
          ],
        ],
        scheduler: [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
          ],
        ],
        positive: ["CONDITIONING"],
        negative: ["CONDITIONING"],
        latent_image: ["LATENT"],
        tiled_vae: [["disable", "enable"]],
        latent_upscale: [
          [
            "disable",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp",
          ],
        ],
        upscale_factor: [
          "FLOAT",
          {
            default: 2,
            min: 0.1,
            max: 8,
            step: 0.1,
          },
        ],
        upscale_cycles: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 12,
            step: 1,
          },
        ],
        starting_denoise: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        cycle_denoise: [
          "FLOAT",
          {
            default: 0.5,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        scale_denoise: [["enable", "disable"]],
        scale_sampling: [["bilinear", "bicubic", "nearest", "lanczos"]],
        vae: ["VAE"],
      },
      optional: {
        secondary_model: ["MODEL"],
        secondary_start_cycle: [
          "INT",
          {
            default: 2,
            min: 2,
            max: 16,
            step: 1,
          },
        ],
        upscale_model: ["UPSCALE_MODEL"],
        processor_model: ["UPSCALE_MODEL"],
        pos_additive: ["CONDITIONING"],
        neg_additive: ["CONDITIONING"],
        pos_add_mode: [["increment", "decrement"]],
        pos_add_strength: [
          "FLOAT",
          {
            default: 0.25,
            min: 0.01,
            max: 1,
            step: 0.01,
          },
        ],
        pos_add_strength_scaling: [["enable", "disable"]],
        pos_add_strength_cutoff: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 10,
            step: 0.01,
          },
        ],
        neg_add_mode: [["increment", "decrement"]],
        neg_add_strength: [
          "FLOAT",
          {
            default: 0.25,
            min: 0.01,
            max: 1,
            step: 0.01,
          },
        ],
        neg_add_strength_scaling: [["enable", "disable"]],
        neg_add_strength_cutoff: [
          "FLOAT",
          {
            default: 2,
            min: 0.01,
            max: 10,
            step: 0.01,
          },
        ],
        sharpen_strength: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 10,
            step: 0.01,
          },
        ],
        sharpen_radius: [
          "INT",
          {
            default: 2,
            min: 1,
            max: 12,
            step: 1,
          },
        ],
        steps_scaling: [["enable", "disable"]],
        steps_control: [["decrement", "increment"]],
        steps_scaling_value: [
          "INT",
          {
            default: 10,
            min: 1,
            max: 20,
            step: 1,
          },
        ],
        steps_cutoff: [
          "INT",
          {
            default: 20,
            min: 4,
            max: 1000,
            step: 1,
          },
        ],
        denoise_cutoff: [
          "FLOAT",
          {
            default: 0.25,
            min: 0.01,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["latent(s)"],
    name: "KSampler Cycle",
    display_name: "KSampler Cycle",
    description: "",
    category: "WAS Suite/Sampling",
    output_node: false,
  },
  "Latent Batch": {
    input: {
      required: {},
      optional: {
        latent_a: ["LATENT"],
        latent_b: ["LATENT"],
        latent_c: ["LATENT"],
        latent_d: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["latent"],
    name: "Latent Batch",
    display_name: "Latent Batch",
    description: "",
    category: "WAS Suite/Latent",
    output_node: false,
  },
  "Latent Noise Injection": {
    input: {
      required: {
        samples: ["LATENT"],
        noise_std: [
          "FLOAT",
          {
            default: 0.1,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "Latent Noise Injection",
    display_name: "Latent Noise Injection",
    description: "",
    category: "WAS Suite/Latent/Generate",
    output_node: false,
  },
  "Latent Size to Number": {
    input: {
      required: {
        samples: ["LATENT"],
      },
    },
    output: ["NUMBER", "NUMBER", "FLOAT", "FLOAT", "INT", "INT"],
    output_is_list: [false, false, false, false, false, false],
    output_name: ["tensor_w_num", "tensor_h_num"],
    name: "Latent Size to Number",
    display_name: "Latent Size to Number",
    description: "",
    category: "WAS Suite/Number/Operations",
    output_node: false,
  },
  "Latent Upscale by Factor (WAS)": {
    input: {
      required: {
        samples: ["LATENT"],
        mode: [["area", "bicubic", "bilinear", "nearest"]],
        factor: [
          "FLOAT",
          {
            default: 2,
            min: 0.1,
            max: 8,
            step: 0.01,
          },
        ],
        align: [["true", "false"]],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["LATENT"],
    name: "Latent Upscale by Factor (WAS)",
    display_name: "Latent Upscale by Factor (WAS)",
    description: "",
    category: "WAS Suite/Latent/Transform",
    output_node: false,
  },
  "Load Image Batch": {
    input: {
      required: {
        mode: [["single_image", "incremental_image", "random"]],
        index: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 150000,
            step: 1,
          },
        ],
        label: [
          "STRING",
          {
            default: "Batch 001",
            multiline: false,
          },
        ],
        path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        pattern: [
          "STRING",
          {
            default: "*",
            multiline: false,
          },
        ],
        allow_RGBA_output: [["false", "true"]],
      },
      optional: {
        filename_text_extension: [["true", "false"]],
      },
    },
    output: ["IMAGE", "STRING"],
    output_is_list: [false, false],
    output_name: ["image", "filename_text"],
    name: "Load Image Batch",
    display_name: "Load Image Batch",
    description: "",
    category: "WAS Suite/IO",
    output_node: false,
  },
  "Load Text File": {
    input: {
      required: {
        file_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        dictionary_name: [
          "STRING",
          {
            default: "[filename]",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING", "DICT"],
    output_is_list: [false, false],
    output_name: ["STRING", "DICT"],
    name: "Load Text File",
    display_name: "Load Text File",
    description: "",
    category: "WAS Suite/IO",
    output_node: false,
  },
  "Load Lora": {
    input: {
      required: {
        model: ["MODEL"],
        clip: ["CLIP"],
        lora_name: [
          [
            "None",
            "loras.safetensors",
            "sha256_a0c0f3435cda03febb744cbf940ce1e82d177a5df6c041659ef30404c1a32b56.safetensors",
            "sha256_cdc4c3e276b857b21b9c6308f426baa446027bb734b5bbdeecaa2a06d9a4f41a.safetensors",
            "sha256_fc1790ddec807108bb4125748c37b5b33c23806f2b5f74d1c5b8b19bf68b2284.safetensors",
          ],
        ],
        strength_model: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
        strength_clip: [
          "FLOAT",
          {
            default: 1,
            min: -10,
            max: 10,
            step: 0.01,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["MODEL", "CLIP", "NAME_STRING"],
    name: "Load Lora",
    display_name: "Load Lora",
    description: "",
    category: "WAS Suite/Loaders",
    output_node: false,
  },
  "Lora Input Switch": {
    input: {
      required: {
        model_a: ["MODEL"],
        clip_a: ["CLIP"],
        model_b: ["MODEL"],
        clip_b: ["CLIP"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["MODEL", "CLIP"],
    output_is_list: [false, false],
    output_name: ["MODEL", "CLIP"],
    name: "Lora Input Switch",
    display_name: "Lora Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Masks Add": {
    input: {
      required: {
        masks_a: ["MASK"],
        masks_b: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Masks Add",
    display_name: "Masks Add",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Masks Subtract": {
    input: {
      required: {
        masks_a: ["MASK"],
        masks_b: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Masks Subtract",
    display_name: "Masks Subtract",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Arbitrary Region": {
    input: {
      required: {
        masks: ["MASK"],
        size: [
          "INT",
          {
            default: 256,
            min: 1,
            max: 4096,
            step: 1,
          },
        ],
        threshold: [
          "INT",
          {
            default: 128,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Arbitrary Region",
    display_name: "Mask Arbitrary Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Batch to Mask": {
    input: {
      required: {
        masks: ["MASK"],
        batch_number: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 64,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "Mask Batch to Mask",
    display_name: "Mask Batch to Mask",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Batch": {
    input: {
      optional: {
        masks_a: ["MASK"],
        masks_b: ["MASK"],
        masks_c: ["MASK"],
        masks_d: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["masks"],
    name: "Mask Batch",
    display_name: "Mask Batch",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Ceiling Region": {
    input: {
      required: {
        masks: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Ceiling Region",
    display_name: "Mask Ceiling Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Crop Dominant Region": {
    input: {
      required: {
        masks: ["MASK"],
        padding: [
          "INT",
          {
            default: 24,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Crop Dominant Region",
    display_name: "Mask Crop Dominant Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Crop Minority Region": {
    input: {
      required: {
        masks: ["MASK"],
        padding: [
          "INT",
          {
            default: 24,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Crop Minority Region",
    display_name: "Mask Crop Minority Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Crop Region": {
    input: {
      required: {
        mask: ["MASK"],
        padding: [
          "INT",
          {
            default: 24,
            min: 0,
            max: 4096,
            step: 1,
          },
        ],
        region_type: [["dominant", "minority"]],
      },
    },
    output: ["MASK", "CROP_DATA", "INT", "INT", "INT", "INT", "INT", "INT"],
    output_is_list: [false, false, false, false, false, false, false, false],
    output_name: [
      "cropped_mask",
      "crop_data",
      "top_int",
      "left_int",
      "right_int",
      "bottom_int",
      "width_int",
      "height_int",
    ],
    name: "Mask Crop Region",
    display_name: "Mask Crop Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Paste Region": {
    input: {
      required: {
        mask: ["MASK"],
        crop_mask: ["MASK"],
        crop_data: ["CROP_DATA"],
        crop_blending: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
        crop_sharpening: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 3,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK", "MASK"],
    output_is_list: [false, false],
    output_name: ["MASK", "MASK"],
    name: "Mask Paste Region",
    display_name: "Mask Paste Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Dilate Region": {
    input: {
      required: {
        masks: ["MASK"],
        iterations: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 64,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Dilate Region",
    display_name: "Mask Dilate Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Dominant Region": {
    input: {
      required: {
        masks: ["MASK"],
        threshold: [
          "INT",
          {
            default: 128,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Dominant Region",
    display_name: "Mask Dominant Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Erode Region": {
    input: {
      required: {
        masks: ["MASK"],
        iterations: [
          "INT",
          {
            default: 5,
            min: 1,
            max: 64,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Erode Region",
    display_name: "Mask Erode Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Fill Holes": {
    input: {
      required: {
        masks: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Fill Holes",
    display_name: "Mask Fill Holes",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Floor Region": {
    input: {
      required: {
        masks: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Floor Region",
    display_name: "Mask Floor Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Gaussian Region": {
    input: {
      required: {
        masks: ["MASK"],
        radius: [
          "FLOAT",
          {
            default: 5,
            min: 0,
            max: 1024,
            step: 0.1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Gaussian Region",
    display_name: "Mask Gaussian Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Invert": {
    input: {
      required: {
        masks: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Invert",
    display_name: "Mask Invert",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Minority Region": {
    input: {
      required: {
        masks: ["MASK"],
        threshold: [
          "INT",
          {
            default: 128,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Minority Region",
    display_name: "Mask Minority Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Smooth Region": {
    input: {
      required: {
        masks: ["MASK"],
        sigma: [
          "FLOAT",
          {
            default: 5,
            min: 0,
            max: 128,
            step: 0.1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Smooth Region",
    display_name: "Mask Smooth Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Mask Threshold Region": {
    input: {
      required: {
        masks: ["MASK"],
        black_threshold: [
          "INT",
          {
            default: 75,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        white_threshold: [
          "INT",
          {
            default: 175,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASKS"],
    name: "Mask Threshold Region",
    display_name: "Mask Threshold Region",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Masks Combine Regions": {
    input: {
      required: {
        mask_a: ["MASK"],
        mask_b: ["MASK"],
      },
      optional: {
        mask_c: ["MASK"],
        mask_d: ["MASK"],
        mask_e: ["MASK"],
        mask_f: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "Masks Combine Regions",
    display_name: "Masks Combine Regions",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Masks Combine Batch": {
    input: {
      required: {
        masks: ["MASK"],
      },
    },
    output: ["MASK"],
    output_is_list: [false],
    output_name: ["MASK"],
    name: "Masks Combine Batch",
    display_name: "Masks Combine Batch",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "MiDaS Model Loader": {
    input: {
      required: {
        midas_model: [["DPT_Large", "DPT_Hybrid"]],
      },
    },
    output: ["MIDAS_MODEL"],
    output_is_list: [false],
    output_name: ["midas_model"],
    name: "MiDaS Model Loader",
    display_name: "MiDaS Model Loader",
    description: "",
    category: "WAS Suite/Loaders",
    output_node: false,
  },
  "MiDaS Depth Approximation": {
    input: {
      required: {
        image: ["IMAGE"],
        use_cpu: [["false", "true"]],
        midas_type: [["DPT_Large", "DPT_Hybrid"]],
        invert_depth: [["false", "true"]],
      },
      optional: {
        midas_model: ["MIDAS_MODEL"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["images"],
    name: "MiDaS Depth Approximation",
    display_name: "MiDaS Depth Approximation",
    description: "",
    category: "WAS Suite/Image/AI",
    output_node: false,
  },
  "MiDaS Mask Image": {
    input: {
      required: {
        image: ["IMAGE"],
        use_cpu: [["false", "true"]],
        midas_model: [["DPT_Large", "DPT_Hybrid", "DPT_Small"]],
        remove: [["background", "foregroud"]],
        threshold: [["false", "true"]],
        threshold_low: [
          "FLOAT",
          {
            default: 10,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        threshold_mid: [
          "FLOAT",
          {
            default: 200,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        threshold_high: [
          "FLOAT",
          {
            default: 210,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        smoothing: [
          "FLOAT",
          {
            default: 0.25,
            min: 0,
            max: 16,
            step: 0.01,
          },
        ],
        background_red: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        background_green: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
        background_blue: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 255,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "IMAGE"],
    name: "MiDaS Mask Image",
    display_name: "MiDaS Mask Image",
    description: "",
    category: "WAS Suite/Image/AI",
    output_node: false,
  },
  "Model Input Switch": {
    input: {
      required: {
        model_a: ["MODEL"],
        model_b: ["MODEL"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["MODEL"],
    output_is_list: [false],
    output_name: ["MODEL"],
    name: "Model Input Switch",
    display_name: "Model Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Number Counter": {
    input: {
      required: {
        number_type: [["integer", "float"]],
        mode: [
          ["increment", "decrement", "increment_to_stop", "decrement_to_stop"],
        ],
        start: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
            step: 0.01,
          },
        ],
        stop: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
            step: 0.01,
          },
        ],
        step: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 99999,
            step: 0.01,
          },
        ],
      },
      optional: {
        reset_bool: ["NUMBER"],
      },
      hidden: {
        unique_id: "UNIQUE_ID",
      },
    },
    output: ["NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["number", "float", "int"],
    name: "Number Counter",
    display_name: "Number Counter",
    description: "",
    category: "WAS Suite/Number",
    output_node: false,
  },
  "Number Operation": {
    input: {
      required: {
        number_a: ["NUMBER"],
        number_b: ["NUMBER"],
        operation: [
          [
            "addition",
            "subtraction",
            "division",
            "floor division",
            "multiplication",
            "exponentiation",
            "modulus",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal",
          ],
        ],
      },
    },
    output: ["NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["NUMBER", "FLOAT", "INT"],
    name: "Number Operation",
    display_name: "Number Operation",
    description: "",
    category: "WAS Suite/Number/Operations",
    output_node: false,
  },
  "Number to Float": {
    input: {
      required: {
        number: ["NUMBER"],
      },
    },
    output: ["FLOAT"],
    output_is_list: [false],
    output_name: ["FLOAT"],
    name: "Number to Float",
    display_name: "Number to Float",
    description: "",
    category: "WAS Suite/Number/Operations",
    output_node: false,
  },
  "Number Input Switch": {
    input: {
      required: {
        number_a: ["NUMBER"],
        number_b: ["NUMBER"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["NUMBER", "FLOAT", "INT"],
    name: "Number Input Switch",
    display_name: "Number Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Number Input Condition": {
    input: {
      required: {
        number_a: ["NUMBER"],
        number_b: ["NUMBER"],
        return_boolean: [["false", "true"]],
        comparison: [
          [
            "and",
            "or",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal",
            "divisible by",
            "if A odd",
            "if A even",
            "if A prime",
            "factor of",
          ],
        ],
      },
    },
    output: ["NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["NUMBER", "FLOAT", "INT"],
    name: "Number Input Condition",
    display_name: "Number Input Condition",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Number Multiple Of": {
    input: {
      required: {
        number: ["NUMBER"],
        multiple: [
          "INT",
          {
            default: 8,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["NUMBER", "FLOAT", "INT"],
    name: "Number Multiple Of",
    display_name: "Number Multiple Of",
    description: "",
    category: "WAS Suite/Number/Functions",
    output_node: false,
  },
  "Number PI": {
    input: {
      required: {},
    },
    output: ["NUMBER", "FLOAT"],
    output_is_list: [false, false],
    output_name: ["NUMBER", "FLOAT"],
    name: "Number PI",
    display_name: "Number PI",
    description: "",
    category: "WAS Suite/Number",
    output_node: false,
  },
  "Number to Int": {
    input: {
      required: {
        number: ["NUMBER"],
      },
    },
    output: ["INT"],
    output_is_list: [false],
    output_name: ["INT"],
    name: "Number to Int",
    display_name: "Number to Int",
    description: "",
    category: "WAS Suite/Number/Operations",
    output_node: false,
  },
  "Number to Seed": {
    input: {
      required: {
        number: ["NUMBER"],
      },
    },
    output: ["SEED"],
    output_is_list: [false],
    output_name: ["SEED"],
    name: "Number to Seed",
    display_name: "Number to Seed",
    description: "",
    category: "WAS Suite/Number/Operations",
    output_node: false,
  },
  "Number to String": {
    input: {
      required: {
        number: ["NUMBER"],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Number to String",
    display_name: "Number to String",
    description: "",
    category: "WAS Suite/Number/Operations",
    output_node: false,
  },
  "Number to Text": {
    input: {
      required: {
        number: ["NUMBER"],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Number to Text",
    display_name: "Number to Text",
    description: "",
    category: "WAS Suite/Number/Operations",
    output_node: false,
  },
  "Boolean To Text": {
    input: {
      required: {
        boolean: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Boolean To Text",
    display_name: "Boolean To Text",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Prompt Styles Selector": {
    input: {
      required: {
        style: [["None"]],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["positive_string", "negative_string"],
    name: "Prompt Styles Selector",
    display_name: "Prompt Styles Selector",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Prompt Multiple Styles Selector": {
    input: {
      required: {
        style1: [["None"]],
        style2: [["None"]],
        style3: [["None"]],
        style4: [["None"]],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, false],
    output_name: ["positive_string", "negative_string"],
    name: "Prompt Multiple Styles Selector",
    display_name: "Prompt Multiple Styles Selector",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Random Number": {
    input: {
      required: {
        number_type: [["integer", "float", "bool"]],
        minimum: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        maximum: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["NUMBER", "FLOAT", "INT"],
    name: "Random Number",
    display_name: "Random Number",
    description: "",
    category: "WAS Suite/Number",
    output_node: false,
  },
  "Save Text File": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        path: [
          "STRING",
          {
            default: "./ComfyUI/output/[time(%Y-%m-%d)]",
            multiline: false,
          },
        ],
        filename_prefix: [
          "STRING",
          {
            default: "ComfyUI",
          },
        ],
        filename_delimiter: [
          "STRING",
          {
            default: "_",
          },
        ],
        filename_number_padding: [
          "INT",
          {
            default: 4,
            min: 0,
            max: 9,
            step: 1,
          },
        ],
      },
      optional: {
        file_extension: [
          "STRING",
          {
            default: ".txt",
          },
        ],
        encoding: [
          "STRING",
          {
            default: "utf-8",
          },
        ],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "Save Text File",
    display_name: "Save Text File",
    description: "",
    category: "WAS Suite/IO",
    output_node: true,
  },
  Seed: {
    input: {
      required: {
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["SEED", "NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: ["seed", "number", "float", "int"],
    name: "Seed",
    display_name: "Seed",
    description: "",
    category: "WAS Suite/Number",
    output_node: false,
  },
  "Tensor Batch to Image": {
    input: {
      required: {
        images_batch: ["IMAGE"],
        batch_image_number: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 64,
            step: 1,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Tensor Batch to Image",
    display_name: "Tensor Batch to Image",
    description: "",
    category: "WAS Suite/Latent/Transform",
    output_node: false,
  },
  "BLIP Analyze Image": {
    input: {
      required: {
        images: ["IMAGE"],
        mode: [["caption", "interrogate"]],
        question: [
          "STRING",
          {
            default: "What does the background consist of?",
            multiline: true,
            dynamicPrompts: false,
          },
        ],
        blip_model: ["BLIP_MODEL"],
      },
      optional: {
        min_length: [
          "INT",
          {
            min: 1,
            max: 1024,
            default: 24,
          },
        ],
        max_length: [
          "INT",
          {
            min: 2,
            max: 1024,
            default: 64,
          },
        ],
        num_beams: [
          "INT",
          {
            min: 1,
            max: 12,
            default: 5,
          },
        ],
        no_repeat_ngram_size: [
          "INT",
          {
            min: 1,
            max: 12,
            default: 3,
          },
        ],
        early_stopping: [
          "BOOLEAN",
          {
            default: false,
          },
        ],
      },
    },
    output: ["STRING", "STRING"],
    output_is_list: [false, true],
    output_name: ["STRING", "STRING"],
    name: "BLIP Analyze Image",
    display_name: "BLIP Analyze Image",
    description: "",
    category: "WAS Suite/Text/AI",
    output_node: false,
  },
  "SAM Model Loader": {
    input: {
      required: {
        model_size: [["ViT-H", "ViT-L", "ViT-B"]],
      },
    },
    output: ["SAM_MODEL"],
    output_is_list: [false],
    output_name: ["SAM_MODEL"],
    name: "SAM Model Loader",
    display_name: "SAM Model Loader",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "SAM Parameters": {
    input: {
      required: {
        points: [
          "STRING",
          {
            default: "[128, 128]; [0, 0]",
            multiline: false,
          },
        ],
        labels: [
          "STRING",
          {
            default: "[1, 0]",
            multiline: false,
          },
        ],
      },
    },
    output: ["SAM_PARAMETERS"],
    output_is_list: [false],
    output_name: ["SAM_PARAMETERS"],
    name: "SAM Parameters",
    display_name: "SAM Parameters",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "SAM Parameters Combine": {
    input: {
      required: {
        sam_parameters_a: ["SAM_PARAMETERS"],
        sam_parameters_b: ["SAM_PARAMETERS"],
      },
    },
    output: ["SAM_PARAMETERS"],
    output_is_list: [false],
    output_name: ["SAM_PARAMETERS"],
    name: "SAM Parameters Combine",
    display_name: "SAM Parameters Combine",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "SAM Image Mask": {
    input: {
      required: {
        sam_model: ["SAM_MODEL"],
        sam_parameters: ["SAM_PARAMETERS"],
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE", "MASK"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "MASK"],
    name: "SAM Image Mask",
    display_name: "SAM Image Mask",
    description: "",
    category: "WAS Suite/Image/Masking",
    output_node: false,
  },
  "Samples Passthrough (Stat System)": {
    input: {
      required: {
        samples: ["LATENT"],
      },
    },
    output: ["LATENT"],
    output_is_list: [false],
    output_name: ["samples"],
    name: "Samples Passthrough (Stat System)",
    display_name: "Samples Passthrough (Stat System)",
    description: "",
    category: "WAS Suite/Debug",
    output_node: false,
  },
  "String to Text": {
    input: {
      required: {
        string: ["STRING", {}],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "String to Text",
    display_name: "String to Text",
    description: "",
    category: "WAS Suite/Text/Operations",
    output_node: false,
  },
  "Image Bounds": {
    input: {
      required: {
        image: ["IMAGE"],
      },
    },
    output: ["IMAGE_BOUNDS"],
    output_is_list: [false],
    output_name: ["IMAGE_BOUNDS"],
    name: "Image Bounds",
    display_name: "Image Bounds",
    description: "",
    category: "WAS Suite/Image/Bound",
    output_node: false,
  },
  "Inset Image Bounds": {
    input: {
      required: {
        image_bounds: ["IMAGE_BOUNDS"],
        inset_left: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        inset_right: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        inset_top: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        inset_bottom: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE_BOUNDS"],
    output_is_list: [false],
    output_name: ["IMAGE_BOUNDS"],
    name: "Inset Image Bounds",
    display_name: "Inset Image Bounds",
    description: "",
    category: "WAS Suite/Image/Bound",
    output_node: false,
  },
  "Bounded Image Blend": {
    input: {
      required: {
        target: ["IMAGE"],
        target_bounds: ["IMAGE_BOUNDS"],
        source: ["IMAGE"],
        blend_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
          },
        ],
        feathering: [
          "INT",
          {
            default: 16,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Bounded Image Blend",
    display_name: "Bounded Image Blend",
    description: "",
    category: "WAS Suite/Image/Bound",
    output_node: false,
  },
  "Bounded Image Blend with Mask": {
    input: {
      required: {
        target: ["IMAGE"],
        target_mask: ["MASK"],
        target_bounds: ["IMAGE_BOUNDS"],
        source: ["IMAGE"],
        blend_factor: [
          "FLOAT",
          {
            default: 1,
            min: 0,
            max: 1,
          },
        ],
        feathering: [
          "INT",
          {
            default: 16,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Bounded Image Blend with Mask",
    display_name: "Bounded Image Blend with Mask",
    description: "",
    category: "WAS Suite/Image/Bound",
    output_node: false,
  },
  "Bounded Image Crop": {
    input: {
      required: {
        image: ["IMAGE"],
        image_bounds: ["IMAGE_BOUNDS"],
      },
    },
    output: ["IMAGE"],
    output_is_list: [false],
    output_name: ["IMAGE"],
    name: "Bounded Image Crop",
    display_name: "Bounded Image Crop",
    description: "",
    category: "WAS Suite/Image/Bound",
    output_node: false,
  },
  "Bounded Image Crop with Mask": {
    input: {
      required: {
        image: ["IMAGE"],
        mask: ["MASK"],
        padding_left: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        padding_right: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        padding_top: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        padding_bottom: [
          "INT",
          {
            default: 64,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["IMAGE", "IMAGE_BOUNDS"],
    output_is_list: [false, false],
    output_name: ["IMAGE", "IMAGE_BOUNDS"],
    name: "Bounded Image Crop with Mask",
    display_name: "Bounded Image Crop with Mask",
    description: "",
    category: "WAS Suite/Image/Bound",
    output_node: false,
  },
  "Image Bounds to Console": {
    input: {
      required: {
        image_bounds: ["IMAGE_BOUNDS"],
        label: [
          "STRING",
          {
            default: "Debug to Console",
            multiline: false,
          },
        ],
      },
    },
    output: ["IMAGE_BOUNDS"],
    output_is_list: [false],
    output_name: ["IMAGE_BOUNDS"],
    name: "Image Bounds to Console",
    display_name: "Image Bounds to Console",
    description: "",
    category: "WAS Suite/Debug",
    output_node: true,
  },
  "Text Dictionary Update": {
    input: {
      required: {
        dictionary_a: ["DICT"],
        dictionary_b: ["DICT"],
      },
      optional: {
        dictionary_c: ["DICT"],
        dictionary_d: ["DICT"],
      },
    },
    output: ["DICT"],
    output_is_list: [false],
    output_name: ["DICT"],
    name: "Text Dictionary Update",
    display_name: "Text Dictionary Update",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Dictionary Get": {
    input: {
      required: {
        dictionary: ["DICT"],
        key: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
      optional: {
        default_value: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Dictionary Get",
    display_name: "Text Dictionary Get",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Dictionary Convert": {
    input: {
      required: {
        dictionary_text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["DICT"],
    output_is_list: [false],
    output_name: ["DICT"],
    name: "Text Dictionary Convert",
    display_name: "Text Dictionary Convert",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Dictionary New": {
    input: {
      required: {
        key_1: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        value_1: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
      optional: {
        key_2: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        value_2: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        key_3: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        value_3: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        key_4: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        value_4: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        key_5: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        value_5: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["DICT"],
    output_is_list: [false],
    output_name: ["DICT"],
    name: "Text Dictionary New",
    display_name: "Text Dictionary New",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Dictionary Keys": {
    input: {
      required: {
        dictionary: ["DICT"],
      },
      optional: {},
    },
    output: ["LIST"],
    output_is_list: [false],
    output_name: ["LIST"],
    name: "Text Dictionary Keys",
    display_name: "Text Dictionary Keys",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Dictionary To Text": {
    input: {
      required: {
        dictionary: ["DICT"],
      },
      optional: {},
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Dictionary To Text",
    display_name: "Text Dictionary To Text",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Add Tokens": {
    input: {
      required: {
        tokens: [
          "STRING",
          {
            default: "[hello]: world",
            multiline: true,
          },
        ],
        print_current_tokens: [["false", "true"]],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "Text Add Tokens",
    display_name: "Text Add Tokens",
    description: "",
    category: "WAS Suite/Text/Tokens",
    output_node: true,
  },
  "Text Add Token by Input": {
    input: {
      required: {
        token_name: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        token_value: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        print_current_tokens: [["false", "true"]],
      },
    },
    output: [],
    output_is_list: [],
    output_name: [],
    name: "Text Add Token by Input",
    display_name: "Text Add Token by Input",
    description: "",
    category: "WAS Suite/Text/Tokens",
    output_node: true,
  },
  "Text Compare": {
    input: {
      required: {
        text_a: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_b: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        mode: [["similarity", "difference"]],
        tolerance: [
          "FLOAT",
          {
            default: 0,
            min: 0,
            max: 1,
            step: 0.01,
          },
        ],
      },
    },
    output: ["STRING", "STRING", "BOOLEAN", "NUMBER", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: [
      "TEXT_A_PASS",
      "TEXT_B_PASS",
      "BOOLEAN",
      "SCORE_NUMBER",
      "COMPARISON_TEXT",
    ],
    name: "Text Compare",
    display_name: "Text Compare",
    description: "",
    category: "WAS Suite/Text/Search",
    output_node: false,
  },
  "Text Concatenate": {
    input: {
      required: {
        delimiter: [
          "STRING",
          {
            default: ", ",
          },
        ],
        clean_whitespace: [["true", "false"]],
      },
      optional: {
        text_a: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_b: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_c: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_d: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Concatenate",
    display_name: "Text Concatenate",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text File History Loader": {
    input: {
      required: {
        file: [["No History"]],
        dictionary_name: [
          "STRING",
          {
            default: "[filename]",
            multiline: true,
          },
        ],
      },
    },
    output: ["STRING", "DICT"],
    output_is_list: [false, false],
    output_name: ["STRING", "DICT"],
    name: "Text File History Loader",
    display_name: "Text File History Loader",
    description: "",
    category: "WAS Suite/History",
    output_node: false,
  },
  "Text Find and Replace by Dictionary": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        dictionary: ["DICT"],
        replacement_key: [
          "STRING",
          {
            default: "__",
            multiline: false,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Find and Replace by Dictionary",
    display_name: "Text Find and Replace by Dictionary",
    description: "",
    category: "WAS Suite/Text/Search",
    output_node: false,
  },
  "Text Find and Replace Input": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        find: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        replace: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int",
    ],
    name: "Text Find and Replace Input",
    display_name: "Text Find and Replace Input",
    description: "",
    category: "WAS Suite/Text/Search",
    output_node: false,
  },
  "Text Find and Replace": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        find: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        replace: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING", "NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false, false],
    output_name: [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int",
    ],
    name: "Text Find and Replace",
    display_name: "Text Find and Replace",
    description: "",
    category: "WAS Suite/Text/Search",
    output_node: false,
  },
  "Text Find": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        substring: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        pattern: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: "BOOLEAN",
    output_is_list: [false, false, false, false, false, false, false],
    output_name: "found",
    name: "Text Find",
    display_name: "Text Find",
    description: "",
    category: "WAS Suite/Text/Search",
    output_node: false,
  },
  "Text Input Switch": {
    input: {
      required: {
        text_a: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_b: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Input Switch",
    display_name: "Text Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Text List": {
    input: {
      required: {},
      optional: {
        text_a: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_b: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_c: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_d: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_e: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_f: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_g: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["LIST"],
    output_is_list: [false],
    output_name: ["LIST"],
    name: "Text List",
    display_name: "Text List",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text List Concatenate": {
    input: {
      required: {},
      optional: {
        list_a: [
          "LIST",
          {
            forceInput: true,
          },
        ],
        list_b: [
          "LIST",
          {
            forceInput: true,
          },
        ],
        list_c: [
          "LIST",
          {
            forceInput: true,
          },
        ],
        list_d: [
          "LIST",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["LIST"],
    output_is_list: [false],
    output_name: ["LIST"],
    name: "Text List Concatenate",
    display_name: "Text List Concatenate",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text List to Text": {
    input: {
      required: {
        delimiter: [
          "STRING",
          {
            default: ", ",
          },
        ],
        text_list: [
          "LIST",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text List to Text",
    display_name: "Text List to Text",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Load Line From File": {
    input: {
      required: {
        file_path: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        dictionary_name: [
          "STRING",
          {
            default: "[filename]",
            multiline: false,
          },
        ],
        label: [
          "STRING",
          {
            default: "TextBatch",
            multiline: false,
          },
        ],
        mode: [["automatic", "index"]],
        index: [
          "INT",
          {
            default: 0,
            min: 0,
            step: 1,
          },
        ],
      },
      optional: {
        multiline_text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "DICT"],
    output_is_list: [false, false],
    output_name: ["line_text", "dictionary"],
    name: "Text Load Line From File",
    display_name: "Text Load Line From File",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Multiline": {
    input: {
      required: {
        text: [
          "STRING",
          {
            default: "",
            multiline: true,
            dynamicPrompts: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Multiline",
    display_name: "Text Multiline",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Multiline (Code Compatible)": {
    input: {
      required: {
        text: [
          "STRING",
          {
            default: "",
            multiline: true,
            dynamicPrompts: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Multiline (Code Compatible)",
    display_name: "Text Multiline (Code Compatible)",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Parse A1111 Embeddings": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Parse A1111 Embeddings",
    display_name: "Text Parse A1111 Embeddings",
    description: "",
    category: "WAS Suite/Text/Parse",
    output_node: false,
  },
  "Text Parse Noodle Soup Prompts": {
    input: {
      required: {
        mode: [["Noodle Soup Prompts", "Wildcards"]],
        noodle_key: [
          "STRING",
          {
            default: "__",
            multiline: false,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Parse Noodle Soup Prompts",
    display_name: "Text Parse Noodle Soup Prompts",
    description: "",
    category: "WAS Suite/Text/Parse",
    output_node: true,
  },
  "Text Parse Tokens": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Parse Tokens",
    display_name: "Text Parse Tokens",
    description: "",
    category: "WAS Suite/Text/Tokens",
    output_node: false,
  },
  "Text Random Line": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Random Line",
    display_name: "Text Random Line",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Random Prompt": {
    input: {
      required: {
        search_seed: [
          "STRING",
          {
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Random Prompt",
    display_name: "Text Random Prompt",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text String": {
    input: {
      required: {
        text: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
      optional: {
        text_b: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        text_c: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        text_d: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING", "STRING", "STRING", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["STRING", "STRING", "STRING", "STRING"],
    name: "Text String",
    display_name: "Text String",
    description: "",
    category: "WAS Suite/Text",
    output_node: false,
  },
  "Text Contains": {
    input: {
      required: {
        text: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
        sub_text: [
          "STRING",
          {
            default: "",
            multiline: false,
          },
        ],
      },
      optional: {
        case_insensitive: [
          "BOOLEAN",
          {
            default: true,
          },
        ],
      },
    },
    output: ["BOOLEAN"],
    output_is_list: [false],
    output_name: ["BOOLEAN"],
    name: "Text Contains",
    display_name: "Text Contains",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Text Shuffle": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        separator: [
          "STRING",
          {
            default: ",",
            multiline: false,
          },
        ],
        seed: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 18446744073709552000,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Shuffle",
    display_name: "Text Shuffle",
    description: "",
    category: "WAS Suite/Text/Operations",
    output_node: false,
  },
  "Text Sort": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        separator: [
          "STRING",
          {
            default: ", ",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text Sort",
    display_name: "Text Sort",
    description: "",
    category: "WAS Suite/Text/Operations",
    output_node: false,
  },
  "Text to Conditioning": {
    input: {
      required: {
        clip: ["CLIP"],
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["CONDITIONING"],
    output_is_list: [false],
    output_name: ["CONDITIONING"],
    name: "Text to Conditioning",
    display_name: "Text to Conditioning",
    description: "",
    category: "WAS Suite/Text/Operations",
    output_node: false,
  },
  "Text to Console": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        label: [
          "STRING",
          {
            default: "Text Output",
            multiline: false,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text to Console",
    display_name: "Text to Console",
    description: "",
    category: "WAS Suite/Debug",
    output_node: true,
  },
  "Text to Number": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["NUMBER"],
    output_is_list: [false],
    output_name: ["NUMBER"],
    name: "Text to Number",
    display_name: "Text to Number",
    description: "",
    category: "WAS Suite/Text/Operations",
    output_node: false,
  },
  "Text to String": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING"],
    output_is_list: [false],
    output_name: ["STRING"],
    name: "Text to String",
    display_name: "Text to String",
    description: "",
    category: "WAS Suite/Text/Operations",
    output_node: false,
  },
  "Text String Truncate": {
    input: {
      required: {
        text: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        truncate_by: [["characters", "words"]],
        truncate_from: [["end", "beginning"]],
        truncate_to: [
          "INT",
          {
            default: 10,
            min: -99999999,
            max: 99999999,
            step: 1,
          },
        ],
      },
      optional: {
        text_b: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_c: [
          "STRING",
          {
            forceInput: true,
          },
        ],
        text_d: [
          "STRING",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["STRING", "STRING", "STRING", "STRING"],
    output_is_list: [false, false, false, false],
    output_name: ["STRING", "STRING", "STRING", "STRING"],
    name: "Text String Truncate",
    display_name: "Text String Truncate",
    description: "",
    category: "WAS Suite/Text/Operations",
    output_node: false,
  },
  "True Random.org Number Generator": {
    input: {
      required: {
        api_key: [
          "STRING",
          {
            default: "00000000-0000-0000-0000-000000000000",
            multiline: false,
          },
        ],
        minimum: [
          "FLOAT",
          {
            default: 0,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        maximum: [
          "FLOAT",
          {
            default: 10000000,
            min: -18446744073709552000,
            max: 18446744073709552000,
          },
        ],
        mode: [["random", "fixed"]],
      },
    },
    output: ["NUMBER", "FLOAT", "INT"],
    output_is_list: [false, false, false],
    output_name: ["NUMBER", "FLOAT", "INT"],
    name: "True Random.org Number Generator",
    display_name: "True Random.org Number Generator",
    description: "",
    category: "WAS Suite/Number",
    output_node: false,
  },
  "unCLIP Checkpoint Loader": {
    input: {
      required: {
        ckpt_name: [
          [
            "checkpoints.safetensors",
            "sha256_010be7341cd98a136da775330ba3eb4e87025c6cfd2f5455dc64daee2200ae98.safetensors",
            "sha256_1449e5b0b9de87b0f414c5f29cb11ce3b3dc61fa2b320e784c9441720bf7b766.safetensors",
            "sha256_15012c538f503ce2ebfc2c8547b268c75ccdaff7a281db55399940ff1d70e21d.safetensors",
            "sha256_304cb51b4cf94a110f360747f8c8d5ea33de937992459875cdafe3ded9ebf27d.safetensors",
            "sha256_31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b.safetensors",
            "sha256_3eef33ec7633122ca23b1e5ef167faa048b5a0845768694d5e8070138ac013ce.safetensors",
            "sha256_54ef3e3610eee7f0f6c9f9b82eee26aa404598512d800494d1db344e3bc560b1.safetensors",
            "sha256_6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa.safetensors",
            "sha256_6f4f816f9d59295208d1136b7293ad3f7cc6b42b1e72cc5e5b2c5c728d8eeaa2.safetensors",
            "sha256_912c9dc74f5855175c31a7993f863a043ac8dcc31732b324cd05d75cd7e16844.safetensors",
            "sha256_a4f3e1526c5dc4fcbe342f5c410d83ae202c7a415fcefcbb92e0f93fcd0a87c3.safetensors",
            "sha256_a8f1846de1985cf0473fac6d8c0ef17c9498a90d1c19906e944134c5572275d0.safetensors",
            "sha256_c8df560d2992ac04299412be6a36fa53a4e7a1b74f27b94867ad3f84f4b425a5.safetensors",
            "sha256_c9e3e68f89b8e38689e1097d4be4573cf308de4e3fd044c64ca697bdb4aa8bca.safetensors",
            "sha256_d6b4207a8ea237660de15b58ce9bf7195d5595d3f99bdaf1c6ce87db88700cb5.safetensors",
            "sha256_f243aabb88e0de0566391a2252cc30e3285bc86d55347373d7131d38ad162572.safetensors",
            "sha256_fdbe56354b8f876b736f24d3ad867ecd4140c019f57642ec8ddd878088d44f64.safetensors",
          ],
        ],
      },
    },
    output: ["MODEL", "CLIP", "VAE", "CLIP_VISION", "STRING"],
    output_is_list: [false, false, false, false, false],
    output_name: ["MODEL", "CLIP", "VAE", "CLIP_VISION", "NAME_STRING"],
    name: "unCLIP Checkpoint Loader",
    display_name: "unCLIP Checkpoint Loader",
    description: "",
    category: "WAS Suite/Loaders",
    output_node: false,
  },
  "Upscale Model Loader": {
    input: {
      required: {
        model_name: [
          [
            "sha256_e1a73bd89c2da1ae494774746398689048b5a892bd9653e146713f9df8bca86a.pth",
            "upscale_models.safetensors",
          ],
        ],
      },
    },
    output: ["UPSCALE_MODEL", "STRING"],
    output_is_list: [false, false],
    output_name: ["UPSCALE_MODEL", "MODEL_NAME_TEXT"],
    name: "Upscale Model Loader",
    display_name: "Upscale Model Loader",
    description: "",
    category: "WAS Suite/Loaders",
    output_node: false,
  },
  "Upscale Model Switch": {
    input: {
      required: {
        upscale_model_a: ["UPSCALE_MODEL"],
        upscale_model_b: ["UPSCALE_MODEL"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["UPSCALE_MODEL"],
    output_is_list: [false],
    output_name: ["UPSCALE_MODEL"],
    name: "Upscale Model Switch",
    display_name: "Upscale Model Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Write to GIF": {
    input: {
      required: {
        image: ["IMAGE"],
        transition_frames: [
          "INT",
          {
            default: 30,
            min: 2,
            max: 60,
            step: 1,
          },
        ],
        image_delay_ms: [
          "FLOAT",
          {
            default: 2500,
            min: 0.1,
            max: 60000,
            step: 0.1,
          },
        ],
        duration_ms: [
          "FLOAT",
          {
            default: 0.1,
            min: 0.1,
            max: 60000,
            step: 0.1,
          },
        ],
        loops: [
          "INT",
          {
            default: 0,
            min: 0,
            max: 100,
            step: 1,
          },
        ],
        max_size: [
          "INT",
          {
            default: 512,
            min: 128,
            max: 1280,
            step: 1,
          },
        ],
        output_path: [
          "STRING",
          {
            default: "/comfyui/output",
            multiline: false,
          },
        ],
        filename: [
          "STRING",
          {
            default: "morph_writer",
            multiline: false,
          },
        ],
      },
    },
    output: ["IMAGE", "STRING", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["image_pass", "filepath_text", "filename_text"],
    name: "Write to GIF",
    display_name: "Write to GIF",
    description: "",
    category: "WAS Suite/Animation/Writer",
    output_node: false,
  },
  "Write to Video": {
    input: {
      required: {
        image: ["IMAGE"],
        transition_frames: [
          "INT",
          {
            default: 30,
            min: 0,
            max: 120,
            step: 1,
          },
        ],
        image_delay_sec: [
          "FLOAT",
          {
            default: 2.5,
            min: 0.1,
            max: 60000,
            step: 0.1,
          },
        ],
        fps: [
          "INT",
          {
            default: 30,
            min: 1,
            max: 60,
            step: 1,
          },
        ],
        max_size: [
          "INT",
          {
            default: 512,
            min: 128,
            max: 1920,
            step: 1,
          },
        ],
        output_path: [
          "STRING",
          {
            default: "./ComfyUI/output",
            multiline: false,
          },
        ],
        filename: [
          "STRING",
          {
            default: "comfy_writer",
            multiline: false,
          },
        ],
        codec: [["AVC1", "FFV1", "H264", "MP4V"]],
      },
    },
    output: ["IMAGE", "STRING", "STRING"],
    output_is_list: [false, false, false],
    output_name: ["IMAGE_PASS", "filepath_text", "filename_text"],
    name: "Write to Video",
    display_name: "Write to Video",
    description: "",
    category: "WAS Suite/Animation/Writer",
    output_node: false,
  },
  "VAE Input Switch": {
    input: {
      required: {
        vae_a: ["VAE"],
        vae_b: ["VAE"],
        boolean: [
          "BOOLEAN",
          {
            forceInput: true,
          },
        ],
      },
    },
    output: ["VAE"],
    output_is_list: [false],
    output_name: ["VAE"],
    name: "VAE Input Switch",
    display_name: "VAE Input Switch",
    description: "",
    category: "WAS Suite/Logic",
    output_node: false,
  },
  "Video Dump Frames": {
    input: {
      required: {
        video_path: [
          "STRING",
          {
            default: "./ComfyUI/input/MyVideo.mp4",
            multiline: false,
          },
        ],
        output_path: [
          "STRING",
          {
            default: "./ComfyUI/input/MyVideo",
            multiline: false,
          },
        ],
        prefix: [
          "STRING",
          {
            default: "frame_",
            multiline: false,
          },
        ],
        filenumber_digits: [
          "INT",
          {
            default: 4,
            min: -1,
            max: 8,
            step: 1,
          },
        ],
        extension: [["png", "jpg", "gif", "tiff"]],
      },
    },
    output: ["STRING", "NUMBER"],
    output_is_list: [false, false],
    output_name: ["output_path", "processed_count"],
    name: "Video Dump Frames",
    display_name: "Video Dump Frames",
    description: "",
    category: "WAS Suite/Animation",
    output_node: false,
  },
};
